from django.db import models
from django.utils.translation import gettext_lazy as _
from django.conf import settings
from apps.profissionais.models import Profissional

from apps.pacientes.models import Paciente

import uuid


class Agendamento(models.Model):
    # Identificador Ãšnico Global
    uuid = models.UUIDField(default=uuid.uuid4, unique=True, editable=False)

    paciente = models.ForeignKey(
    'pacientes.Paciente', on_delete=models.CASCADE, related_name='agendamentos'
)




    profissional = models.ForeignKey(
        Profissional, on_delete=models.CASCADE, related_name="agendamentos_profissional"
    )

    # Dados do Agendamento
    data_agendamento = models.DateField(verbose_name=_("Data do Agendamento"))
    horario_inicio = models.TimeField(verbose_name=_("HorÃ¡rio de InÃ­cio"))
    horario_fim = models.TimeField(verbose_name=_("HorÃ¡rio de Fim"))
    tipo_consulta = models.CharField(
        max_length=50,
        choices=[
            ("Consulta Inicial", "Consulta Inicial"),
            ("Retorno", "Retorno"),
            ("Exame", "Exame"),
            ("Teleconsulta", "Teleconsulta"),
        ],
        default="Consulta Inicial",
        verbose_name=_("Tipo de Consulta"),
    )
    local_atendimento = models.CharField(
        max_length=50,
        choices=[
            ("Presencial", "Presencial"),
            ("Telemedicina", "Telemedicina"),
            ("Visita Domiciliar", "Visita Domiciliar"),
        ],
        default="Presencial",
        verbose_name=_("Local do Atendimento"),
    )
    status = models.CharField(
        max_length=20,
        choices=[
            ("Agendado", "Agendado"),
            ("Cancelado", "Cancelado"),
            ("ConcluÃ­do", "ConcluÃ­do"),
        ],
        default="Agendado",
        verbose_name=_("Status do Agendamento"),
    )
    motivo_cancelamento = models.TextField(
        blank=True, null=True, verbose_name=_("Motivo do Cancelamento")
    )
    confirmado_pelo_paciente = models.BooleanField(
        default=False, verbose_name=_("Confirmado pelo Paciente")
    )
    observacoes = models.TextField(blank=True, verbose_name=_("ObservaÃ§Ãµes"))
    sintomas_iniciais = models.TextField(
        blank=True, verbose_name=_("Sintomas Iniciais")
    )
    tipo_atendimento = models.CharField(
        max_length=20,
        choices=[("Emergencial", "Emergencial"), ("Rotina", "Rotina")],
        default="Rotina",
        verbose_name=_("Tipo de Atendimento"),
    )
    motivo_consulta = models.CharField(
        max_length=255, blank=True, verbose_name=_("Motivo da Consulta")
    )

    # Dados Financeiros
    meio_pagamento = models.CharField(
        max_length=50,
        choices=[
            ("CartÃ£o de CrÃ©dito", "CartÃ£o de CrÃ©dito"),
            ("ConvÃªnio", "ConvÃªnio"),
            ("Dinheiro", "Dinheiro"),
            ("PIX", "PIX"),
        ],
        blank=True,
        verbose_name=_("Meio de Pagamento"),
    )
    status_financeiro = models.CharField(
        max_length=20,
        choices=[("Pago", "Pago"), ("Pendente", "Pendente")],
        default="Pendente",
        verbose_name=_("Status Financeiro"),
    )

    # NotificaÃ§Ãµes e Lembretes
    canal_preferencial = models.CharField(
        max_length=20,
        choices=[("WhatsApp", "WhatsApp"), ("SMS", "SMS"), ("Email", "Email")],
        default="WhatsApp",
        verbose_name=_("Canal Preferencial de NotificaÃ§Ã£o"),
    )
    lembrete_enviado_em = models.DateTimeField(
        blank=True, null=True, verbose_name=_("Lembrete Enviado em")
    )
    status_notificacao = models.CharField(
        max_length=20,
        choices=[("Enviado", "Enviado"), ("Lido", "Lido"), ("Pendente", "Pendente")],
        default="Pendente",
        verbose_name=_("Status da NotificaÃ§Ã£o"),
    )

    # AutomaÃ§Ã£o e IntegraÃ§Ã£o IoT
    equipamentos_necessarios = models.CharField(
        max_length=255, blank=True, verbose_name=_("Equipamentos NecessÃ¡rios")
    )
    sala_atendimento = models.CharField(
        max_length=50, blank=True, verbose_name=_("Sala de Atendimento")
    )
    dispositivo_iot = models.CharField(
        max_length=100, blank=True, verbose_name=_("Dispositivo IoT NecessÃ¡rio")
    )

    # Dados para IA e Machine Learning
    probabilidade_cancelamento = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        null=True,
        blank=True,
        verbose_name=_("Probabilidade de Cancelamento (%)"),
    )
    tempo_espera_estimado = models.DurationField(
        blank=True, null=True, verbose_name=_("Tempo de Espera Estimado")
    )
    preferencias_paciente = models.CharField(
        max_length=255, blank=True, verbose_name=_("PreferÃªncias do Paciente")
    )
    confirmar_atendimento_automatico = models.BooleanField(
        default=False, verbose_name=_("Confirmar Atendimento Automaticamente")
    )

    # HistÃ³rico de ModificaÃ§Ãµes
    log_modificacoes = models.TextField(
        blank=True, verbose_name=_("HistÃ³rico de ModificaÃ§Ãµes")
    )
    historico_cancelamentos = models.TextField(
        blank=True, verbose_name=_("HistÃ³rico de Cancelamentos")
    )

    # PrÃ©-Check-in
    pre_checkin_realizado = models.BooleanField(
        default=False, verbose_name=_("PrÃ©-Check-in Realizado")
    )

    # Dados de Controle
    criado_em = models.DateTimeField(auto_now_add=True, verbose_name=_("Criado em"))
    atualizado_em = models.DateTimeField(auto_now=True, verbose_name=_("Atualizado em"))

    class Meta:
        verbose_name = _("Agendamento")
        verbose_name_plural = _("Agendamentos")
        app_label = "agendamentos"
        unique_together = (("profissional", "data_agendamento", "horario_inicio"),)

    def __str__(self):
        return f"Agendamento de {self.paciente.nome_completo} com {self.profissional.nome_completo} em {self.data_agendamento} Ã s {self.horario_inicio}"
# MÃ³dulo Agendamentos - Serializers (serializers.py)

from rest_framework import serializers
from django.utils import timezone
from .models import Agendamento
import uuid


class AgendamentoSerializer(serializers.ModelSerializer):
    class Meta:
        model = Agendamento
        fields = "__all__"

    def validate(self, data):
        # ValidaÃ§Ã£o para garantir que a data e horÃ¡rio do agendamento sejam
        # futuros
        if data["data_agendamento"] < timezone.now().date():
            raise serializers.ValidationError("A data do agendamento deve ser futura.")
        if (
            data["data_agendamento"] == timezone.now().date()
            and data["horario_inicio"] <= timezone.now().time()
        ):
            raise serializers.ValidationError("O horÃ¡rio de inÃ­cio deve ser no futuro.")

        # ValidaÃ§Ã£o para garantir que o horÃ¡rio de fim seja posterior ao
        # horÃ¡rio de inÃ­cio
        if data["horario_fim"] <= data["horario_inicio"]:
            raise serializers.ValidationError(
                "O horÃ¡rio de fim deve ser posterior ao horÃ¡rio de inÃ­cio."
            )

        # ValidaÃ§Ã£o para garantir que nÃ£o haja sobreposiÃ§Ã£o de agendamentos
        # para o mesmo profissional
        agendamentos_existentes = Agendamento.objects.filter(
            profissional=data["profissional"],
            data_agendamento=data["data_agendamento"],
            horario_inicio__lt=data["horario_fim"],
            horario_fim__gt=data["horario_inicio"],
        ).exclude(uuid=data.get("uuid"))
        if agendamentos_existentes.exists():
            raise serializers.ValidationError(
                "O horÃ¡rio do agendamento conflita com outro agendamento existente para este profissional."
            )

        # ValidaÃ§Ã£o para garantir que nÃ£o haja sobreposiÃ§Ã£o de agendamentos
        # para o mesmo paciente
        agendamentos_paciente = Agendamento.objects.filter(
            paciente=data["paciente"],
            data_agendamento=data["data_agendamento"],
            horario_inicio__lt=data["horario_fim"],
            horario_fim__gt=data["horario_inicio"],
        ).exclude(uuid=data.get("uuid"))
        if agendamentos_paciente.exists():
            raise serializers.ValidationError(
                "O paciente jÃ¡ possui um agendamento no mesmo horÃ¡rio."
            )

        # ValidaÃ§Ã£o para garantir que o status financeiro esteja correto se o
        # agendamento for concluÃ­do
        if data["status"] == "ConcluÃ­do" and data["status_financeiro"] != "Pago":
            raise serializers.ValidationError(
                "Agendamentos concluÃ­dos devem ter o status financeiro como 'Pago'."
            )

        # ValidaÃ§Ã£o para garantir que o motivo do cancelamento esteja
        # preenchido se o agendamento for cancelado
        if data["status"] == "Cancelado" and not data.get("motivo_cancelamento"):
            raise serializers.ValidationError(
                "O motivo do cancelamento deve ser informado quando o agendamento for cancelado."
            )

        # ValidaÃ§Ã£o para garantir que o canal preferencial de notificaÃ§Ã£o seja
        # consistente com as preferÃªncias do paciente
        if data["canal_preferencial"] not in ["WhatsApp", "SMS", "Email"]:
            raise serializers.ValidationError(
                "Canal preferencial de notificaÃ§Ã£o invÃ¡lido."
            )

        # ValidaÃ§Ã£o para garantir a disponibilidade dos equipamentos e sala de
        # atendimento
        if data.get("equipamentos_necessarios") or data.get("sala_atendimento"):
            conflitos = Agendamento.objects.filter(
                data_agendamento=data["data_agendamento"],
                horario_inicio__lt=data["horario_fim"],
                horario_fim__gt=data["horario_inicio"],
                sala_atendimento=data.get("sala_atendimento"),
            ).exclude(uuid=data.get("uuid"))
            if conflitos.exists():
                raise serializers.ValidationError(
                    "A sala de atendimento ou equipamentos necessÃ¡rios jÃ¡ estÃ£o reservados para outro agendamento no mesmo horÃ¡rio."
                )

        # ValidaÃ§Ã£o para garantir que o profissional nÃ£o esteja de fÃ©rias ou
        # ausente na data de agendamento
        if (
            hasattr(data["profissional"], "ferias")
            and data["profissional"]
            .ferias.filter(
                inicio__lte=data["data_agendamento"], fim__gte=data["data_agendamento"]
            )
            .exists()
        ):
            raise serializers.ValidationError(
                "O profissional estÃ¡ de fÃ©rias ou ausente na data selecionada."
            )

        # ValidaÃ§Ã£o para limitar o nÃºmero de agendamentos do mesmo paciente no
        # mesmo dia
        limite_agendamentos_paciente = Agendamento.objects.filter(
            paciente=data["paciente"], data_agendamento=data["data_agendamento"]
        ).count()
        if limite_agendamentos_paciente >= 3:
            raise serializers.ValidationError(
                "O paciente jÃ¡ possui muitos agendamentos para o mesmo dia."
            )

        # ValidaÃ§Ã£o de prÃ©-check-in
        if data.get("pre_checkin_realizado") and not data.get(
            "confirmado_pelo_paciente"
        ):
            raise serializers.ValidationError(
                "O prÃ©-check-in nÃ£o pode ser realizado sem a confirmaÃ§Ã£o do paciente."
            )

        # ValidaÃ§Ã£o para garantir que o agendamento nÃ£o ocorra em feriados ou
        # dias bloqueados
        if (
            hasattr(data["profissional"], "dias_bloqueados")
            and data["profissional"]
            .dias_bloqueados.filter(data=data["data_agendamento"])
            .exists()
        ):
            raise serializers.ValidationError(
                "O agendamento nÃ£o pode ser feito em um feriado ou dia bloqueado para este profissional."
            )

        # ValidaÃ§Ã£o para garantir que o status seja consistente com a
        # confirmaÃ§Ã£o do paciente
        if data["status"] == "ConcluÃ­do" and not data.get("confirmado_pelo_paciente"):
            raise serializers.ValidationError(
                "O agendamento nÃ£o pode ser concluÃ­do sem a confirmaÃ§Ã£o do paciente."
            )

        return data
# MÃ³dulo Agendamentos - URLs (urls.py)

from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import AgendamentoViewSet

router = DefaultRouter()
router.register(r"agendamentos", AgendamentoViewSet, basename="agendamento")

urlpatterns = [
    path("", include(router.urls)),
]
# MÃ³dulo Agendamentos - Views (views.py)

from rest_framework import viewsets, status
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.decorators import action
from .models import Agendamento
from .serializers import AgendamentoSerializer
from django.utils import timezone
from django.core.mail import send_mail
from django.conf import settings
import logging
import threading
import uuid

logger = logging.getLogger(__name__)


class AgendamentoViewSet(viewsets.ModelViewSet):
    serializer_class = AgendamentoSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # Retorna os agendamentos futuros do usuÃ¡rio autenticado (paciente ou
        # profissional)
        user = self.request.user
        if hasattr(user, 'paciente'):
            return Agendamento.objects.filter(
    paciente=user.paciente,
     data_agendamento__gte=timezone.now().date())
        elif hasattr(user, 'profissional'):
            return Agendamento.objects.filter(
    profissional=user.profissional,
     data_agendamento__gte=timezone.now().date())
        return Agendamento.objects.none()

    @action(detail=True, methods=['post'],
            permission_classes=[IsAuthenticated])
    def confirmar(self, request, pk=None):
        # AÃ§Ã£o para confirmar o agendamento pelo paciente
        agendamento = self.get_object()
        if hasattr(
    request.user,
     'paciente') and agendamento.paciente != request.user.paciente:
            return Response(
    {
        'detail': 'VocÃª nÃ£o tem permissÃ£o para confirmar este agendamento.'},
         status=status.HTTP_403_FORBIDDEN)

        if agendamento.confirmado_pelo_paciente:
            return Response({'detail': 'Agendamento jÃ¡ foi confirmado.'},
                            status=status.HTTP_400_BAD_REQUEST)

        agendamento.confirmado_pelo_paciente = True
        agendamento.save()

       

    @ action(detail=True, methods=['post'],
             permission_classes=[IsAuthenticated])
    def cancelar(self, request, pk=None):
        # AÃ§Ã£o para cancelar um agendamento
        agendamento= self.get_object()
        motivo= request.data.get('motivo_cancelamento')
        if not motivo:
            return Response({'detail': 'Motivo do cancelamento deve ser informado.'},
                            status=status.HTTP_400_BAD_REQUEST)

        # Verificar permissÃµes de cancelamento
        if hasattr(
    request.user,
     'paciente') and agendamento.paciente != request.user.paciente:
            return Response(
    {
        'detail': 'VocÃª nÃ£o tem permissÃ£o para cancelar este agendamento.'},
         status = status.HTTP_403_FORBIDDEN)
        if hasattr(
    request.user,
     'profissional') and agendamento.profissional != request.user.profissional:
            return Response(
    {
        'detail': 'VocÃª nÃ£o tem permissÃ£o para cancelar este agendamento.'},
         status = status.HTTP_403_FORBIDDEN)

        agendamento.status= 'Cancelado'
        agendamento.motivo_cancelamento= motivo
        agendamento.save()

       

    @ action(detail=True, methods=['post'],
             permission_classes=[IsAuthenticated])
    def reagendar(self, request, pk=None):
        # AÃ§Ã£o para reagendar um agendamento
        agendamento= self.get_object()
        nova_data= request.data.get('data_agendamento')
        novo_horario_inicio= request.data.get('horario_inicio')
        novo_horario_fim= request.data.get('horario_fim')

        if not nova_data or not novo_horario_inicio or not novo_horario_fim:
            return Response({'detail': 'Dados de reagendamento incompletos.'},
                            status=status.HTTP_400_BAD_REQUEST)

        # ValidaÃ§Ã£o para garantir que a nova data e horÃ¡rio sejam futuros
        if nova_data < timezone.now().date() or (nova_data == timezone.now().date()
                                    and novo_horario_inicio <= timezone.now().time()):
            return Response({'detail': 'A nova data e horÃ¡rio devem ser no futuro.'},
                            status=status.HTTP_400_BAD_REQUEST)

        # ValidaÃ§Ã£o para garantir que a capacidade da sala nÃ£o seja excedida
        # (Exemplo para IoT)
        if agendamento.sala_atendimento:
            capacidade_sala= agendamento.sala_atendimento.capacidade  # Supondo que o modelo de sala tenha um campo 'capacidade'
            ocupacao_atual= Agendamento.objects.filter(
                data_agendamento=nova_data,
                horario_inicio__lt=novo_horario_fim,
                horario_fim__gt=novo_horario_inicio,
                sala_atendimento=agendamento.sala_atendimento
            ).count()
            if ocupacao_atual >= capacidade_sala:
                return Response(
    {
        'detail': 'A capacidade da sala de atendimento foi excedida.'},
         status=status.HTTP_400_BAD_REQUEST)

        # Atualizar o agendamento com a nova data e horÃ¡rio
        agendamento.data_agendamento= nova_data
        agendamento.horario_inicio= novo_horario_inicio
        agendamento.horario_fim= novo_horario_fim
        agendamento.status= 'Agendado'
        agendamento.motivo_cancelamento= ''  # Limpar motivo de cancelamento, se houver
        agendamento.save()

     

    @ action(detail=False, methods=['get'],
             permission_classes=[IsAuthenticated])
    def meus_agendamentos(self, request):
        # Retorna os agendamentos do paciente ou profissional autenticado
        if hasattr(request.user, 'paciente'):
            agendamentos= Agendamento.objects.filter(paciente=request.user.paciente)
        elif hasattr(request.user, 'profissional'):
            agendamentos= Agendamento.objects.filter(profissional=request.user.profissional)
        else:
            return Response(
    {
        'detail': 'VocÃª nÃ£o tem permissÃ£o para visualizar agendamentos.'},
         status=status.HTTP_403_FORBIDDEN)

        serializer= self.get_serializer(agendamentos, many=True)
        return Response(serializer.data)
from cryptography.fernet import Fernet
from django.conf import settings
from django.db import models
from django.utils.translation import gettext_lazy as _
import uuid
from django.utils import timezone

# Gerar uma chave de criptografia para uso nos campos sensÃ­veis (a chave deve ser armazenada em um local seguro)
# Aqui estamos simulando a recuperaÃ§Ã£o da chave do arquivo de configuraÃ§Ãµes
cipher_suite = Fernet(settings.ENCRYPTION_KEY)

class Paciente(models.Model):
    # Identificador Ãšnico Global
    uuid = models.UUIDField(unique=True, editable=False, default=uuid.uuid4)

    # Dados Pessoais
    nome_completo = models.CharField(_("Nome Completo"), max_length=255)
    foto = models.ImageField(
        _("Foto"), upload_to="pacientes/fotos/", blank=True, null=True
    )
    cpf = models.CharField(_("CPF"), max_length=255, unique=True)
    rg = models.CharField(_("RG"), max_length=255, blank=True)
    data_nascimento = models.DateField(_("Data de Nascimento"))
    sexo = models.CharField(
        _("Sexo"),
        max_length=1,
        choices=[
            ("M", "Masculino"),
            ("F", "Feminino"),
            ("O", "Outro"),
        ],
    )
    estado_civil = models.CharField(_("Estado Civil"), max_length=50, blank=True)
    profissao = models.CharField(_("ProfissÃ£o"), max_length=100, blank=True)
    nacionalidade = models.CharField(_("Nacionalidade"), max_length=100, blank=True)
    naturalidade = models.CharField(_("Naturalidade"), max_length=100, blank=True)
    endereco = models.CharField(_("EndereÃ§o"), max_length=255)
    numero = models.CharField(_("NÃºmero"), max_length=10)
    complemento = models.CharField(_("Complemento"), max_length=100, blank=True)
    bairro = models.CharField(_("Bairro"), max_length=100)
    cidade = models.CharField(_("Cidade"), max_length=100)
    estado = models.CharField(_("Estado"), max_length=100)
    cep = models.CharField(_("CEP"), max_length=9, blank=True)
    telefone_residencial = models.CharField(
        _("Telefone Residencial"), max_length=20, blank=True
    )
    telefone_celular = models.CharField(
        _("Telefone Celular"), max_length=20, blank=True
    )
    email = models.EmailField(_("E-mail"), blank=True)
    contato_emergencia = models.CharField(
        _("Contato de EmergÃªncia"), max_length=255, blank=True
    )
    telefone_emergencia = models.CharField(
        _("Telefone de EmergÃªncia"), max_length=20, blank=True
    )

    # Dados Complementares
    nome_mae = models.CharField(_("Nome da MÃ£e"), max_length=255, blank=True)
    nome_pai = models.CharField(_("Nome do Pai"), max_length=255, blank=True)
    consentimento_lgpd = models.BooleanField(_("Consentimento LGPD"), default=False)
    observacoes = models.TextField(_("ObservaÃ§Ãµes"), blank=True)

    # Relacionamentos
    prontuario = models.OneToOneField(
        "prontuarios.Prontuario",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="paciente_prontuario",
    )

    # Auditoria
    created_at = models.DateTimeField(_("Data de CriaÃ§Ã£o"), default=timezone.now)
    updated_at = models.DateTimeField(_("Ãšltima AtualizaÃ§Ã£o"), auto_now=True)

    class Meta:
        app_label = "pacientes"
        verbose_name = _("Paciente")
        verbose_name_plural = _("Pacientes")

    def __str__(self):
        return self.nome_completo

    def save(self, *args, **kwargs):
        # Criptografar CPF e RG antes de salvar
        if self.cpf:
            self.cpf = cipher_suite.encrypt(self.cpf.encode()).decode()
        if self.rg:
            self.rg = cipher_suite.encrypt(self.rg.encode()).decode()
        super().save(*args, **kwargs)

    def decrypt_cpf(self):
        # Descriptografar o CPF para uso
        if self.cpf:
            try:
                return cipher_suite.decrypt(self.cpf.encode()).decode()
            except Exception as e:
                return f"Erro ao descriptografar CPF: {e}"
        return None

    def decrypt_rg(self):
        # Descriptografar o RG para uso
        if self.rg:
            try:
                return cipher_suite.decrypt(self.rg.encode()).decode()
            except Exception as e:
                return f"Erro ao descriptografar RG: {e}"
        return None
from rest_framework import serializers
from .models import Paciente
from django.core.validators import validate_email
import re
from apps.prontuarios.serializers import ProntuarioSerializer

class PacienteSerializer(serializers.ModelSerializer):
    cpf = serializers.SerializerMethodField()
    rg = serializers.SerializerMethodField()
    prontuario = ProntuarioSerializer(read_only=True)

    class Meta:
        model = Paciente
        fields = [
            "uuid",
            "nome_completo",
            "foto",
            "cpf",
            "rg",
            "data_nascimento",
            "sexo",
            "estado_civil",
            "profissao",
            "nacionalidade",
            "naturalidade",
            "endereco",
            "numero",
            "complemento",
            "bairro",
            "cidade",
            "estado",
            "cep",
            "telefone_residencial",
            "telefone_celular",
            "email",
            "contato_emergencia",
            "telefone_emergencia",
            "nome_mae",
            "nome_pai",
            "consentimento_lgpd",
            "observacoes",
            "created_at",
            "updated_at",
            "prontuario",
        ]
        read_only_fields = ["created_at", "updated_at"]

    def get_cpf(self, obj):
        return obj.decrypt_cpf()

    def get_rg(self, obj):
        return obj.decrypt_rg()

    def validate_cpf(self, value):
        if not value or value.strip() == "":
          raise serializers.ValidationError("CPF nÃ£o pode estar vazio.")
        if not re.match(r"\d{3}\.\d{3}\.\d{3}-\d{2}", value):
            raise serializers.ValidationError("CPF deve estar no formato XXX.XXX.XXX-XX.")
        return value

    
    def validate_email(self, value):
        # ValidaÃ§Ã£o de e-mail
        try:
            validate_email(value)
        except Exception:
            raise serializers.ValidationError("E-mail invÃ¡lido")
        return value
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import PacienteViewSet

router = DefaultRouter()
router.register(r'pacientes', PacienteViewSet)

urlpatterns = [
    path('', include(router.urls)),
]
# Incremento 3: Melhorias nas VisualizaÃ§Ãµes (views.py)

from rest_framework import viewsets, permissions, filters
from rest_framework.pagination import PageNumberPagination
from django_filters.rest_framework import DjangoFilterBackend
from .models import Paciente
from .serializers import PacienteSerializer
import logging

logger = logging.getLogger(__name__)

class PacientePagination(PageNumberPagination):
    page_size = 10
    page_size_query_param = "page_size"
    max_page_size = 100

class PacienteViewSet(viewsets.ModelViewSet):
    queryset = Paciente.objects.all()
    serializer_class = PacienteSerializer
    pagination_class = PacientePagination
    
    filter_backends = [
        DjangoFilterBackend,
        filters.SearchFilter,
        filters.OrderingFilter,
    ]
    filterset_fields = ["sexo", "estado_civil", "cidade", "estado"]
    search_fields = ["nome_completo", "cpf", "email"]
    ordering_fields = ["nome_completo", "data_nascimento", "created_at"]
    ordering = ["nome_completo"]

    def get_permissions(self):
        if self.action in ["list", "retrieve", "create", "update", "destroy"]:
            return [permissions.IsAuthenticated()]
        return super().get_permissions()

    def list(self, request, *args, **kwargs):
        logger.debug("Listando pacientes")
        response = super().list(request, *args, **kwargs)
        logger.debug(f"Response data: {response.data}")
        return response

"""
Django settings for ClinicaAI project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from cryptography.fernet import Fernet
from datetime import timedelta

# Gere uma chave de criptografia
ENCRYPTION_KEY = 'IpmmvITSPLun5m6lOtUPHszQ7yTKRlmAHQ9JC47XMKg='

def decrypt(encrypted_text):
    # Adicione padding se necessÃ¡rio
    padding = len(encrypted_text) % 4
    if padding != 0:
        encrypted_text += '=' * (4 - padding)
    try:
        cipher_suite = Fernet(ENCRYPTION_KEY)
        decrypted_text = cipher_suite.decrypt(encrypted_text.encode()).decode()
        return decrypted_text
    except Exception as e:
        raise ValueError(f"Erro ao descriptografar o texto: {e}")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = decrypt('gAAAAABncfHWNo6zmHaKhNfNchedvGqjsJbCVDVWMZRmWKTKCAjCesVQrZOuImCOiZG33ls__sm-o74_5w4_DPPaeOtdWfIhAA==')  # Substituido
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'prometheus_client',
    'drf_yasg',
    'channels',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'apps.whatsapp',
    'apps.conhecimento',
    'apps.voip',
    'apps.iot',
    'apps.aprovacoes',
    'apps.mensagens',
    'apps.produtividade',
    'apps.compromissos',
    'apps.central_ajuda',
    'apps.servico_campo',
    'apps.planilhas_horas',
    'apps.projeto',
    'apps.pesquisas',
    'apps.automacao_marketing',
    'apps.eventos',
    'apps.marketing_sms',
    'apps.marketing_email',
    'apps.redes_sociais',
    'apps.frota',
    'apps.indicacoes',
    'apps.avaliacoes',
    'apps.folgas',
    'apps.recrutamento',
    'apps.recursos_humanos',
    'apps.qualidade',
    'apps.manutencao',
    'apps.compras',
    'apps.prontuarios',
    'apps.plm',
    'apps.fabricacao',
    'apps.inventario',
    'apps.elearning',
    'apps.chat_ao_vivo',
    'apps.forum',
    'apps.blog',
    'apps.ecommerce',
    'apps.criador_sites',
    'apps.locacao',
    'apps.assinaturas',
    'apps.crm',
    'apps.vendas',
    'apps.assinar_documentos',
    'apps.documentos',
    'apps.planilhas',
    'apps.despesas',
    'apps.faturamento',
    'apps.financeiro',
    'apps.agendamentos',
    'apps.pacientes',
    'apps.profissionais',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ClinicaAI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ClinicaAI.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'clinicaai',
        'USER': 'postgres',
        'PASSWORD': decrypt('gAAAAABncfHWNo6zmHaKhNfNchedvGqjsJbCVDVWMZRmWKTKCAjCesVQrZOuImCOiZG33ls__sm-o74_5w4_DPPaeOtdWfIhAA=='),  # Substitua pelo texto criptografado gerado para a senha do banco de dados
        'HOST': 'localhost',
        'PORT': '5432'
    },

}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ConfiguraÃ§Ãµes de CORS
CORS_ALLOW_ALL_ORIGINS = True

# Ou permitir origens especÃ­ficas
# CORS_ALLOWED_ORIGINS = [
#     'http://localhost:3000',
# ]

# ConfiguraÃ§Ãµes do Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',  # Exigir autenticaÃ§Ã£o por padrÃ£o
    ),
}

# ConfiguraÃ§Ãµes do Simple JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=300),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=3),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

ASGI_APPLICATION = 'ClinicaAI.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('127.0.0.1', 6379)],
        },
    },
}
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'debug.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
"""
URL configuration for ClinicaAI project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from rest_framework_simplejwt.views import (
    TokenObtainPairView,
    TokenRefreshView,
    TokenVerifyView,
)
from rest_framework import routers
from django.utils.log import DEFAULT_LOGGING
import logging

logger = logging.getLogger(__name__)

router = routers.DefaultRouter()

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/auth/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/auth/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    path('api/auth/token/verify/', TokenVerifyView.as_view(), name='token_verify'),
    path('api/prontuarios/', include('apps.prontuarios.urls')),
    path('api/profissionais/', include('apps.profissionais.urls')),
    path('api/', include('apps.pacientes.urls')),  # Inclua as URLs do aplicativo pacientes
    path('api/', include(router.urls)),
    path('api/dashboard/', include('apps.dashboard.urls')),

]

# Remova a adiÃ§Ã£o dos middlewares daqui
# MIDDLEWARE.append('ClinicaAI.urls.LogErrorsMiddleware')
# MIDDLEWARE.append('ClinicaAI.urls.LogLoginAttemptsMiddleware')
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ClinicaAI.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
