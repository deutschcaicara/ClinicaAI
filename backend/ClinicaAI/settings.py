"""
Django settings for ClinicaAI project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from cryptography.fernet import Fernet
from datetime import timedelta
from celery.schedules import crontab
import sys

# Gere uma chave de criptografia
ENCRYPTION_KEY = 'IpmmvITSPLun5m6lOtUPHszQ7yTKRlmAHQ9JC47XMKg='

def decrypt(encrypted_text):
    # Adicione padding se necessário
    padding = len(encrypted_text) % 4
    if padding != 0:
        encrypted_text += '=' * (4 - padding)
    try:
        cipher_suite = Fernet(ENCRYPTION_KEY)
        decrypted_text = cipher_suite.decrypt(encrypted_text.encode()).decode()
        return decrypted_text
    except Exception as e:
        raise ValueError(f"Erro ao descriptografar o texto: {e}")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = decrypt('gAAAAABncfHWNo6zmHaKhNfNchedvGqjsJbCVDVWMZRmWKTKCAjCesVQrZOuImCOiZG33ls__sm-o74_5w4_DPPaeOtdWfIhAA==')  # Substituido
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'prometheus_client',
    'drf_yasg',
    'channels',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'apps.whatsapp',
    'apps.conhecimento',
    'apps.voip',
    'apps.iot',
    'apps.aprovacoes',
    'apps.mensagens',
    'apps.produtividade',
    'apps.compromissos',
    'apps.central_ajuda',
    'apps.servico_campo',
    'apps.planilhas_horas',
    'apps.projeto',
    'apps.pesquisas',
    'apps.automacao_marketing',
    'apps.eventos',
    'apps.marketing_sms',
    'apps.marketing_email',
    'apps.redes_sociais',
    'apps.frota',
    'apps.indicacoes',
    'apps.avaliacoes',
    'apps.folgas',
    'apps.recrutamento',
    'apps.recursos_humanos',
    'apps.qualidade',
    'apps.manutencao',
    'apps.compras',
    'apps.prontuarios',
    'apps.plm',
    'apps.fabricacao',
    'apps.inventario',
    'apps.elearning',
    'apps.chat_ao_vivo',
    'apps.forum',
    'apps.blog',
    'apps.ecommerce',
    'apps.criador_sites',
    'apps.locacao',
    'apps.clinica_core',
    'apps.assinaturas',
    'apps.crm',
    'apps.vendas',
    'apps.assinar_documentos',
    'apps.documentos',
    'apps.planilhas',
    'apps.despesas',
    'apps.faturamento',
    'apps.financeiro',
    'apps.agendamentos',
    'apps.pacientes',
    'apps.profissionais',
    'apps.authentication',
    'rest_framework_simplejwt.token_blacklist',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ClinicaAI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ClinicaAI.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'clinicaai',
        'USER': 'postgres',
        'PASSWORD': decrypt('gAAAAABncfHWNo6zmHaKhNfNchedvGqjsJbCVDVWMZRmWKTKCAjCesVQrZOuImCOiZG33ls__sm-o74_5w4_DPPaeOtdWfIhAA=='),  # Substitua pelo texto criptografado gerado para a senha do banco de dados
        'HOST': 'localhost',
        'PORT': '5432'
    },

}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True  # Ativa suporte a traduções
USE_L10N = True  # Formatação de números, datas e etc.
USE_TZ = True    # Ativa suporte a fuso horário

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configurações de CORS
CORS_ALLOW_ALL_ORIGINS = True

# Ou permitir origens específicas
# CORS_ALLOWED_ORIGINS = [
#     'http://localhost:3000',
# ]

# Configurações do Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',  # Exigir autenticação por padrão
    ),
'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}

# Configurações do Simple JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=3),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
     'TOKEN_BLACKLIST_ENABLED': True, 
}

ASGI_APPLICATION = 'ClinicaAI.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('127.0.0.1', 6379)],
        },
    },
}
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'debug.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
CELERY_BEAT_SCHEDULE = {
    'enviar-lembretes-vencimento': {
        'task': 'apps.financeiro.tasks.enviar_lembretes_vencimento',
        'schedule': crontab(minute=0, hour=8),  # Todos os dias às 8h
    },
    'enviar-alertas-atraso': {
        'task': 'apps.financeiro.tasks.enviar_alertas_atraso',
        'schedule': crontab(minute=0, hour=9),  # Todos os dias às 9h
    },
    'conciliar-transacoes': {
        'task': 'apps.financeiro.tasks.conciliar_transacoes',
        'schedule': crontab(minute=0, hour=23),  # Diariamente às 23h
    },
    'gerar-relatorio-financeiro': {
        'task': 'apps.financeiro.tasks.gerar_relatorio_financeiro',
        'schedule': crontab(minute=0, hour=6, day_of_month='1'),  # Todo primeiro dia do mês
        'args': ['2025-01-01', '2025-01-31'],  # Substitua pelos períodos corretos
    },
}
# Configurações específicas para testes
if "pytest" in sys.modules:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',  # Banco de dados leve para testes
            'NAME': ':memory:',  # Banco em memória
        }
    }
    PASSWORD_HASHERS = [
        'django.contrib.auth.hashers.MD5PasswordHasher',
    ]
    EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'