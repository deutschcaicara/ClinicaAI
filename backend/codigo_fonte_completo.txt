/mnt/dados/ClinicaAI/backend/apps/despesas/views.py
/mnt/dados/ClinicaAI/backend/apps/despesas/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/despesas/views.py: from .models import DespesasModel
/mnt/dados/ClinicaAI/backend/apps/despesas/views.py: from .serializers import DespesasSerializer
/mnt/dados/ClinicaAI/backend/apps/despesas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/views.py: class DespesasViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/despesas/views.py:     queryset = DespesasModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/despesas/views.py:     serializer_class = DespesasSerializer
/mnt/dados/ClinicaAI/backend/apps/despesas/apps.py
/mnt/dados/ClinicaAI/backend/apps/despesas/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/despesas/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/apps.py: class DespesasConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/despesas/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/despesas/apps.py:     name = "apps.despesas"
/mnt/dados/ClinicaAI/backend/apps/despesas/models.py
/mnt/dados/ClinicaAI/backend/apps/despesas/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/despesas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/models.py: class DespesasModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/despesas/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/despesas/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/despesas/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/despesas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/despesas/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:             name="DespesasModel",
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/despesas/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/despesas/urls.py
/mnt/dados/ClinicaAI/backend/apps/despesas/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/despesas/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/despesas/urls.py: from .views import DespesasViewSet
/mnt/dados/ClinicaAI/backend/apps/despesas/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/despesas/urls.py: router.register(r"despesas", DespesasViewSet)
/mnt/dados/ClinicaAI/backend/apps/despesas/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/despesas/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/despesas/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/despesas/admin.py
/mnt/dados/ClinicaAI/backend/apps/despesas/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/despesas/admin.py: from .models import DespesasModel
/mnt/dados/ClinicaAI/backend/apps/despesas/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/admin.py: @admin.register(DespesasModel)
/mnt/dados/ClinicaAI/backend/apps/despesas/admin.py: class DespesasAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/despesas/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/despesas/serializers.py
/mnt/dados/ClinicaAI/backend/apps/despesas/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/despesas/serializers.py: from .models import DespesasModel
/mnt/dados/ClinicaAI/backend/apps/despesas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/serializers.py: class DespesasSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/despesas/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/despesas/serializers.py:         model = DespesasModel
/mnt/dados/ClinicaAI/backend/apps/despesas/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/despesas/tests.py
/mnt/dados/ClinicaAI/backend/apps/despesas/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/despesas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/despesas/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/indicacoes/views.py
/mnt/dados/ClinicaAI/backend/apps/indicacoes/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/indicacoes/views.py: from .models import IndicacoesModel
/mnt/dados/ClinicaAI/backend/apps/indicacoes/views.py: from .serializers import IndicacoesSerializer
/mnt/dados/ClinicaAI/backend/apps/indicacoes/views.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/views.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/views.py: class IndicacoesViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/indicacoes/views.py:     queryset = IndicacoesModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/indicacoes/views.py:     serializer_class = IndicacoesSerializer
/mnt/dados/ClinicaAI/backend/apps/indicacoes/apps.py
/mnt/dados/ClinicaAI/backend/apps/indicacoes/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/indicacoes/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/apps.py: class IndicacoesConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/indicacoes/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/indicacoes/apps.py:     name = "apps.indicacoes"
/mnt/dados/ClinicaAI/backend/apps/indicacoes/models.py
/mnt/dados/ClinicaAI/backend/apps/indicacoes/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/indicacoes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/models.py: class IndicacoesModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/indicacoes/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/indicacoes/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/indicacoes/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/indicacoes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/indicacoes/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:             name="IndicacoesModel",
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/indicacoes/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/indicacoes/urls.py
/mnt/dados/ClinicaAI/backend/apps/indicacoes/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/indicacoes/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/indicacoes/urls.py: from .views import IndicacoesViewSet
/mnt/dados/ClinicaAI/backend/apps/indicacoes/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/indicacoes/urls.py: router.register(r"indicacoes", IndicacoesViewSet)
/mnt/dados/ClinicaAI/backend/apps/indicacoes/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/indicacoes/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/indicacoes/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/indicacoes/admin.py
/mnt/dados/ClinicaAI/backend/apps/indicacoes/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/indicacoes/admin.py: from .models import IndicacoesModel
/mnt/dados/ClinicaAI/backend/apps/indicacoes/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/admin.py: @admin.register(IndicacoesModel)
/mnt/dados/ClinicaAI/backend/apps/indicacoes/admin.py: class IndicacoesAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/indicacoes/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/indicacoes/serializers.py
/mnt/dados/ClinicaAI/backend/apps/indicacoes/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/indicacoes/serializers.py: from .models import IndicacoesModel
/mnt/dados/ClinicaAI/backend/apps/indicacoes/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/serializers.py: class IndicacoesSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/indicacoes/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/indicacoes/serializers.py:         model = IndicacoesModel
/mnt/dados/ClinicaAI/backend/apps/indicacoes/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/indicacoes/tests.py
/mnt/dados/ClinicaAI/backend/apps/indicacoes/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/indicacoes/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/indicacoes/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: # Módulo Prontuários - Views (views.py)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: from . import views
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: from .models import (
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     Prontuario,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     HistoricoMedicamentos,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     EvolucaoClinica,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     DadosVitais,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     HistoricoAcessosProntuario,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     ExameComplementar,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: from .serializers import (
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     ProntuarioSerializer,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     HistoricoMedicamentosSerializer,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     EvolucaoClinicaSerializer,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     DadosVitaisSerializer,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     HistoricoAcessosProntuarioSerializer,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     ExameComplementarSerializer,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: from rest_framework.permissions import IsAuthenticated
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: from rest_framework.response import Response
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: from rest_framework import status
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: from rest_framework.decorators import action
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: from rest_framework.permissions import BasePermission, SAFE_METHODS
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: # Custom permission to restrict read/write access based on user roles
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: class IsAdminOrReadOnly(BasePermission):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     def has_permission(self, request, view):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         if request.method in SAFE_METHODS:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             return True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         return request.user and request.user.is_staff
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: class IsDoctorOrReadOnly(BasePermission):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     def has_permission(self, request, view):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         if request.method in SAFE_METHODS:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             return True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         return (
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             request.user
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             and request.user.groups.filter(name="Doctor").exists()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             or request.user.is_staff
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: # Views
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: class ProntuarioViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     queryset = Prontuario.objects.all()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     serializer_class = ProntuarioSerializer
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     permission_classes = [IsAuthenticated]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     def create(self, request, *args, **kwargs):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         # Filtra campos sensíveis antes de criar
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         data = request.data.copy()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         sensitive_fields = ["created_by", "updated_by", "uuid"]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         for field in sensitive_fields:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             data.pop(field, None)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer = self.get_serializer(data=data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer.is_valid(raise_exception=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         self.perform_create(serializer)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         headers = self.get_success_headers(serializer.data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         return Response(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             serializer.data, status=status.HTTP_201_CREATED, headers=headers
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     def update(self, request, *args, **kwargs):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         # Filtra campos sensíveis antes de atualizar
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         data = request.data.copy()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         sensitive_fields = ["created_by", "updated_by", "uuid"]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         for field in sensitive_fields:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             data.pop(field, None)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         partial = kwargs.pop("partial", False)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         instance = self.get_object()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer = self.get_serializer(instance, data=data, partial=partial)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer.is_valid(raise_exception=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         self.perform_update(serializer)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         return Response(serializer.data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: class HistoricoMedicamentosViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     queryset = HistoricoMedicamentos.objects.all()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     serializer_class = HistoricoMedicamentosSerializer
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     permission_classes = [IsAuthenticated, IsAdminOrReadOnly]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     def create(self, request, *args, **kwargs):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         # Filtra campos sensíveis antes de criar
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         data = request.data.copy()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         sensitive_fields = ["prescrito_por"]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         for field in sensitive_fields:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             if not request.user.is_staff:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:                 data.pop(field, None)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer = self.get_serializer(data=data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer.is_valid(raise_exception=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         self.perform_create(serializer)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         headers = self.get_success_headers(serializer.data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         return Response(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             serializer.data, status=status.HTTP_201_CREATED, headers=headers
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     def update(self, request, *args, **kwargs):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         # Filtra campos sensíveis antes de atualizar
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         data = request.data.copy()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         sensitive_fields = ["prescrito_por"]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         for field in sensitive_fields:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             if not request.user.is_staff:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:                 data.pop(field, None)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         partial = kwargs.pop("partial", False)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         instance = self.get_object()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer = self.get_serializer(instance, data=data, partial=partial)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer.is_valid(raise_exception=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         self.perform_update(serializer)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         return Response(serializer.data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: class EvolucaoClinicaViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     queryset = EvolucaoClinica.objects.all()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     serializer_class = EvolucaoClinicaSerializer
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     permission_classes = [IsAuthenticated, IsDoctorOrReadOnly]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     def update(self, request, *args, **kwargs):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         # Limitar campos que podem ser editados por diferentes tipos de
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         # usuários
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         data = request.data.copy()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         restricted_fields = ["data_evolucao", "profissional_responsavel"]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         if not request.user.is_staff:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             for field in restricted_fields:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:                 data.pop(field, None)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         partial = kwargs.pop("partial", False)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         instance = self.get_object()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer = self.get_serializer(instance, data=data, partial=partial)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer.is_valid(raise_exception=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         self.perform_update(serializer)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         return Response(serializer.data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: class DadosVitaisViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     queryset = DadosVitais.objects.all()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     serializer_class = DadosVitaisSerializer
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     permission_classes = [IsAuthenticated, IsDoctorOrReadOnly]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     def create(self, request, *args, **kwargs):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         # Filtra campos sensíveis antes de criar
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         data = request.data.copy()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         sensitive_fields = [
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             "pressao_arterial",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             "frequencia_cardiaca",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             "temperatura",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             "saturacao_oxigenio",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             "glicemia",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             "colesterol_total",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             "triglicerides",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         ]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         if (
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             not request.user.groups.filter(name="Doctor").exists()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             and not request.user.is_staff
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         ):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             for field in sensitive_fields:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:                 data.pop(field, None)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer = self.get_serializer(data=data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer.is_valid(raise_exception=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         self.perform_create(serializer)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         headers = self.get_success_headers(serializer.data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         return Response(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             serializer.data, status=status.HTTP_201_CREATED, headers=headers
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     def update(self, request, *args, **kwargs):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         # Filtra campos sensíveis antes de atualizar
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         data = request.data.copy()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         sensitive_fields = [
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             "pressao_arterial",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             "frequencia_cardiaca",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             "temperatura",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             "saturacao_oxigenio",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             "glicemia",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             "colesterol_total",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             "triglicerides",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         ]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         if (
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             not request.user.groups.filter(name="Doctor").exists()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             and not request.user.is_staff
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         ):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             for field in sensitive_fields:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:                 data.pop(field, None)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         partial = kwargs.pop("partial", False)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         instance = self.get_object()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer = self.get_serializer(instance, data=data, partial=partial)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer.is_valid(raise_exception=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         self.perform_update(serializer)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         return Response(serializer.data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: class HistoricoAcessosProntuarioViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     queryset = HistoricoAcessosProntuario.objects.all()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     serializer_class = HistoricoAcessosProntuarioSerializer
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     permission_classes = [IsAuthenticated]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     def list(self, request, *args, **kwargs):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         # Restringir campos sensíveis durante a listagem
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         if not request.user.is_staff:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             queryset = self.filter_queryset(self.get_queryset()).defer(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:                 "usuario", "tipo_acesso"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         else:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             queryset = self.filter_queryset(self.get_queryset())
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         page = self.paginate_queryset(queryset)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         if page is not None:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             serializer = self.get_serializer(page, many=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             return self.get_paginated_response(serializer.data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer = self.get_serializer(queryset, many=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         return Response(serializer.data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: class ExameComplementarViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     queryset = ExameComplementar.objects.all()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     serializer_class = ExameComplementarSerializer
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     permission_classes = [IsAuthenticated, IsDoctorOrReadOnly]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     def create(self, request, *args, **kwargs):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         # Filtra campos sensíveis antes de criar
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         data = request.data.copy()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         sensitive_fields = ["resultado", "imagem_associada"]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         if (
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             not request.user.groups.filter(name="Doctor").exists()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             and not request.user.is_staff
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         ):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             for field in sensitive_fields:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:                 data.pop(field, None)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer = self.get_serializer(data=data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer.is_valid(raise_exception=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         self.perform_create(serializer)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         headers = self.get_success_headers(serializer.data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         return Response(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             serializer.data, status=status.HTTP_201_CREATED, headers=headers
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     def update(self, request, *args, **kwargs):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         # Filtra campos sensíveis antes de atualizar
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         data = request.data.copy()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         sensitive_fields = ["resultado", "imagem_associada"]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         if (
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             not request.user.groups.filter(name="Doctor").exists()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             and not request.user.is_staff
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         ):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:             for field in sensitive_fields:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:                 data.pop(field, None)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         partial = kwargs.pop("partial", False)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         instance = self.get_object()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer = self.get_serializer(instance, data=data, partial=partial)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         serializer.is_valid(raise_exception=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         self.perform_update(serializer)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:         return Response(serializer.data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: # URL Routing (urls.py)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: router.register(r"prontuarios", views.ProntuarioViewSet)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: router.register(r"historico_medicamentos", views.HistoricoMedicamentosViewSet)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: router.register(r"evolucoes_clinicas", views.EvolucaoClinicaViewSet)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: router.register(r"dados_vitais", views.DadosVitaisViewSet)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: router.register(r"historico_acessos", views.HistoricoAcessosProntuarioViewSet)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: router.register(r"exames_complementares", views.ExameComplementarViewSet)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/views.py: ]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: # Módulo Prontuários - Criação do Modelo (models.py)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: from django.utils.translation import gettext_lazy as _
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: import uuid
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: from django.conf import settings
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: class Prontuario(models.Model):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Identificador Único Global
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     uuid = models.UUIDField(default=uuid.uuid4, unique=True, editable=False)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Dados Relacionados ao Paciente
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     paciente = models.OneToOneField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         "pacientes.Paciente", on_delete=models.CASCADE, related_name="prontuarios"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Evoluções Clínicas e Atendimentos
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     data_atendimento = models.DateTimeField(_("Data do Atendimento"))
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     profissional_responsavel = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         "profissionais.Profissional",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         on_delete=models.SET_NULL,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         related_name="atendimentos_realizados",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     queixa_principal = models.TextField(_("Queixa Principal"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     historico_doenca_atual = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Histórico da Doença Atual"), blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     antecedentes_pessoais = models.TextField(_("Antecedentes Pessoais"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     exame_fisico_cabeca_pescoco = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Exame Físico - Cabeça e Pescoço"), blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     exame_fisico_torax = models.TextField(_("Exame Físico - Tórax"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     exame_fisico_abdomen = models.TextField(_("Exame Físico - Abdômen"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     exame_fisico_membros = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Exame Físico - Membros Superiores e Inferiores"), blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     hipotese_diagnostica = models.TextField(_("Hipótese Diagnóstica"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     conduta = models.TextField(_("Conduta/Plano"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     prescricao = models.TextField(_("Prescrição Médica"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     tratamentos_previos = models.TextField(_("Tratamentos Prévio(s)"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Diagnósticos
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     diagnostico_final = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Diagnóstico Final"), max_length=255, blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     cid_10 = models.CharField(_("CID-10"), max_length=10, blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Anotações de Outros Profissionais
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     anotacoes_profissionais = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Anotações de Outros Profissionais"), blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Referências e Encaminhamentos
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     encaminhamentos = models.TextField(_("Encaminhamentos"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     referencias_especialidades = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Referências para Especialidades"), blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Consentimento e Termos
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     consentimento_informado = models.BooleanField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Consentimento Informado Assinado"), default=False
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Histórico Familiar
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     historico_familiar = models.TextField(_("Histórico Familiar"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     risco_genetico = models.TextField(_("Risco Genético Identificado"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Dados Psicológicos e Sociais
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     dados_psicossociais = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Dados Psicológicos e Sociais"), blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     estado_emocional = models.TextField(_("Estado Emocional"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     transtornos_identificados = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Transtornos Identificados"), blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     medicacoes_psiquiatricas = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Medicações Psiquiátricas"), blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Histórico de Hábitos de Vida
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     tabagismo = models.BooleanField(_("Tabagismo"), default=False)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     etilismo = models.BooleanField(_("Etilismo"), default=False)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     uso_drogas = models.BooleanField(_("Uso de Drogas"), default=False)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     atividade_fisica = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Atividade Física"), max_length=255, blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     alimentacao = models.CharField(_("Alimentação"), max_length=255, blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     qualidade_sono = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Qualidade do Sono"), max_length=255, blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     ocupacao = models.CharField(_("Ocupação"), max_length=255, blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     nivel_estresse = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Nível de Estresse"), max_length=255, blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     medicacoes_nao_prescritas = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Medicações Não Prescritas"), blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Histórico de Cirurgias e Internações
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     historico_cirurgias = models.TextField(_("Histórico de Cirurgias"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     historico_internacoes = models.TextField(_("Histórico de Internações"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Histórico de Imunizações
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     imunizacoes = models.TextField(_("Histórico de Imunizações"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Estratificação de Risco
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     estratificacao_risco = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Estratificação de Risco"), max_length=255, blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     risco_quedas = models.CharField(_("Risco de Quedas"), max_length=255, blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Motivo do Atendimento
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     motivo_atendimento = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Motivo do Atendimento"), max_length=255, blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Acompanhamento de Doenças Crônicas
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     diabetes_hemoglobina_glicada = models.DecimalField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Hemoglobina Glicada (%)"),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         max_digits=4,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         decimal_places=2,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     funcao_renal_taxa_filtracao = models.DecimalField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Taxa de Filtração Glomerular (mL/min)"),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         max_digits=5,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         decimal_places=2,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Avaliação Nutricional
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     imc = models.DecimalField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Índice de Massa Corporal (IMC)"),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         max_digits=4,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         decimal_places=1,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     percentual_gordura_corporal = models.DecimalField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Percentual de Gordura Corporal (%)"),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         max_digits=4,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         decimal_places=1,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     dieta_recomendada = models.TextField(_("Dieta Recomendada"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Planos de Saúde e Seguros
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     plano_saude = models.CharField(_("Plano de Saúde"), max_length=255, blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     numero_plano_saude = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Número do Plano de Saúde"), max_length=255, blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     # Auditoria
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     created_at = models.DateTimeField(_("Data de Criação"), auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     updated_at = models.DateTimeField(_("Última Atualização"), auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     created_by = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         settings.AUTH_USER_MODEL,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         on_delete=models.SET_NULL,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         related_name="prontuarios_criados",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     updated_by = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         settings.AUTH_USER_MODEL,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         on_delete=models.SET_NULL,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         related_name="prontuarios_atualizados",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         verbose_name = _("Prontuário")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         verbose_name_plural = _("Prontuários")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         return f"Prontuário do paciente: {self.paciente.nome_completo}"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: class HistoricoMedicamentos(models.Model):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     prontuario = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         Prontuario, on_delete=models.CASCADE, related_name="historico_medicamentos"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     medicamento = models.CharField(_("Medicamento"), max_length=255)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     dosagem = models.CharField(_("Dosagem"), max_length=255)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     frequencia = models.CharField(_("Frequência"), max_length=255)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     duracao = models.CharField(_("Duração"), max_length=255)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     observacoes = models.TextField(_("Observações"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     prescrito_por = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         "profissionais.Profissional", on_delete=models.SET_NULL, null=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     data_prescricao = models.DateTimeField(_("Data da Prescrição"), auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         verbose_name = _("Histórico de Medicamento")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         verbose_name_plural = _("Histórico de Medicamentos")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         return f"Medicamento: {self.medicamento} - Paciente: {self.prontuario.paciente.nome_completo}"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: class EvolucaoClinica(models.Model):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     prontuario = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         Prontuario, on_delete=models.CASCADE, related_name="evolucoes_clinicas"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     data_evolucao = models.DateTimeField(_("Data da Evolução"), auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     profissional_responsavel = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         "profissionais.Profissional", on_delete=models.SET_NULL, null=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     descricao = models.TextField(_("Descrição da Evolução"))
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         verbose_name = _("Evolução Clínica")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         verbose_name_plural = _("Evoluções Clínicas")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         return f"Evolução em {self.data_evolucao} - Paciente: {self.prontuario.paciente.nome_completo}"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: class DadosVitais(models.Model):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     prontuario = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         Prontuario, on_delete=models.CASCADE, related_name="dados_vitais"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     data_registro = models.DateTimeField(_("Data do Registro"), auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     pressao_arterial = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Pressão Arterial"), max_length=50, blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     frequencia_cardiaca = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Frequência Cardíaca"), max_length=50, blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     temperatura = models.DecimalField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Temperatura Corporal (°C)"),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         max_digits=4,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         decimal_places=1,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     saturacao_oxigenio = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Saturação de Oxigênio (%)"), max_length=50, blank=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     peso = models.DecimalField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Peso (kg)"), max_digits=5, decimal_places=2, blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     altura = models.DecimalField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Altura (m)"), max_digits=4, decimal_places=2, blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     glicemia = models.DecimalField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Glicemia (mg/dL)"), max_digits=5, decimal_places=2, blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     colesterol_total = models.DecimalField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Colesterol Total (mg/dL)"),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         max_digits=5,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         decimal_places=2,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     triglicerides = models.DecimalField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Triglicérides (mg/dL)"),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         max_digits=5,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         decimal_places=2,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         verbose_name = _("Dados Vitais")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         verbose_name_plural = _("Dados Vitais")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         return f"Dados Vitais em {self.data_registro} - Paciente: {self.prontuario.paciente.nome_completo}"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: class HistoricoAcessosProntuario(models.Model):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     prontuario = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         Prontuario, on_delete=models.CASCADE, related_name="historico_acessos"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     usuario = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     data_acesso = models.DateTimeField(_("Data do Acesso"), auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     tipo_acesso = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Tipo de Acesso"),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         max_length=50,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         choices=[("visualizacao", "Visualização"), ("alteracao", "Alteração")],
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         verbose_name = _("Histórico de Acesso ao Prontuário")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         verbose_name_plural = _("Histórico de Acessos ao Prontuário")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         return f"Acesso em {self.data_acesso} - Paciente: {self.prontuario.paciente.nome_completo} por {self.usuario}"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: class ExameComplementar(models.Model):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     prontuario = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         Prontuario, on_delete=models.CASCADE, related_name="exames_complementares"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     tipo_exame = models.CharField(_("Tipo de Exame"), max_length=255)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     data_solicitacao = models.DateTimeField(_("Data da Solicitação"), auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     data_resultado = models.DateTimeField(_("Data do Resultado"), null=True, blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     resultado = models.TextField(_("Resultado do Exame"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     profissional_responsavel = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         "profissionais.Profissional",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         on_delete=models.SET_NULL,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         related_name="exames_solicitados",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     imagem_associada = models.ImageField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Imagem Associada"), upload_to="exames/imagens/", blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         verbose_name = _("Exame Complementar")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         verbose_name_plural = _("Exames Complementares")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         return f"Exame: {self.tipo_exame} - Paciente: {self.prontuario.paciente.nome_completo}"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: class ProcedimentoRealizado(models.Model):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     prontuario = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         Prontuario, on_delete=models.CASCADE, related_name="procedimentos_realizados"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     tipo_procedimento = models.CharField(_("Tipo de Procedimento"), max_length=255)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     data_procedimento = models.DateTimeField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         _("Data do Procedimento"), auto_now_add=True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     profissional_responsavel = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         "profissionais.Profissional",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         on_delete=models.SET_NULL,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         related_name="procedimentos_realizados",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     observacoes = models.TextField(_("Observações"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     consentimento_associado = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         "assinaturas.Assinatura",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         on_delete=models.SET_NULL,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         related_name="procedimentos_consentidos",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         verbose_name = _("Procedimento Realizado")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/models.py:         verbose_name_plural = _("Procedimentos Realizados")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 17:51
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py: import django.db.models.deletion
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:     dependencies = [
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:         ("pacientes", "0001_initial"),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:             name="Prontuario",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                 ("data_registro", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                 ("descricao", models.TextField()),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                 ("medico_responsavel", models.CharField(max_length=100)),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                     "paciente",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                     models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                         on_delete=django.db.models.deletion.CASCADE,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                         related_name="prontuarios",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                         to="pacientes.paciente",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/urls.py
/mnt/dados/ClinicaAI/backend/apps/prontuarios/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/prontuarios/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/prontuarios/urls.py: from .views import ProntuarioViewSet
/mnt/dados/ClinicaAI/backend/apps/prontuarios/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/prontuarios/urls.py: router.register(r"prontuarios", ProntuarioViewSet)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/prontuarios/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/prontuarios/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/prontuarios/admin.py
/mnt/dados/ClinicaAI/backend/apps/prontuarios/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/prontuarios/admin.py: from .models import Prontuario
/mnt/dados/ClinicaAI/backend/apps/prontuarios/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/admin.py: admin.site.register(Prontuario)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: # Módulo Prontuários - Serializers (serializers.py)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: from .models import (
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:     Prontuario,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:     HistoricoMedicamentos,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:     EvolucaoClinica,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:     DadosVitais,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:     HistoricoAcessosProntuario,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:     ExameComplementar,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: class ProntuarioSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:         model = Prontuario
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: class HistoricoMedicamentosSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:         model = HistoricoMedicamentos
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: class EvolucaoClinicaSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:         model = EvolucaoClinica
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: class DadosVitaisSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:         model = DadosVitais
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: class HistoricoAcessosProntuarioSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:         model = HistoricoAcessosProntuario
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py: class ExameComplementarSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:         model = ExameComplementar
/mnt/dados/ClinicaAI/backend/apps/prontuarios/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: from rest_framework.test import APITestCase
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: from rest_framework import status
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: from django.urls import reverse
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: from django.contrib.auth.models import User, Group
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: from .models import (
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     Prontuario,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     HistoricoMedicamentos,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     EvolucaoClinica,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     DadosVitais,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     HistoricoAcessosProntuario,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     ExameComplementar,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: class ProntuarioAPITestCase(APITestCase):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     def setUp(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         # Criação de usuários e grupos para testar permissões
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.admin_user = User.objects.create_superuser(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             "admin", "admin@example.com", "password123"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.doctor_user = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             "doctor", "doctor@example.com", "password123"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         doctor_group, created = Group.objects.get_or_create(name="Doctor")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.doctor_user.groups.add(doctor_group)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.patient_user = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             "patient", "patient@example.com", "password123"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         # Criação de dados iniciais
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.prontuario = Prontuario.objects.create(paciente_id=1)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     def test_create_prontuario_as_admin(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.client.force_authenticate(user=self.admin_user)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         data = {"paciente": 1, "queixa_principal": "Dor de cabeça persistente"}
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         response = self.client.post(reverse("prontuarios-list"), data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.assertEqual(response.status_code, status.HTTP_201_CREATED)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     def test_create_prontuario_as_patient(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.client.force_authenticate(user=self.patient_user)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         data = {"paciente": 1, "queixa_principal": "Dor de cabeça persistente"}
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         response = self.client.post(reverse("prontuarios-list"), data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     def test_list_prontuarios_as_doctor(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.client.force_authenticate(user=self.doctor_user)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         response = self.client.get(reverse("prontuarios-list"))
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: class HistoricoMedicamentosAPITestCase(APITestCase):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     def setUp(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.admin_user = User.objects.create_superuser(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             "admin", "admin@example.com", "password123"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.doctor_user = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             "doctor", "doctor@example.com", "password123"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         doctor_group, created = Group.objects.get_or_create(name="Doctor")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.doctor_user.groups.add(doctor_group)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.patient_user = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             "patient", "patient@example.com", "password123"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         # Criação de dados iniciais
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.medicamento = HistoricoMedicamentos.objects.create(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             prontuario_id=1, medicamento="Paracetamol", dosagem="500mg"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     def test_create_medicamento_as_doctor(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.client.force_authenticate(user=self.doctor_user)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         data = {"prontuario": 1, "medicamento": "Ibuprofeno", "dosagem": "400mg"}
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         response = self.client.post(reverse("historico_medicamentos-list"), data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.assertEqual(response.status_code, status.HTTP_201_CREATED)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     def test_update_medicamento_as_patient(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.client.force_authenticate(user=self.patient_user)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         data = {"medicamento": "Aspirina"}
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         response = self.client.patch(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             reverse("historico_medicamentos-detail", args=[self.medicamento.id]), data
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: class EvolucaoClinicaAPITestCase(APITestCase):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     def setUp(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.admin_user = User.objects.create_superuser(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             "admin", "admin@example.com", "password123"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.doctor_user = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             "doctor", "doctor@example.com", "password123"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         doctor_group, created = Group.objects.get_or_create(name="Doctor")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.doctor_user.groups.add(doctor_group)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         # Criação de dados iniciais
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.evolucao = EvolucaoClinica.objects.create(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             prontuario_id=1, descricao="Paciente com sintomas de gripe"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     def test_update_evolucao_as_doctor(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.client.force_authenticate(user=self.doctor_user)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         data = {"descricao": "Paciente com febre alta e tosse"}
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         response = self.client.patch(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             reverse("evolucoes_clinicas-detail", args=[self.evolucao.id]), data
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     def test_update_evolucao_as_patient(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.client.force_authenticate(user=self.patient_user)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         data = {"descricao": "Tentativa de atualização não permitida"}
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         response = self.client.patch(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             reverse("evolucoes_clinicas-detail", args=[self.evolucao.id]), data
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: class DadosVitaisAPITestCase(APITestCase):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     def setUp(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.doctor_user = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             "doctor", "doctor@example.com", "password123"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         doctor_group, created = Group.objects.get_or_create(name="Doctor")
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.doctor_user.groups.add(doctor_group)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         # Criação de dados iniciais
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.dados_vitais = DadosVitais.objects.create(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             prontuario_id=1, pressao_arterial="120/80"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     def test_create_dados_vitais_as_doctor(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.client.force_authenticate(user=self.doctor_user)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         data = {
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             "prontuario": 1,
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             "pressao_arterial": "130/85",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             "frequencia_cardiaca": "75",
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         }
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         response = self.client.post(reverse("dados_vitais-list"), data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.assertEqual(response.status_code, status.HTTP_201_CREATED)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:     def test_create_dados_vitais_as_unauthorized_user(self):
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         unauthorized_user = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:             "unauthorized", "unauthorized@example.com", "password123"
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.client.force_authenticate(user=unauthorized_user)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         data = {"prontuario": 1, "pressao_arterial": "130/85"}
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         response = self.client.post(reverse("dados_vitais-list"), data)
/mnt/dados/ClinicaAI/backend/apps/prontuarios/tests.py:         self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/views.py
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/views.py: from django.shortcuts import render
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/views.py: 
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/views.py: # Create your views here.
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/apps.py
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/apps.py: class Central_ajudaConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/apps.py:     name = "apps.central_ajuda"
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/models.py
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/models.py: 
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/models.py: # Create your models here.
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/admin.py
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/admin.py: # Register your models here.
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/tests.py
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/central_ajuda/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/views.py
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/views.py: from .models import Marketing_smsModel
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/views.py: from .serializers import Marketing_smsSerializer
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/views.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/views.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/views.py: class Marketing_smsViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/views.py:     queryset = Marketing_smsModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/views.py:     serializer_class = Marketing_smsSerializer
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/apps.py
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/apps.py: class Marketing_smsConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/apps.py:     name = "apps.marketing_sms"
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/models.py
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/models.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/models.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/models.py: class Marketing_smsModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/models.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:             name="Marketing_smsModel",
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/urls.py
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/urls.py: from .views import Marketing_smsViewSet
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/urls.py: router.register(r"marketing_sms", Marketing_smsViewSet)
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/admin.py
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/admin.py: from .models import Marketing_smsModel
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/admin.py: @admin.register(Marketing_smsModel)
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/admin.py: class Marketing_smsAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/serializers.py
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/serializers.py: from .models import Marketing_smsModel
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/serializers.py: class Marketing_smsSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/serializers.py:         model = Marketing_smsModel
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/tests.py
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_sms/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/compromissos/views.py
/mnt/dados/ClinicaAI/backend/apps/compromissos/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/compromissos/views.py: from .models import CompromissosModel
/mnt/dados/ClinicaAI/backend/apps/compromissos/views.py: from .serializers import CompromissosSerializer
/mnt/dados/ClinicaAI/backend/apps/compromissos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/views.py: class CompromissosViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/compromissos/views.py:     queryset = CompromissosModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/compromissos/views.py:     serializer_class = CompromissosSerializer
/mnt/dados/ClinicaAI/backend/apps/compromissos/apps.py
/mnt/dados/ClinicaAI/backend/apps/compromissos/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/compromissos/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/apps.py: class CompromissosConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/compromissos/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/compromissos/apps.py:     name = "apps.compromissos"
/mnt/dados/ClinicaAI/backend/apps/compromissos/models.py
/mnt/dados/ClinicaAI/backend/apps/compromissos/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/compromissos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/models.py: class CompromissosModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/compromissos/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/compromissos/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/compromissos/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/compromissos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/compromissos/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:             name="CompromissosModel",
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/compromissos/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/compromissos/urls.py
/mnt/dados/ClinicaAI/backend/apps/compromissos/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/compromissos/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/compromissos/urls.py: from .views import CompromissosViewSet
/mnt/dados/ClinicaAI/backend/apps/compromissos/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/compromissos/urls.py: router.register(r"compromissos", CompromissosViewSet)
/mnt/dados/ClinicaAI/backend/apps/compromissos/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/compromissos/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/compromissos/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/compromissos/admin.py
/mnt/dados/ClinicaAI/backend/apps/compromissos/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/compromissos/admin.py: from .models import CompromissosModel
/mnt/dados/ClinicaAI/backend/apps/compromissos/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/admin.py: @admin.register(CompromissosModel)
/mnt/dados/ClinicaAI/backend/apps/compromissos/admin.py: class CompromissosAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/compromissos/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/compromissos/serializers.py
/mnt/dados/ClinicaAI/backend/apps/compromissos/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/compromissos/serializers.py: from .models import CompromissosModel
/mnt/dados/ClinicaAI/backend/apps/compromissos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/serializers.py: class CompromissosSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/compromissos/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/compromissos/serializers.py:         model = CompromissosModel
/mnt/dados/ClinicaAI/backend/apps/compromissos/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/compromissos/tests.py
/mnt/dados/ClinicaAI/backend/apps/compromissos/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/compromissos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/compromissos/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/views.py
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/views.py: from django.shortcuts import render
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/views.py: 
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/views.py: # Create your views here.
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/apps.py
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/apps.py: class AprovacoesConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/apps.py:     name = "apps.aprovacoes"
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/models.py
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/models.py: # Create your models here.
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/admin.py
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/admin.py: # Register your models here.
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/tests.py
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/aprovacoes/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/forum/views.py
/mnt/dados/ClinicaAI/backend/apps/forum/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/forum/views.py: from .models import ForumModel
/mnt/dados/ClinicaAI/backend/apps/forum/views.py: from .serializers import ForumSerializer
/mnt/dados/ClinicaAI/backend/apps/forum/views.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/views.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/views.py: class ForumViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/forum/views.py:     queryset = ForumModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/forum/views.py:     serializer_class = ForumSerializer
/mnt/dados/ClinicaAI/backend/apps/forum/apps.py
/mnt/dados/ClinicaAI/backend/apps/forum/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/forum/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/apps.py: class ForumConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/forum/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/forum/apps.py:     name = "apps.forum"
/mnt/dados/ClinicaAI/backend/apps/forum/models.py
/mnt/dados/ClinicaAI/backend/apps/forum/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/forum/models.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/models.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/models.py: class ForumModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/forum/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/forum/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/forum/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/forum/models.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/forum/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:             name="ForumModel",
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/forum/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/forum/urls.py
/mnt/dados/ClinicaAI/backend/apps/forum/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/forum/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/forum/urls.py: from .views import ForumViewSet
/mnt/dados/ClinicaAI/backend/apps/forum/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/forum/urls.py: router.register(r"forum", ForumViewSet)
/mnt/dados/ClinicaAI/backend/apps/forum/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/forum/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/forum/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/forum/admin.py
/mnt/dados/ClinicaAI/backend/apps/forum/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/forum/admin.py: from .models import ForumModel
/mnt/dados/ClinicaAI/backend/apps/forum/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/admin.py: @admin.register(ForumModel)
/mnt/dados/ClinicaAI/backend/apps/forum/admin.py: class ForumAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/forum/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/forum/serializers.py
/mnt/dados/ClinicaAI/backend/apps/forum/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/forum/serializers.py: from .models import ForumModel
/mnt/dados/ClinicaAI/backend/apps/forum/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/serializers.py: class ForumSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/forum/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/forum/serializers.py:         model = ForumModel
/mnt/dados/ClinicaAI/backend/apps/forum/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/forum/tests.py
/mnt/dados/ClinicaAI/backend/apps/forum/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/forum/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/forum/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/iot/views.py
/mnt/dados/ClinicaAI/backend/apps/iot/views.py: from django.shortcuts import render
/mnt/dados/ClinicaAI/backend/apps/iot/views.py: 
/mnt/dados/ClinicaAI/backend/apps/iot/views.py: # Create your views here.
/mnt/dados/ClinicaAI/backend/apps/iot/apps.py
/mnt/dados/ClinicaAI/backend/apps/iot/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/iot/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/iot/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/iot/apps.py: class IotConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/iot/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/iot/apps.py:     name = "apps.iot"
/mnt/dados/ClinicaAI/backend/apps/iot/models.py
/mnt/dados/ClinicaAI/backend/apps/iot/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/iot/models.py: 
/mnt/dados/ClinicaAI/backend/apps/iot/models.py: 
/mnt/dados/ClinicaAI/backend/apps/iot/models.py: class DispositivoIoT(models.Model):
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:     nome = models.CharField(max_length=255, verbose_name="Nome do Dispositivo")
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:     descricao = models.TextField(blank=True, verbose_name="Descrição")
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:     status = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:         max_length=100,
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:         choices=[("ativo", "Ativo"), ("inativo", "Inativo")],
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:         default="ativo",
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:     data_registro = models.DateTimeField(
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:         auto_now_add=True, verbose_name="Data de Registro"
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:     ultima_comunicacao = models.DateTimeField(
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:         blank=True, null=True, verbose_name="Última Comunicação"
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/iot/models.py: 
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:         verbose_name = "Dispositivo IoT"
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:         verbose_name_plural = "Dispositivos IoT"
/mnt/dados/ClinicaAI/backend/apps/iot/models.py: 
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/iot/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/iot/admin.py
/mnt/dados/ClinicaAI/backend/apps/iot/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/iot/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/iot/admin.py: # Register your models here.
/mnt/dados/ClinicaAI/backend/apps/iot/tests.py
/mnt/dados/ClinicaAI/backend/apps/iot/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/iot/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/iot/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/servico_campo/views.py
/mnt/dados/ClinicaAI/backend/apps/servico_campo/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/servico_campo/views.py: from .models import Servico_campoModel
/mnt/dados/ClinicaAI/backend/apps/servico_campo/views.py: from .serializers import Servico_campoSerializer
/mnt/dados/ClinicaAI/backend/apps/servico_campo/views.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/views.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/views.py: class Servico_campoViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/servico_campo/views.py:     queryset = Servico_campoModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/servico_campo/views.py:     serializer_class = Servico_campoSerializer
/mnt/dados/ClinicaAI/backend/apps/servico_campo/apps.py
/mnt/dados/ClinicaAI/backend/apps/servico_campo/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/servico_campo/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/apps.py: class Servico_campoConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/servico_campo/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/servico_campo/apps.py:     name = "apps.servico_campo"
/mnt/dados/ClinicaAI/backend/apps/servico_campo/models.py
/mnt/dados/ClinicaAI/backend/apps/servico_campo/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/servico_campo/models.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/models.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/models.py: class Servico_campoModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/servico_campo/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/servico_campo/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/servico_campo/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/servico_campo/models.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/servico_campo/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:             name="Servico_campoModel",
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/servico_campo/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/servico_campo/urls.py
/mnt/dados/ClinicaAI/backend/apps/servico_campo/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/servico_campo/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/servico_campo/urls.py: from .views import Servico_campoViewSet
/mnt/dados/ClinicaAI/backend/apps/servico_campo/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/servico_campo/urls.py: router.register(r"servico_campo", Servico_campoViewSet)
/mnt/dados/ClinicaAI/backend/apps/servico_campo/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/servico_campo/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/servico_campo/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/servico_campo/admin.py
/mnt/dados/ClinicaAI/backend/apps/servico_campo/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/servico_campo/admin.py: from .models import Servico_campoModel
/mnt/dados/ClinicaAI/backend/apps/servico_campo/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/admin.py: @admin.register(Servico_campoModel)
/mnt/dados/ClinicaAI/backend/apps/servico_campo/admin.py: class Servico_campoAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/servico_campo/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/servico_campo/serializers.py
/mnt/dados/ClinicaAI/backend/apps/servico_campo/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/servico_campo/serializers.py: from .models import Servico_campoModel
/mnt/dados/ClinicaAI/backend/apps/servico_campo/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/serializers.py: class Servico_campoSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/servico_campo/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/servico_campo/serializers.py:         model = Servico_campoModel
/mnt/dados/ClinicaAI/backend/apps/servico_campo/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/servico_campo/tests.py
/mnt/dados/ClinicaAI/backend/apps/servico_campo/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/servico_campo/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/servico_campo/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/elearning/views.py
/mnt/dados/ClinicaAI/backend/apps/elearning/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/elearning/views.py: from .models import ElearningModel
/mnt/dados/ClinicaAI/backend/apps/elearning/views.py: from .serializers import ElearningSerializer
/mnt/dados/ClinicaAI/backend/apps/elearning/views.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/views.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/views.py: class ElearningViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/elearning/views.py:     queryset = ElearningModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/elearning/views.py:     serializer_class = ElearningSerializer
/mnt/dados/ClinicaAI/backend/apps/elearning/apps.py
/mnt/dados/ClinicaAI/backend/apps/elearning/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/elearning/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/apps.py: class ElearningConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/elearning/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/elearning/apps.py:     name = "apps.elearning"
/mnt/dados/ClinicaAI/backend/apps/elearning/models.py
/mnt/dados/ClinicaAI/backend/apps/elearning/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/elearning/models.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/models.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/models.py: class ElearningModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/elearning/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/elearning/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/elearning/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/elearning/models.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/elearning/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:             name="ElearningModel",
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/elearning/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/elearning/urls.py
/mnt/dados/ClinicaAI/backend/apps/elearning/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/elearning/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/elearning/urls.py: from .views import ElearningViewSet
/mnt/dados/ClinicaAI/backend/apps/elearning/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/elearning/urls.py: router.register(r"elearning", ElearningViewSet)
/mnt/dados/ClinicaAI/backend/apps/elearning/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/elearning/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/elearning/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/elearning/admin.py
/mnt/dados/ClinicaAI/backend/apps/elearning/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/elearning/admin.py: from .models import ElearningModel
/mnt/dados/ClinicaAI/backend/apps/elearning/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/admin.py: @admin.register(ElearningModel)
/mnt/dados/ClinicaAI/backend/apps/elearning/admin.py: class ElearningAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/elearning/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/elearning/serializers.py
/mnt/dados/ClinicaAI/backend/apps/elearning/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/elearning/serializers.py: from .models import ElearningModel
/mnt/dados/ClinicaAI/backend/apps/elearning/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/serializers.py: class ElearningSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/elearning/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/elearning/serializers.py:         model = ElearningModel
/mnt/dados/ClinicaAI/backend/apps/elearning/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/elearning/tests.py
/mnt/dados/ClinicaAI/backend/apps/elearning/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/elearning/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/elearning/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/whatsapp/views.py
/mnt/dados/ClinicaAI/backend/apps/whatsapp/views.py: from django.shortcuts import render
/mnt/dados/ClinicaAI/backend/apps/whatsapp/views.py: 
/mnt/dados/ClinicaAI/backend/apps/whatsapp/views.py: # Create your views here.
/mnt/dados/ClinicaAI/backend/apps/whatsapp/apps.py
/mnt/dados/ClinicaAI/backend/apps/whatsapp/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/whatsapp/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/whatsapp/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/whatsapp/apps.py: class WhatsappConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/whatsapp/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/whatsapp/apps.py:     name = "apps.whatsapp"
/mnt/dados/ClinicaAI/backend/apps/whatsapp/models.py
/mnt/dados/ClinicaAI/backend/apps/whatsapp/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/whatsapp/models.py: 
/mnt/dados/ClinicaAI/backend/apps/whatsapp/models.py: # Create your models here.
/mnt/dados/ClinicaAI/backend/apps/whatsapp/admin.py
/mnt/dados/ClinicaAI/backend/apps/whatsapp/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/whatsapp/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/whatsapp/admin.py: # Register your models here.
/mnt/dados/ClinicaAI/backend/apps/whatsapp/tests.py
/mnt/dados/ClinicaAI/backend/apps/whatsapp/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/whatsapp/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/whatsapp/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/criador_sites/views.py
/mnt/dados/ClinicaAI/backend/apps/criador_sites/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/criador_sites/views.py: from .models import Criador_sitesModel
/mnt/dados/ClinicaAI/backend/apps/criador_sites/views.py: from .serializers import Criador_sitesSerializer
/mnt/dados/ClinicaAI/backend/apps/criador_sites/views.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/views.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/views.py: class Criador_sitesViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/criador_sites/views.py:     queryset = Criador_sitesModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/criador_sites/views.py:     serializer_class = Criador_sitesSerializer
/mnt/dados/ClinicaAI/backend/apps/criador_sites/apps.py
/mnt/dados/ClinicaAI/backend/apps/criador_sites/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/criador_sites/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/apps.py: class Criador_sitesConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/criador_sites/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/criador_sites/apps.py:     name = "apps.criador_sites"
/mnt/dados/ClinicaAI/backend/apps/criador_sites/models.py
/mnt/dados/ClinicaAI/backend/apps/criador_sites/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/criador_sites/models.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/models.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/models.py: class Criador_sitesModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/criador_sites/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/criador_sites/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/criador_sites/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/criador_sites/models.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/criador_sites/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:             name="Criador_sitesModel",
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/criador_sites/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/criador_sites/urls.py
/mnt/dados/ClinicaAI/backend/apps/criador_sites/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/criador_sites/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/criador_sites/urls.py: from .views import Criador_sitesViewSet
/mnt/dados/ClinicaAI/backend/apps/criador_sites/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/criador_sites/urls.py: router.register(r"criador_sites", Criador_sitesViewSet)
/mnt/dados/ClinicaAI/backend/apps/criador_sites/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/criador_sites/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/criador_sites/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/criador_sites/admin.py
/mnt/dados/ClinicaAI/backend/apps/criador_sites/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/criador_sites/admin.py: from .models import Criador_sitesModel
/mnt/dados/ClinicaAI/backend/apps/criador_sites/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/admin.py: @admin.register(Criador_sitesModel)
/mnt/dados/ClinicaAI/backend/apps/criador_sites/admin.py: class Criador_sitesAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/criador_sites/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/criador_sites/serializers.py
/mnt/dados/ClinicaAI/backend/apps/criador_sites/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/criador_sites/serializers.py: from .models import Criador_sitesModel
/mnt/dados/ClinicaAI/backend/apps/criador_sites/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/serializers.py: class Criador_sitesSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/criador_sites/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/criador_sites/serializers.py:         model = Criador_sitesModel
/mnt/dados/ClinicaAI/backend/apps/criador_sites/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/criador_sites/tests.py
/mnt/dados/ClinicaAI/backend/apps/criador_sites/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/criador_sites/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/criador_sites/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/inventario/views.py
/mnt/dados/ClinicaAI/backend/apps/inventario/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/inventario/views.py: from .models import InventarioModel
/mnt/dados/ClinicaAI/backend/apps/inventario/views.py: from .serializers import InventarioSerializer
/mnt/dados/ClinicaAI/backend/apps/inventario/views.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/views.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/views.py: class InventarioViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/inventario/views.py:     queryset = InventarioModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/inventario/views.py:     serializer_class = InventarioSerializer
/mnt/dados/ClinicaAI/backend/apps/inventario/apps.py
/mnt/dados/ClinicaAI/backend/apps/inventario/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/inventario/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/apps.py: class InventarioConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/inventario/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/inventario/apps.py:     name = "apps.inventario"
/mnt/dados/ClinicaAI/backend/apps/inventario/models.py
/mnt/dados/ClinicaAI/backend/apps/inventario/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/inventario/models.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/models.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/models.py: class InventarioModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/inventario/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/inventario/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/inventario/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/inventario/models.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/inventario/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:             name="InventarioModel",
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/inventario/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/inventario/urls.py
/mnt/dados/ClinicaAI/backend/apps/inventario/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/inventario/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/inventario/urls.py: from .views import InventarioViewSet
/mnt/dados/ClinicaAI/backend/apps/inventario/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/inventario/urls.py: router.register(r"inventario", InventarioViewSet)
/mnt/dados/ClinicaAI/backend/apps/inventario/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/inventario/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/inventario/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/inventario/admin.py
/mnt/dados/ClinicaAI/backend/apps/inventario/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/inventario/admin.py: from .models import InventarioModel
/mnt/dados/ClinicaAI/backend/apps/inventario/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/admin.py: @admin.register(InventarioModel)
/mnt/dados/ClinicaAI/backend/apps/inventario/admin.py: class InventarioAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/inventario/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/inventario/serializers.py
/mnt/dados/ClinicaAI/backend/apps/inventario/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/inventario/serializers.py: from .models import InventarioModel
/mnt/dados/ClinicaAI/backend/apps/inventario/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/serializers.py: class InventarioSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/inventario/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/inventario/serializers.py:         model = InventarioModel
/mnt/dados/ClinicaAI/backend/apps/inventario/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/inventario/tests.py
/mnt/dados/ClinicaAI/backend/apps/inventario/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/inventario/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/inventario/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/pesquisas/views.py
/mnt/dados/ClinicaAI/backend/apps/pesquisas/views.py: from django.shortcuts import render
/mnt/dados/ClinicaAI/backend/apps/pesquisas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/pesquisas/views.py: # Create your views here.
/mnt/dados/ClinicaAI/backend/apps/pesquisas/apps.py
/mnt/dados/ClinicaAI/backend/apps/pesquisas/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/pesquisas/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/pesquisas/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/pesquisas/apps.py: class PesquisasConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/pesquisas/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/pesquisas/apps.py:     name = "apps.pesquisas"
/mnt/dados/ClinicaAI/backend/apps/pesquisas/models.py
/mnt/dados/ClinicaAI/backend/apps/pesquisas/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/pesquisas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/pesquisas/models.py: # Create your models here.
/mnt/dados/ClinicaAI/backend/apps/pesquisas/admin.py
/mnt/dados/ClinicaAI/backend/apps/pesquisas/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/pesquisas/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/pesquisas/admin.py: # Register your models here.
/mnt/dados/ClinicaAI/backend/apps/pesquisas/tests.py
/mnt/dados/ClinicaAI/backend/apps/pesquisas/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/pesquisas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/pesquisas/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/views.py
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/views.py: from .models import Planilhas_horasModel
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/views.py: from .serializers import Planilhas_horasSerializer
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/views.py: class Planilhas_horasViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/views.py:     queryset = Planilhas_horasModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/views.py:     serializer_class = Planilhas_horasSerializer
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/apps.py
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/apps.py: class Planilhas_horasConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/apps.py:     name = "apps.planilhas_horas"
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/models.py
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/models.py: class Planilhas_horasModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:             name="Planilhas_horasModel",
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/urls.py
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/urls.py: from .views import Planilhas_horasViewSet
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/urls.py: router.register(r"planilhas_horas", Planilhas_horasViewSet)
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/admin.py
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/admin.py: from .models import Planilhas_horasModel
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/admin.py: @admin.register(Planilhas_horasModel)
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/admin.py: class Planilhas_horasAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/serializers.py
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/serializers.py: from .models import Planilhas_horasModel
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/serializers.py: class Planilhas_horasSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/serializers.py:         model = Planilhas_horasModel
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/tests.py
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas_horas/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/crm/views.py
/mnt/dados/ClinicaAI/backend/apps/crm/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/crm/views.py: from .models import CrmModel
/mnt/dados/ClinicaAI/backend/apps/crm/views.py: from .serializers import CrmSerializer
/mnt/dados/ClinicaAI/backend/apps/crm/views.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/views.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/views.py: class CrmViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/crm/views.py:     queryset = CrmModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/crm/views.py:     serializer_class = CrmSerializer
/mnt/dados/ClinicaAI/backend/apps/crm/apps.py
/mnt/dados/ClinicaAI/backend/apps/crm/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/crm/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/apps.py: class CrmConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/crm/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/crm/apps.py:     name = "apps.crm"
/mnt/dados/ClinicaAI/backend/apps/crm/models.py
/mnt/dados/ClinicaAI/backend/apps/crm/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/crm/models.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/models.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/models.py: class CrmModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/crm/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/crm/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/crm/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/crm/models.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/crm/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:             name="CrmModel",
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/crm/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/crm/urls.py
/mnt/dados/ClinicaAI/backend/apps/crm/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/crm/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/crm/urls.py: from .views import CrmViewSet
/mnt/dados/ClinicaAI/backend/apps/crm/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/crm/urls.py: router.register(r"crm", CrmViewSet)
/mnt/dados/ClinicaAI/backend/apps/crm/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/crm/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/crm/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/crm/admin.py
/mnt/dados/ClinicaAI/backend/apps/crm/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/crm/admin.py: from .models import CrmModel
/mnt/dados/ClinicaAI/backend/apps/crm/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/admin.py: @admin.register(CrmModel)
/mnt/dados/ClinicaAI/backend/apps/crm/admin.py: class CrmAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/crm/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/crm/serializers.py
/mnt/dados/ClinicaAI/backend/apps/crm/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/crm/serializers.py: from .models import CrmModel
/mnt/dados/ClinicaAI/backend/apps/crm/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/serializers.py: class CrmSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/crm/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/crm/serializers.py:         model = CrmModel
/mnt/dados/ClinicaAI/backend/apps/crm/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/crm/tests.py
/mnt/dados/ClinicaAI/backend/apps/crm/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/crm/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/crm/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/financeiro/views.py
/mnt/dados/ClinicaAI/backend/apps/financeiro/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/financeiro/views.py: from .models import Transacao
/mnt/dados/ClinicaAI/backend/apps/financeiro/views.py: from .serializers import TransacaoSerializer
/mnt/dados/ClinicaAI/backend/apps/financeiro/views.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/views.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/views.py: class TransacaoViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/financeiro/views.py:     queryset = Transacao.objects.all()
/mnt/dados/ClinicaAI/backend/apps/financeiro/views.py:     serializer_class = TransacaoSerializer
/mnt/dados/ClinicaAI/backend/apps/financeiro/apps.py
/mnt/dados/ClinicaAI/backend/apps/financeiro/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/financeiro/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/apps.py: class FinanceiroConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/financeiro/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/financeiro/apps.py:     name = "apps.financeiro"
/mnt/dados/ClinicaAI/backend/apps/financeiro/models.py
/mnt/dados/ClinicaAI/backend/apps/financeiro/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/financeiro/models.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/models.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/models.py: class Transacao(models.Model):
/mnt/dados/ClinicaAI/backend/apps/financeiro/models.py:     descricao = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/financeiro/models.py:     valor = models.DecimalField(max_digits=10, decimal_places=2)
/mnt/dados/ClinicaAI/backend/apps/financeiro/models.py:     data = models.DateField()
/mnt/dados/ClinicaAI/backend/apps/financeiro/models.py:     categoria = models.CharField(max_length=100)
/mnt/dados/ClinicaAI/backend/apps/financeiro/models.py:     tipo = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/financeiro/models.py:         max_length=50, choices=[("receita", "Receita"), ("despesa", "Despesa")]
/mnt/dados/ClinicaAI/backend/apps/financeiro/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/financeiro/models.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/financeiro/models.py:         return f"{self.descricao} - {self.valor}"
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 21:36
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:             name="Transacao",
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                 ("descricao", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                 ("valor", models.DecimalField(decimal_places=2, max_digits=10)),
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                 ("data", models.DateField()),
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                 ("categoria", models.CharField(max_length=100)),
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                     "tipo",
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                     models.CharField(
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                         choices=[("receita", "Receita"), ("despesa", "Despesa")],
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                         max_length=50,
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/financeiro/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/financeiro/urls.py
/mnt/dados/ClinicaAI/backend/apps/financeiro/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/financeiro/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/financeiro/urls.py: from .views import TransacaoViewSet
/mnt/dados/ClinicaAI/backend/apps/financeiro/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/financeiro/urls.py: router.register(r"transacoes", TransacaoViewSet)
/mnt/dados/ClinicaAI/backend/apps/financeiro/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/financeiro/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/financeiro/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/financeiro/admin.py
/mnt/dados/ClinicaAI/backend/apps/financeiro/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/financeiro/admin.py: from .models import Transacao
/mnt/dados/ClinicaAI/backend/apps/financeiro/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/admin.py: @admin.register(Transacao)
/mnt/dados/ClinicaAI/backend/apps/financeiro/admin.py: class TransacaoAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/financeiro/admin.py:     list_display = ("descricao", "valor", "data", "categoria", "tipo")
/mnt/dados/ClinicaAI/backend/apps/financeiro/serializers.py
/mnt/dados/ClinicaAI/backend/apps/financeiro/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/financeiro/serializers.py: from .models import Transacao
/mnt/dados/ClinicaAI/backend/apps/financeiro/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/serializers.py: class TransacaoSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/financeiro/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/financeiro/serializers.py:         model = Transacao
/mnt/dados/ClinicaAI/backend/apps/financeiro/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/financeiro/tests.py
/mnt/dados/ClinicaAI/backend/apps/financeiro/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/financeiro/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/financeiro/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/views.py
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/views.py: from .models import Redes_sociaisModel
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/views.py: from .serializers import Redes_sociaisSerializer
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/views.py: class Redes_sociaisViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/views.py:     queryset = Redes_sociaisModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/views.py:     serializer_class = Redes_sociaisSerializer
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/apps.py
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/apps.py: class Redes_sociaisConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/apps.py:     name = "apps.redes_sociais"
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/models.py
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/models.py: class Redes_sociaisModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:             name="Redes_sociaisModel",
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/urls.py
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/urls.py: from .views import Redes_sociaisViewSet
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/urls.py: router.register(r"redes_sociais", Redes_sociaisViewSet)
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/admin.py
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/admin.py: from .models import Redes_sociaisModel
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/admin.py: @admin.register(Redes_sociaisModel)
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/admin.py: class Redes_sociaisAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/serializers.py
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/serializers.py: from .models import Redes_sociaisModel
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/serializers.py: class Redes_sociaisSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/serializers.py:         model = Redes_sociaisModel
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/tests.py
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/redes_sociais/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: # Módulo Profissionais - Views (views.py)
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: from rest_framework import viewsets, status
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: from apps.profissionais.models import (
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     Especialidade,
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     Profissional,
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     Disponibilidade,
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     RegistroHorasTrabalhadas,
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: )
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: from .serializers import (
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     EspecialidadeSerializer,
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     ProfissionalSerializer,
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     DisponibilidadeSerializer,
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     RegistroHorasTrabalhadasSerializer,
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: )
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: from rest_framework.permissions import IsAuthenticated, BasePermission
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: from rest_framework.response import Response
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: from rest_framework.decorators import action
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: # Custom Permissions
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: class IsAdminOrReadOnly(BasePermission):
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     def has_permission(self, request, view):
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:         if request.method in ["GET"]:
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:             return True
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:         return request.user and request.user.is_staff
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: class IsProfissionalOrReadOnly(BasePermission):
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     def has_object_permission(self, request, view, obj):
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:         if request.method in ["GET", "HEAD", "OPTIONS"]:
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:             return True
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:         return obj.usuario == request.user or request.user.is_staff
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: # Views
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: class EspecialidadeViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     queryset = Especialidade.objects.all()
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     serializer_class = EspecialidadeSerializer
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     permission_classes = [IsAuthenticated, IsAdminOrReadOnly]
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: class ProfissionalViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     queryset = Profissional.objects.all()
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     serializer_class = ProfissionalSerializer
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     permission_classes = [IsAuthenticated, IsAdminOrReadOnly]
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: class DisponibilidadeViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     queryset = Disponibilidade.objects.all()
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     serializer_class = DisponibilidadeSerializer
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     permission_classes = [IsAuthenticated, IsProfissionalOrReadOnly]
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     def create(self, request, *args, **kwargs):
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:         # Validar se a disponibilidade é para uma data futura
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:         data = request.data.copy()
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:         dia = data.get("dia")
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:         if dia:
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:             dia = timezone.datetime.strptime(dia, "%Y-%m-%d").date()
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:             if dia < timezone.now().date():
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:                 return Response(
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:                     {"detail": "A disponibilidade deve ser para uma data futura."},
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:                     status=status.HTTP_400_BAD_REQUEST,
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:                 )
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:         return super().create(request, *args, **kwargs)
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: class RegistroHorasTrabalhadasViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     queryset = RegistroHorasTrabalhadas.objects.all()
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     serializer_class = RegistroHorasTrabalhadasSerializer
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     permission_classes = [IsAuthenticated, IsProfissionalOrReadOnly]
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     @action(detail=False, methods=["get"], permission_classes=[IsAuthenticated])
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:     def minhas_horas(self, request):
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:         # Retornar as horas trabalhadas do profissional autenticado
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:         if hasattr(request.user, "profissional"):
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:             profissional = request.user.profissional
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:             queryset = RegistroHorasTrabalhadas.objects.filter(
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:                 profissional=profissional
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:             )
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:             serializer = self.get_serializer(queryset, many=True)
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:             return Response(serializer.data)
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:         return Response(
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:             {"detail": "Usuário não é um profissional."},
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:             status=status.HTTP_400_BAD_REQUEST,
/mnt/dados/ClinicaAI/backend/apps/profissionais/views.py:         )
/mnt/dados/ClinicaAI/backend/apps/profissionais/apps.py
/mnt/dados/ClinicaAI/backend/apps/profissionais/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/profissionais/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/apps.py: class ProfissionaisConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/profissionais/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/profissionais/apps.py:     name = "apps.profissionais"
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: # Módulo Profissionais - Criação do Modelo (models.py)
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: from django.utils.translation import gettext_lazy as _
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: import uuid
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: from django.conf import settings
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: class Especialidade(models.Model):
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     nome = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         max_length=100, unique=True, verbose_name=_("Nome da Especialidade")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     descricao = models.TextField(blank=True, verbose_name=_("Descrição"))
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         verbose_name = _("Especialidade")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         verbose_name_plural = _("Especialidades")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         app_label = "apps.profissionais"
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: class Profissional(models.Model):
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     # Identificador Único Global
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     uuid = models.UUIDField(default=uuid.uuid4, unique=True, editable=False)
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     # Dados Pessoais
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     usuario = models.OneToOneField(
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         settings.AUTH_USER_MODEL,
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         on_delete=models.CASCADE,
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         related_name="profissional",
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         verbose_name=_("Usuário"),
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     nome_completo = models.CharField(max_length=255, verbose_name=_("Nome Completo"))
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     cpf = models.CharField(max_length=11, unique=True, verbose_name=_("CPF"))
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     registro_conselho = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         max_length=50, unique=True, verbose_name=_("Registro no Conselho")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     conselho = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         max_length=100, verbose_name=_("Conselho de Classe (CRM, CRO, etc.)")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     especialidades = models.ManyToManyField(
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         Especialidade, related_name="profissionais", verbose_name=_("Especialidades")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     telefone = models.CharField(max_length=20, blank=True, verbose_name=_("Telefone"))
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     email = models.EmailField(max_length=255, verbose_name=_("E-mail"))
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     endereco = models.CharField(max_length=255, blank=True, verbose_name=_("Endereço"))
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     tipo_contratacao = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         max_length=50,
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         choices=[
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:             ("CLT", "CLT"),
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:             ("PJ", "Pessoa Jurídica"),
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:             ("Freelancer", "Freelancer"),
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         ],
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         verbose_name=_("Tipo de Contratação"),
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     documentos = models.FileField(
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         upload_to="documentos_profissionais/", blank=True, verbose_name=_("Documentos")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     # Dados Profissionais
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     horario_atendimento_inicio = models.TimeField(
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         verbose_name=_("Horário de Início do Atendimento")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     horario_atendimento_fim = models.TimeField(
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         verbose_name=_("Horário de Fim do Atendimento")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     dias_atendimento = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         max_length=50, verbose_name=_("Dias da Semana para Atendimento")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         verbose_name = _("Profissional")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         verbose_name_plural = _("Profissionais")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         return f"{self.nome_completo} ({self.registro_conselho})"
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: class Disponibilidade(models.Model):
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     profissional = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         Profissional,
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         on_delete=models.CASCADE,
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         related_name="disponibilidades",
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         verbose_name=_("Profissional"),
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     dia = models.DateField(verbose_name=_("Dia da Disponibilidade"))
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     horario_inicio = models.TimeField(verbose_name=_("Horário de Início"))
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     horario_fim = models.TimeField(verbose_name=_("Horário de Fim"))
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     disponivel = models.BooleanField(default=True, verbose_name=_("Disponível"))
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         verbose_name = _("Disponibilidade")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         verbose_name_plural = _("Disponibilidades")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         unique_together = (("profissional", "dia", "horario_inicio", "horario_fim"),)
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         return f"Disponibilidade de {self.profissional.nome_completo} em {self.dia}"
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: class RegistroHorasTrabalhadas(models.Model):
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     profissional = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         Profissional,
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         on_delete=models.CASCADE,
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         related_name="horas_trabalhadas",
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         verbose_name=_("Profissional"),
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     dia = models.DateField(verbose_name=_("Dia"))
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     horas_trabalhadas = models.DecimalField(
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         max_digits=4, decimal_places=2, verbose_name=_("Horas Trabalhadas")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         verbose_name = _("Registro de Horas Trabalhadas")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         verbose_name_plural = _("Registros de Horas Trabalhadas")
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/profissionais/models.py:         return f"Horas trabalhadas por {self.profissional.nome_completo} em {self.dia}"
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py: # Módulo Profissionais - URLs (urls.py)
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py: from . import views
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py: router.register(r"especialidades", views.EspecialidadeViewSet)
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py: router.register(r"profissionais", views.ProfissionalViewSet)
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py: router.register(r"disponibilidades", views.DisponibilidadeViewSet)
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py: router.register(r"horas_trabalhadas", views.RegistroHorasTrabalhadasViewSet)
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/profissionais/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: # Módulo Profissionais - Serializers (serializers.py)
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: from apps.profissionais.models import (
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:     Especialidade,
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:     Profissional,
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:     Disponibilidade,
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:     RegistroHorasTrabalhadas,
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: )
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: class EspecialidadeSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:         model = Especialidade
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: class ProfissionalSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:         model = Profissional
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: class DisponibilidadeSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:         model = Disponibilidade
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py: class RegistroHorasTrabalhadasSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:         model = RegistroHorasTrabalhadas
/mnt/dados/ClinicaAI/backend/apps/profissionais/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: # Módulo Assinaturas - Views (views.py)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: from rest_framework import viewsets, status
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: from rest_framework.permissions import IsAuthenticated
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: from rest_framework.response import Response
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: from rest_framework.decorators import action
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: from .models import Documento, Assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: from .serializers import DocumentoSerializer, AssinaturaSerializer
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: import threading
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: from django.core.exceptions import ValidationError
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: import logging
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: logger = logging.getLogger(__name__)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: class DocumentoViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     queryset = Documento.objects.all()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     serializer_class = DocumentoSerializer
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     permission_classes = [IsAuthenticated]
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     def get_queryset(self):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         # Retorna os documentos do paciente ou profissional autenticado
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         user = self.request.user
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         if hasattr(user, 'paciente'):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             return Documento.objects.filter(paciente=user.paciente)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         elif hasattr(user, 'profissional'):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             return Documento.objects.filter(autor=user.profissional)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         return Documento.objects.none()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     @action(detail=True, methods=['post'],
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             permission_classes=[IsAuthenticated])
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: <<<<<<< Tabnine <<<<<<<
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     @action(detail=True, methods=['post'],#+
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             permission_classes=[IsAuthenticated])#+
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     def assinar(self, request, pk=None):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         # Ação para assinar um documento
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         documento = self.get_object()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         if hasattr(request.user, 'profissional'):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             profissional = request.user.profissional
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             # Verificar se o documento está expirado antes de permitir a
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             # assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             if documento.is_expired():
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 return Response(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     {#-
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         'detail': 'Não é possível assinar um documento expirado.'},#-
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:          status=status.HTTP_400_BAD_REQUEST)#-
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                     {'detail': 'Não é possível assinar um documento expirado.'},#+
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                     status=status.HTTP_400_BAD_REQUEST)#+
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             dados_assinatura = {
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 'documento': documento.id,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 'assinante': profissional.id,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 'dupla_autenticacao': request.data.get('dupla_autenticacao', False),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 'biometria_hash': request.data.get('biometria_hash', None),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 'ip_assinatura': request.META.get('REMOTE_ADDR'),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 'localizacao_assinatura': request.data.get('localizacao_assinatura', None)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             }
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             serializer = AssinaturaSerializer(data=dados_assinatura)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             try:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 serializer.is_valid(raise_exception=True)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 serializer.save()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             except ValidationError as e:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 logger.error(f"Erro ao validar assinatura: {e}")
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 return Response({'detail': 'Erro ao validar assinatura.',
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                                 'errors': e.detail}, status=status.HTTP_400_BAD_REQUEST)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             # Atualiza o status do documento para "Assinado" se necessário
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             documento.status = 'Assinado'
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             documento.save()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             # Enviar notificação para o paciente ou partes interessadas
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             threading.Thread(target=enviar_notificacao, args=(#+
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 'Documento Assinado',
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 f'O documento "{documento.titulo}" foi assinado pelo profissional {profissional.nome_completo}.',
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 [documento.paciente.usuario.email] if documento.paciente else []
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             )).start()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             return Response(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 {'detail': 'Documento assinado com sucesso.'}, status=status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         return Response({'detail': 'Permissão negada.'},
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                         status=status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: >>>>>>> Tabnine >>>>>>># {"conversationId":"af549003-181c-446b-93e2-783415f39413","source":"instruct"}
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: class AssinaturaViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     queryset= Assinatura.objects.all()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     serializer_class= AssinaturaSerializer
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     permission_classes= [IsAuthenticated]
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     def get_queryset(self):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         # Retorna as assinaturas do profissional autenticado
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         user= self.request.user
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         if hasattr(user, 'profissional'):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             return Assinatura.objects.filter(assinante=user.profissional)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         return Assinatura.objects.none()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     @ action(detail=True, methods=['post'],
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:              permission_classes=[IsAuthenticated])
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     def validar_assinatura(self, request, pk=None):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         # Ação para validar a integridade da assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         assinatura= self.get_object()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         if assinatura.validar_biometria(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     request.data.get(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         'biometria_dados',
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:          '')):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             return Response({'detail': 'A assinatura é válida.'},
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                             status=status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         return Response({'detail': 'A integridade da assinatura não foi confirmada.'},
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                         status=status.HTTP_400_BAD_REQUEST)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     @ action(detail=True, methods=['post'],
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:              permission_classes=[IsAuthenticated])
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     def cancelar_assinatura(self, request, pk=None):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         # Ação para cancelar uma assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         assinatura= self.get_object()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         if assinatura.assinante.usuario == request.user:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             assinatura.delete()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             assinatura.documento.status= 'Pendente'
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             assinatura.documento.save()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:             return Response(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:                 {'detail': 'Assinatura cancelada com sucesso.'}, status=status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         return Response(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:     {
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:         'detail': 'Você não tem permissão para cancelar esta assinatura.'},
/mnt/dados/ClinicaAI/backend/apps/assinaturas/views.py:          status = status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/apps.py
/mnt/dados/ClinicaAI/backend/apps/assinaturas/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/assinaturas/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/apps.py: class AssinaturasConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/apps.py:     name = "apps.assinaturas"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: import uuid
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: from apps.pacientes.models import Paciente
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: from apps.profissionais.models import Profissional
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: from django.core.validators import FileExtensionValidator
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: from django.conf import settings
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: import hashlib
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: from datetime import timedelta
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: class Documento(models.Model):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     uuid = models.UUIDField(default=uuid.uuid4, unique=True, editable=False)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     titulo = models.CharField(max_length=255, verbose_name="Título do Documento")
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     descricao = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         verbose_name="Descrição do Documento", blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     data_criacao = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     data_atualizacao = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     autor = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         Profissional,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         on_delete=models.SET_NULL,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         related_name="documentos_criados",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     paciente = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         Paciente,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         on_delete=models.CASCADE,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         related_name="documentos",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     arquivo = models.FileField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         upload_to="documentos/",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         verbose_name="Arquivo do Documento",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         validators=[FileExtensionValidator(allowed_extensions=["pdf"])],
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     status = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         max_length=20,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         choices=[("Pendente", "Pendente"), ("Assinado", "Assinado")],
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         default="Pendente",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     data_expiracao = models.DateField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         blank=True, null=True, verbose_name="Data de Expiração do Documento"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     hash_documento = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         max_length=256, verbose_name="Hash do Documento", blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     consentimento_informado = models.BooleanField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         default=False, verbose_name="Consentimento Informado"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     exigencias_legais = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         verbose_name="Exigências Legais", blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     versao = models.IntegerField(default=1, verbose_name="Versão do Documento")
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     compliance_regulamentar = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         verbose_name="Conformidade Regulamentar", blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     associado_prontuario = models.BooleanField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         default=False, verbose_name="Associado ao Prontuário"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     analise_automatizada = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         verbose_name="Análise Automatizada de Risco", blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         ordering = ["-data_criacao"]
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         verbose_name = "Documento"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         verbose_name_plural = "Documentos"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         return f"{self.titulo} - {self.get_status_display()}"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     def is_expired(self):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         # Verifica se o documento está expirado
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         if self.data_expiracao:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             return timezone.now().date() > self.data_expiracao
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         return False
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     def gerar_hash_documento(self):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         # Gera o hash do documento para garantir integridade
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         if self.arquivo:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             hasher = hashlib.sha256()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             with self.arquivo.open("rb") as f:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:                 buf = f.read()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:                 hasher.update(buf)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             self.hash_documento = hasher.hexdigest()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             self.save()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     def definir_expiracao_padrao(self):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         # Define uma data de expiração padrão para o documento se não estiver
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         # definida
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         if not self.data_expiracao:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             self.data_expiracao = timezone.now().date() + timedelta(days=365)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             self.save()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: class Assinatura(models.Model):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     uuid = models.UUIDField(default=uuid.uuid4, unique=True, editable=False)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     documento = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         Documento, on_delete=models.CASCADE, related_name="assinaturas"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     assinante = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         Profissional, on_delete=models.CASCADE, related_name="assinaturas_realizadas"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     data_assinatura = models.DateTimeField(default=timezone.now)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     assinatura_eletronica = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         verbose_name="Assinatura Eletrônica", blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     validade_assinatura = models.DateField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         blank=True, null=True, verbose_name="Validade da Assinatura"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     ip_assinatura = models.GenericIPAddressField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         verbose_name="Endereço IP da Assinatura", blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     localizacao_assinatura = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         max_length=255, verbose_name="Localização da Assinatura", blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     biometria_hash = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         max_length=256, verbose_name="Hash da Biometria", blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     dupla_autenticacao = models.BooleanField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         default=False, verbose_name="Autenticação em Duas Etapas"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     ferramenta_dispositivo = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         max_length=100,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         verbose_name="Ferramenta/Dispositivo Utilizado",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     historico_eventos = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         verbose_name="Histórico de Eventos", blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         ordering = ["-data_assinatura"]
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         verbose_name = "Assinatura"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         verbose_name_plural = "Assinaturas"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         return f"Assinatura de {self.assinante.nome_completo} no documento {self.documento.titulo}"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     def is_valid(self):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         # Verifica se a assinatura ainda é válida
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         if self.validade_assinatura:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             return timezone.now().date() <= self.validade_assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         return True
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     def gerar_assinatura_eletronica(self):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         # Gera uma assinatura eletrônica única usando hash do documento,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         # informações do assinante e autenticação em duas etapas
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         if self.documento and self.assinante:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             dados = f"{self.documento.hash_documento}{self.assinante.uuid}{self.data_assinatura}"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             if self.dupla_autenticacao:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:                 dados += "dupla_autenticacao"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             self.assinatura_eletronica = hashlib.sha256(dados.encode()).hexdigest()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             self.save()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     def validar_biometria(self, biometria_dados):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         # Valida a biometria fornecida comparando com o hash armazenado
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         if biometria_dados:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             biometria_hash = hashlib.sha256(biometria_dados.encode()).hexdigest()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             return biometria_hash == self.biometria_hash
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         return False
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:     def registrar_evento(self, evento):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         # Registra um evento no histórico de assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         if self.historico_eventos:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             self.historico_eventos += f"\n{timezone.now()}: {evento}"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         else:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:             self.historico_eventos = f"{timezone.now()}: {evento}"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/models.py:         self.save()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:             name="AssinaturasModel",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/assinaturas/urls.py
/mnt/dados/ClinicaAI/backend/apps/assinaturas/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/assinaturas/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/assinaturas/urls.py: from .views import AssinaturaViewSet
/mnt/dados/ClinicaAI/backend/apps/assinaturas/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/urls.py: router.register(r"assinaturas", AssinaturaViewSet)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/assinaturas/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/assinaturas/admin.py
/mnt/dados/ClinicaAI/backend/apps/assinaturas/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/assinaturas/admin.py: from .models import Assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/admin.py: @admin.register(Assinatura)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/admin.py: class AssinaturasAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/admin.py:     list_display = ("documento", "assinante", "data_assinatura", "validade_assinatura")
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: # Módulo Assinaturas - Serializers (serializers.py)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: from .models import Documento, Assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: class DocumentoSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         model = Documento
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         read_only_fields = [
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             "uuid",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             "data_criacao",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             "data_atualizacao",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             "hash_documento",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             "versao",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             "analise_automatizada",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         ]
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:     def validate(self, data):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         # Validação para garantir que a data de expiração não seja anterior à
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         # data atual
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         if "data_expiracao" in data and data["data_expiracao"]:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             if data["data_expiracao"] < timezone.now().date():
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:                 raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:                     "A data de expiração não pode ser anterior à data atual."
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:                 )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         # Validação de conformidade regulamentar
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         if not data.get("compliance_regulamentar"):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:                 "É necessário especificar a conformidade regulamentar para garantir que o documento atende aos padrões legais."
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         # Validação de interoperabilidade
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         if data.get("associado_prontuario") and not data.get("paciente"):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:                 "Documentos associados ao prontuário devem estar vinculados a um paciente."
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         return data
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:     def create(self, validated_data):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         # Lógica adicional ao criar um documento, como definir a expiração
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         # padrão e gerar o hash
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         documento = super().create(validated_data)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         documento.definir_expiracao_padrao()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         documento.gerar_hash_documento()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         return documento
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:     def update(self, instance, validated_data):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         # Atualiza a versão do documento ao fazer alterações
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         instance.versao += 1
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         instance = super().update(instance, validated_data)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         instance.gerar_hash_documento()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         return instance
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: class AssinaturaSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         model = Assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         read_only_fields = [
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             "uuid",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             "data_assinatura",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             "assinatura_eletronica",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             "historico_eventos",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         ]
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:     def validate(self, data):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         # Validação para garantir que a assinatura eletrônica tenha integridade
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         if data.get("documento") and data.get("assinante"):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             documento = data["documento"]
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             if documento.is_expired():
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:                 raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:                     "Não é possível assinar um documento expirado."
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:                 )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             # Validação de dupla autenticação
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             if documento.consentimento_informado and not data.get("dupla_autenticacao"):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:                 raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:                     "Documentos que exigem consentimento informado precisam de autenticação em duas etapas."
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:                 )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         # Verificação de integridade de assinatura com hash
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         if data.get("assinatura_eletronica") and data.get("biometria_hash"):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             if not self.validar_integridade_assinatura(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:                 data["assinatura_eletronica"], data["biometria_hash"]
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:             ):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:                 raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:                     "A integridade da assinatura não foi confirmada."
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:                 )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         return data
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:     def create(self, validated_data):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         # Lógica para gerar assinatura eletrônica ao criar uma assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         assinatura = super().create(validated_data)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         assinatura.gerar_assinatura_eletronica()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         assinatura.registrar_evento("Assinatura criada.")
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         return assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:     def update(self, instance, validated_data):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         # Lógica adicional ao atualizar uma assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         instance = super().update(instance, validated_data)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         instance.registrar_evento("Assinatura atualizada.")
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         return instance
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:     def validar_integridade_assinatura(self, assinatura_eletronica, biometria_hash):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         # Lógica simulada para validar a integridade da assinatura com base no hash armazenado
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         # (Aqui pode ser feita uma validação mais complexa em um serviço externo)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/serializers.py:         return True
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: # Módulo Assinaturas - Tests (tests.py)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: from rest_framework.test import APITestCase, APIClient
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: from rest_framework import status
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: from django.urls import reverse
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: from .models import Documento, Assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: from apps.pacientes.models import Paciente
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: from apps.profissionais.models import Profissional
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: from django.contrib.auth import get_user_model
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: import uuid
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: from unittest.mock import patch
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: User = get_user_model()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: class AssinaturasAPITestCase(APITestCase):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:     def setUp(self):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         # Configurar usuários, paciente, profissional, documento e assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         # para os testes
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.client = APIClient()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.user_paciente = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             username="paciente", password="testpassword"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.paciente = Paciente.objects.create(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             usuario=self.user_paciente, nome_completo="Paciente Teste"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.user_profissional = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             username="profissional", password="testpassword"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.profissional = Profissional.objects.create(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             usuario=self.user_profissional, nome_completo="Profissional Teste"
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.documento = Documento.objects.create(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             uuid=uuid.uuid4(),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             titulo="Documento Teste",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             descricao="Descrição do documento teste",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             autor=self.profissional,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             paciente=self.paciente,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             data_expiracao=timezone.now().date() + timezone.timedelta(days=30),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             status="Pendente",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.documento_url = reverse(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             "documento-detail", kwargs={"pk": self.documento.pk}
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:     def test_assinar_documento(self):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         # Teste para assinar um documento
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             reverse("documento-assinar", kwargs={"pk": self.documento.pk}),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             {
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:                 "dupla_autenticacao": True,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:                 "biometria_hash": "hash_teste",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:                 "localizacao_assinatura": "Local Teste",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             },
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.documento.refresh_from_db()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.assertEqual(self.documento.status, "Assinado")
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:     def test_assinar_documento_expirado(self):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         # Teste para garantir que não é possível assinar um documento expirado
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.documento.data_expiracao = timezone.now().date() - timezone.timedelta(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             days=1
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.documento.save()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             reverse("documento-assinar", kwargs={"pk": self.documento.pk}),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             {
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:                 "dupla_autenticacao": True,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:                 "biometria_hash": "hash_teste",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:                 "localizacao_assinatura": "Local Teste",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             },
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.assertIn(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             "Não é possível assinar um documento expirado.", response.data["detail"]
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:     def test_cancelar_assinatura(self):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         # Teste para cancelar uma assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             reverse("documento-assinar", kwargs={"pk": self.documento.pk}),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             {
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:                 "dupla_autenticacao": True,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:                 "biometria_hash": "hash_teste",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:                 "localizacao_assinatura": "Local Teste",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             },
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         assinatura = Assinatura.objects.get(documento=self.documento)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             reverse("assinatura-cancelar-assinatura", kwargs={"pk": assinatura.pk})
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.assertFalse(Assinatura.objects.filter(pk=assinatura.pk).exists())
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.documento.refresh_from_db()
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.assertEqual(self.documento.status, "Pendente")
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:     def test_validar_assinatura(self):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         # Teste para validar uma assinatura
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             reverse("documento-assinar", kwargs={"pk": self.documento.pk}),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             {
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:                 "dupla_autenticacao": True,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:                 "biometria_hash": "hash_teste",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:                 "localizacao_assinatura": "Local Teste",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             },
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         assinatura = Assinatura.objects.get(documento=self.documento)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             reverse("assinatura-validar-assinatura", kwargs={"pk": assinatura.pk}),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             {"biometria_dados": "hash_teste"},
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.assertEqual(response.data["detail"], "A assinatura é válida.")
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:     def test_notificacao_assinatura_documento(self, mock_send_notification):
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         # Teste para garantir que a notificação é enviada ao assinar um
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         # documento
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             reverse("documento-assinar", kwargs={"pk": self.documento.pk}),
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             {
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:                 "dupla_autenticacao": True,
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:                 "biometria_hash": "hash_teste",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:                 "localizacao_assinatura": "Local Teste",
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:             },
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/assinaturas/tests.py:         mock_send_notification.assert_called_once()
/mnt/dados/ClinicaAI/backend/apps/documentos/views.py
/mnt/dados/ClinicaAI/backend/apps/documentos/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/documentos/views.py: from .models import DocumentosModel
/mnt/dados/ClinicaAI/backend/apps/documentos/views.py: from .serializers import DocumentosSerializer
/mnt/dados/ClinicaAI/backend/apps/documentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/views.py: class DocumentosViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/documentos/views.py:     queryset = DocumentosModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/documentos/views.py:     serializer_class = DocumentosSerializer
/mnt/dados/ClinicaAI/backend/apps/documentos/apps.py
/mnt/dados/ClinicaAI/backend/apps/documentos/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/documentos/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/apps.py: class DocumentosConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/documentos/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/documentos/apps.py:     name = "apps.documentos"
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py: from django.utils.translation import gettext_lazy as _
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py: class DocumentosModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py:         verbose_name = _("Documento")
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py:         verbose_name_plural = _("Documentos")
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py:         app_label = "documentos"
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/documentos/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:             name="DocumentosModel",
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/documentos/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/documentos/urls.py
/mnt/dados/ClinicaAI/backend/apps/documentos/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/documentos/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/documentos/urls.py: from .views import DocumentosViewSet
/mnt/dados/ClinicaAI/backend/apps/documentos/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/documentos/urls.py: router.register(r"documentos", DocumentosViewSet)
/mnt/dados/ClinicaAI/backend/apps/documentos/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/documentos/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/documentos/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/documentos/admin.py
/mnt/dados/ClinicaAI/backend/apps/documentos/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/documentos/admin.py: from .models import DocumentosModel
/mnt/dados/ClinicaAI/backend/apps/documentos/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/admin.py: @admin.register(DocumentosModel)
/mnt/dados/ClinicaAI/backend/apps/documentos/admin.py: class DocumentosAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/documentos/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/documentos/serializers.py
/mnt/dados/ClinicaAI/backend/apps/documentos/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/documentos/serializers.py: from .models import DocumentosModel
/mnt/dados/ClinicaAI/backend/apps/documentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/serializers.py: class DocumentosSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/documentos/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/documentos/serializers.py:         model = DocumentosModel
/mnt/dados/ClinicaAI/backend/apps/documentos/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/documentos/tests.py
/mnt/dados/ClinicaAI/backend/apps/documentos/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/documentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/documentos/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/recrutamento/views.py
/mnt/dados/ClinicaAI/backend/apps/recrutamento/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/recrutamento/views.py: from .models import RecrutamentoModel
/mnt/dados/ClinicaAI/backend/apps/recrutamento/views.py: from .serializers import RecrutamentoSerializer
/mnt/dados/ClinicaAI/backend/apps/recrutamento/views.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/views.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/views.py: class RecrutamentoViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/recrutamento/views.py:     queryset = RecrutamentoModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/recrutamento/views.py:     serializer_class = RecrutamentoSerializer
/mnt/dados/ClinicaAI/backend/apps/recrutamento/apps.py
/mnt/dados/ClinicaAI/backend/apps/recrutamento/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/recrutamento/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/apps.py: class RecrutamentoConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/recrutamento/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/recrutamento/apps.py:     name = "apps.recrutamento"
/mnt/dados/ClinicaAI/backend/apps/recrutamento/models.py
/mnt/dados/ClinicaAI/backend/apps/recrutamento/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/recrutamento/models.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/models.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/models.py: class RecrutamentoModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/recrutamento/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/recrutamento/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/recrutamento/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/recrutamento/models.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/recrutamento/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:             name="RecrutamentoModel",
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/recrutamento/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/recrutamento/urls.py
/mnt/dados/ClinicaAI/backend/apps/recrutamento/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/recrutamento/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/recrutamento/urls.py: from .views import RecrutamentoViewSet
/mnt/dados/ClinicaAI/backend/apps/recrutamento/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/recrutamento/urls.py: router.register(r"recrutamento", RecrutamentoViewSet)
/mnt/dados/ClinicaAI/backend/apps/recrutamento/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/recrutamento/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/recrutamento/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/recrutamento/admin.py
/mnt/dados/ClinicaAI/backend/apps/recrutamento/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/recrutamento/admin.py: from .models import RecrutamentoModel
/mnt/dados/ClinicaAI/backend/apps/recrutamento/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/admin.py: @admin.register(RecrutamentoModel)
/mnt/dados/ClinicaAI/backend/apps/recrutamento/admin.py: class RecrutamentoAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/recrutamento/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/recrutamento/serializers.py
/mnt/dados/ClinicaAI/backend/apps/recrutamento/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/recrutamento/serializers.py: from .models import RecrutamentoModel
/mnt/dados/ClinicaAI/backend/apps/recrutamento/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/serializers.py: class RecrutamentoSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/recrutamento/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/recrutamento/serializers.py:         model = RecrutamentoModel
/mnt/dados/ClinicaAI/backend/apps/recrutamento/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/recrutamento/tests.py
/mnt/dados/ClinicaAI/backend/apps/recrutamento/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/recrutamento/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/recrutamento/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/folgas/views.py
/mnt/dados/ClinicaAI/backend/apps/folgas/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/folgas/views.py: from .models import FolgasModel
/mnt/dados/ClinicaAI/backend/apps/folgas/views.py: from .serializers import FolgasSerializer
/mnt/dados/ClinicaAI/backend/apps/folgas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/views.py: class FolgasViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/folgas/views.py:     queryset = FolgasModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/folgas/views.py:     serializer_class = FolgasSerializer
/mnt/dados/ClinicaAI/backend/apps/folgas/apps.py
/mnt/dados/ClinicaAI/backend/apps/folgas/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/folgas/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/apps.py: class FolgasConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/folgas/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/folgas/apps.py:     name = "apps.folgas"
/mnt/dados/ClinicaAI/backend/apps/folgas/models.py
/mnt/dados/ClinicaAI/backend/apps/folgas/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/folgas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/models.py: class FolgasModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/folgas/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/folgas/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/folgas/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/folgas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/folgas/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:             name="FolgasModel",
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/folgas/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/folgas/urls.py
/mnt/dados/ClinicaAI/backend/apps/folgas/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/folgas/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/folgas/urls.py: from .views import FolgasViewSet
/mnt/dados/ClinicaAI/backend/apps/folgas/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/folgas/urls.py: router.register(r"folgas", FolgasViewSet)
/mnt/dados/ClinicaAI/backend/apps/folgas/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/folgas/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/folgas/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/folgas/admin.py
/mnt/dados/ClinicaAI/backend/apps/folgas/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/folgas/admin.py: from .models import FolgasModel
/mnt/dados/ClinicaAI/backend/apps/folgas/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/admin.py: @admin.register(FolgasModel)
/mnt/dados/ClinicaAI/backend/apps/folgas/admin.py: class FolgasAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/folgas/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/folgas/serializers.py
/mnt/dados/ClinicaAI/backend/apps/folgas/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/folgas/serializers.py: from .models import FolgasModel
/mnt/dados/ClinicaAI/backend/apps/folgas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/serializers.py: class FolgasSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/folgas/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/folgas/serializers.py:         model = FolgasModel
/mnt/dados/ClinicaAI/backend/apps/folgas/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/folgas/tests.py
/mnt/dados/ClinicaAI/backend/apps/folgas/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/folgas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/folgas/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/marketing_email/views.py
/mnt/dados/ClinicaAI/backend/apps/marketing_email/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/marketing_email/views.py: from .models import Marketing_emailModel
/mnt/dados/ClinicaAI/backend/apps/marketing_email/views.py: from .serializers import Marketing_emailSerializer
/mnt/dados/ClinicaAI/backend/apps/marketing_email/views.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/views.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/views.py: class Marketing_emailViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/marketing_email/views.py:     queryset = Marketing_emailModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/marketing_email/views.py:     serializer_class = Marketing_emailSerializer
/mnt/dados/ClinicaAI/backend/apps/marketing_email/apps.py
/mnt/dados/ClinicaAI/backend/apps/marketing_email/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/marketing_email/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/apps.py: class Marketing_emailConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/marketing_email/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/marketing_email/apps.py:     name = "apps.marketing_email"
/mnt/dados/ClinicaAI/backend/apps/marketing_email/models.py
/mnt/dados/ClinicaAI/backend/apps/marketing_email/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/marketing_email/models.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/models.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/models.py: class Marketing_emailModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/marketing_email/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/marketing_email/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/marketing_email/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/marketing_email/models.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/marketing_email/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:             name="Marketing_emailModel",
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/marketing_email/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/marketing_email/urls.py
/mnt/dados/ClinicaAI/backend/apps/marketing_email/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/marketing_email/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/marketing_email/urls.py: from .views import Marketing_emailViewSet
/mnt/dados/ClinicaAI/backend/apps/marketing_email/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/marketing_email/urls.py: router.register(r"marketing_email", Marketing_emailViewSet)
/mnt/dados/ClinicaAI/backend/apps/marketing_email/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/marketing_email/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/marketing_email/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/marketing_email/admin.py
/mnt/dados/ClinicaAI/backend/apps/marketing_email/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/marketing_email/admin.py: from .models import Marketing_emailModel
/mnt/dados/ClinicaAI/backend/apps/marketing_email/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/admin.py: @admin.register(Marketing_emailModel)
/mnt/dados/ClinicaAI/backend/apps/marketing_email/admin.py: class Marketing_emailAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/marketing_email/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/marketing_email/serializers.py
/mnt/dados/ClinicaAI/backend/apps/marketing_email/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/marketing_email/serializers.py: from .models import Marketing_emailModel
/mnt/dados/ClinicaAI/backend/apps/marketing_email/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/serializers.py: class Marketing_emailSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/marketing_email/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/marketing_email/serializers.py:         model = Marketing_emailModel
/mnt/dados/ClinicaAI/backend/apps/marketing_email/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/marketing_email/tests.py
/mnt/dados/ClinicaAI/backend/apps/marketing_email/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/marketing_email/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/marketing_email/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/conhecimento/views.py
/mnt/dados/ClinicaAI/backend/apps/conhecimento/views.py: from django.shortcuts import render
/mnt/dados/ClinicaAI/backend/apps/conhecimento/views.py: 
/mnt/dados/ClinicaAI/backend/apps/conhecimento/views.py: # Create your views here.
/mnt/dados/ClinicaAI/backend/apps/conhecimento/apps.py
/mnt/dados/ClinicaAI/backend/apps/conhecimento/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/conhecimento/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/conhecimento/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/conhecimento/apps.py: class ConhecimentoConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/conhecimento/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/conhecimento/apps.py:     name = "apps.conhecimento"
/mnt/dados/ClinicaAI/backend/apps/conhecimento/models.py
/mnt/dados/ClinicaAI/backend/apps/conhecimento/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/conhecimento/models.py: 
/mnt/dados/ClinicaAI/backend/apps/conhecimento/models.py: # Create your models here.
/mnt/dados/ClinicaAI/backend/apps/conhecimento/admin.py
/mnt/dados/ClinicaAI/backend/apps/conhecimento/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/conhecimento/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/conhecimento/admin.py: # Register your models here.
/mnt/dados/ClinicaAI/backend/apps/conhecimento/tests.py
/mnt/dados/ClinicaAI/backend/apps/conhecimento/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/conhecimento/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/conhecimento/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/projeto/views.py
/mnt/dados/ClinicaAI/backend/apps/projeto/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/projeto/views.py: from .models import ProjetoModel
/mnt/dados/ClinicaAI/backend/apps/projeto/views.py: from .serializers import ProjetoSerializer
/mnt/dados/ClinicaAI/backend/apps/projeto/views.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/views.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/views.py: class ProjetoViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/projeto/views.py:     queryset = ProjetoModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/projeto/views.py:     serializer_class = ProjetoSerializer
/mnt/dados/ClinicaAI/backend/apps/projeto/apps.py
/mnt/dados/ClinicaAI/backend/apps/projeto/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/projeto/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/apps.py: class ProjetoConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/projeto/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/projeto/apps.py:     name = "apps.projeto"
/mnt/dados/ClinicaAI/backend/apps/projeto/models.py
/mnt/dados/ClinicaAI/backend/apps/projeto/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/projeto/models.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/models.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/models.py: class ProjetoModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/projeto/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/projeto/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/projeto/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/projeto/models.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/projeto/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:             name="ProjetoModel",
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/projeto/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/projeto/urls.py
/mnt/dados/ClinicaAI/backend/apps/projeto/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/projeto/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/projeto/urls.py: from .views import ProjetoViewSet
/mnt/dados/ClinicaAI/backend/apps/projeto/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/projeto/urls.py: router.register(r"projeto", ProjetoViewSet)
/mnt/dados/ClinicaAI/backend/apps/projeto/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/projeto/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/projeto/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/projeto/admin.py
/mnt/dados/ClinicaAI/backend/apps/projeto/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/projeto/admin.py: from .models import ProjetoModel
/mnt/dados/ClinicaAI/backend/apps/projeto/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/admin.py: @admin.register(ProjetoModel)
/mnt/dados/ClinicaAI/backend/apps/projeto/admin.py: class ProjetoAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/projeto/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/projeto/serializers.py
/mnt/dados/ClinicaAI/backend/apps/projeto/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/projeto/serializers.py: from .models import ProjetoModel
/mnt/dados/ClinicaAI/backend/apps/projeto/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/serializers.py: class ProjetoSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/projeto/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/projeto/serializers.py:         model = ProjetoModel
/mnt/dados/ClinicaAI/backend/apps/projeto/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/projeto/tests.py
/mnt/dados/ClinicaAI/backend/apps/projeto/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/projeto/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/projeto/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/mensagens/views.py
/mnt/dados/ClinicaAI/backend/apps/mensagens/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/mensagens/views.py: from .models import MensagensModel
/mnt/dados/ClinicaAI/backend/apps/mensagens/views.py: from .serializers import MensagensSerializer
/mnt/dados/ClinicaAI/backend/apps/mensagens/views.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/views.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/views.py: class MensagensViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/mensagens/views.py:     queryset = MensagensModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/mensagens/views.py:     serializer_class = MensagensSerializer
/mnt/dados/ClinicaAI/backend/apps/mensagens/apps.py
/mnt/dados/ClinicaAI/backend/apps/mensagens/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/mensagens/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/apps.py: class MensagensConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/mensagens/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/mensagens/apps.py:     name = "apps.mensagens"
/mnt/dados/ClinicaAI/backend/apps/mensagens/models.py
/mnt/dados/ClinicaAI/backend/apps/mensagens/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/mensagens/models.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/models.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/models.py: class MensagensModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/mensagens/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/mensagens/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/mensagens/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/mensagens/models.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/mensagens/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:             name="MensagensModel",
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/mensagens/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/mensagens/urls.py
/mnt/dados/ClinicaAI/backend/apps/mensagens/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/mensagens/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/mensagens/urls.py: from .views import MensagensViewSet
/mnt/dados/ClinicaAI/backend/apps/mensagens/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/mensagens/urls.py: router.register(r"mensagens", MensagensViewSet)
/mnt/dados/ClinicaAI/backend/apps/mensagens/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/mensagens/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/mensagens/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/mensagens/admin.py
/mnt/dados/ClinicaAI/backend/apps/mensagens/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/mensagens/admin.py: from .models import MensagensModel
/mnt/dados/ClinicaAI/backend/apps/mensagens/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/admin.py: @admin.register(MensagensModel)
/mnt/dados/ClinicaAI/backend/apps/mensagens/admin.py: class MensagensAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/mensagens/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/mensagens/serializers.py
/mnt/dados/ClinicaAI/backend/apps/mensagens/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/mensagens/serializers.py: from .models import MensagensModel
/mnt/dados/ClinicaAI/backend/apps/mensagens/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/serializers.py: class MensagensSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/mensagens/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/mensagens/serializers.py:         model = MensagensModel
/mnt/dados/ClinicaAI/backend/apps/mensagens/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/mensagens/tests.py
/mnt/dados/ClinicaAI/backend/apps/mensagens/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/mensagens/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/mensagens/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/views.py
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/views.py: from .models import Chat_ao_vivoModel
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/views.py: from .serializers import Chat_ao_vivoSerializer
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/views.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/views.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/views.py: class Chat_ao_vivoViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/views.py:     queryset = Chat_ao_vivoModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/views.py:     serializer_class = Chat_ao_vivoSerializer
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/apps.py
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/apps.py: class Chat_ao_vivoConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/apps.py:     name = "apps.chat_ao_vivo"
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/models.py
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/models.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/models.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/models.py: class Chat_ao_vivoModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/models.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:             name="Chat_ao_vivoModel",
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/urls.py
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/urls.py: from .views import Chat_ao_vivoViewSet
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/urls.py: router.register(r"chat_ao_vivo", Chat_ao_vivoViewSet)
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/admin.py
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/admin.py: from .models import Chat_ao_vivoModel
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/admin.py: @admin.register(Chat_ao_vivoModel)
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/admin.py: class Chat_ao_vivoAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/serializers.py
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/serializers.py: from .models import Chat_ao_vivoModel
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/serializers.py: class Chat_ao_vivoSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/serializers.py:         model = Chat_ao_vivoModel
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/tests.py
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/chat_ao_vivo/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/eventos/views.py
/mnt/dados/ClinicaAI/backend/apps/eventos/views.py: from django.shortcuts import render
/mnt/dados/ClinicaAI/backend/apps/eventos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/eventos/views.py: # Create your views here.
/mnt/dados/ClinicaAI/backend/apps/eventos/apps.py
/mnt/dados/ClinicaAI/backend/apps/eventos/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/eventos/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/eventos/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/eventos/apps.py: class EventosConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/eventos/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/eventos/apps.py:     name = "apps.eventos"
/mnt/dados/ClinicaAI/backend/apps/eventos/models.py
/mnt/dados/ClinicaAI/backend/apps/eventos/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/eventos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/eventos/models.py: # Create your models here.
/mnt/dados/ClinicaAI/backend/apps/eventos/admin.py
/mnt/dados/ClinicaAI/backend/apps/eventos/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/eventos/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/eventos/admin.py: # Register your models here.
/mnt/dados/ClinicaAI/backend/apps/eventos/tests.py
/mnt/dados/ClinicaAI/backend/apps/eventos/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/eventos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/eventos/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/plm/views.py
/mnt/dados/ClinicaAI/backend/apps/plm/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/plm/views.py: from .models import PlmModel
/mnt/dados/ClinicaAI/backend/apps/plm/views.py: from .serializers import PlmSerializer
/mnt/dados/ClinicaAI/backend/apps/plm/views.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/views.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/views.py: class PlmViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/plm/views.py:     queryset = PlmModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/plm/views.py:     serializer_class = PlmSerializer
/mnt/dados/ClinicaAI/backend/apps/plm/apps.py
/mnt/dados/ClinicaAI/backend/apps/plm/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/plm/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/apps.py: class PlmConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/plm/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/plm/apps.py:     name = "apps.plm"
/mnt/dados/ClinicaAI/backend/apps/plm/models.py
/mnt/dados/ClinicaAI/backend/apps/plm/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/plm/models.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/models.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/models.py: class PlmModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/plm/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/plm/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/plm/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/plm/models.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/plm/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:             name="PlmModel",
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/plm/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/plm/urls.py
/mnt/dados/ClinicaAI/backend/apps/plm/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/plm/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/plm/urls.py: from .views import PlmViewSet
/mnt/dados/ClinicaAI/backend/apps/plm/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/plm/urls.py: router.register(r"plm", PlmViewSet)
/mnt/dados/ClinicaAI/backend/apps/plm/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/plm/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/plm/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/plm/admin.py
/mnt/dados/ClinicaAI/backend/apps/plm/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/plm/admin.py: from .models import PlmModel
/mnt/dados/ClinicaAI/backend/apps/plm/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/admin.py: @admin.register(PlmModel)
/mnt/dados/ClinicaAI/backend/apps/plm/admin.py: class PlmAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/plm/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/plm/serializers.py
/mnt/dados/ClinicaAI/backend/apps/plm/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/plm/serializers.py: from .models import PlmModel
/mnt/dados/ClinicaAI/backend/apps/plm/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/serializers.py: class PlmSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/plm/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/plm/serializers.py:         model = PlmModel
/mnt/dados/ClinicaAI/backend/apps/plm/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/plm/tests.py
/mnt/dados/ClinicaAI/backend/apps/plm/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/plm/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/plm/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/manutencao/views.py
/mnt/dados/ClinicaAI/backend/apps/manutencao/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/manutencao/views.py: from .models import ManutencaoModel
/mnt/dados/ClinicaAI/backend/apps/manutencao/views.py: from .serializers import ManutencaoSerializer
/mnt/dados/ClinicaAI/backend/apps/manutencao/views.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/views.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/views.py: class ManutencaoViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/manutencao/views.py:     queryset = ManutencaoModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/manutencao/views.py:     serializer_class = ManutencaoSerializer
/mnt/dados/ClinicaAI/backend/apps/manutencao/apps.py
/mnt/dados/ClinicaAI/backend/apps/manutencao/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/manutencao/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/apps.py: class ManutencaoConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/manutencao/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/manutencao/apps.py:     name = "apps.manutencao"
/mnt/dados/ClinicaAI/backend/apps/manutencao/models.py
/mnt/dados/ClinicaAI/backend/apps/manutencao/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/manutencao/models.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/models.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/models.py: class ManutencaoModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/manutencao/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/manutencao/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/manutencao/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/manutencao/models.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/manutencao/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:             name="ManutencaoModel",
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/manutencao/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/manutencao/urls.py
/mnt/dados/ClinicaAI/backend/apps/manutencao/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/manutencao/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/manutencao/urls.py: from .views import ManutencaoViewSet
/mnt/dados/ClinicaAI/backend/apps/manutencao/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/manutencao/urls.py: router.register(r"manutencao", ManutencaoViewSet)
/mnt/dados/ClinicaAI/backend/apps/manutencao/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/manutencao/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/manutencao/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/manutencao/admin.py
/mnt/dados/ClinicaAI/backend/apps/manutencao/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/manutencao/admin.py: from .models import ManutencaoModel
/mnt/dados/ClinicaAI/backend/apps/manutencao/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/admin.py: @admin.register(ManutencaoModel)
/mnt/dados/ClinicaAI/backend/apps/manutencao/admin.py: class ManutencaoAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/manutencao/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/manutencao/serializers.py
/mnt/dados/ClinicaAI/backend/apps/manutencao/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/manutencao/serializers.py: from .models import ManutencaoModel
/mnt/dados/ClinicaAI/backend/apps/manutencao/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/serializers.py: class ManutencaoSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/manutencao/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/manutencao/serializers.py:         model = ManutencaoModel
/mnt/dados/ClinicaAI/backend/apps/manutencao/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/manutencao/tests.py
/mnt/dados/ClinicaAI/backend/apps/manutencao/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/manutencao/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/manutencao/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/produtividade/views.py
/mnt/dados/ClinicaAI/backend/apps/produtividade/views.py: from django.shortcuts import render
/mnt/dados/ClinicaAI/backend/apps/produtividade/views.py: 
/mnt/dados/ClinicaAI/backend/apps/produtividade/views.py: # Create your views here.
/mnt/dados/ClinicaAI/backend/apps/produtividade/apps.py
/mnt/dados/ClinicaAI/backend/apps/produtividade/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/produtividade/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/produtividade/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/produtividade/apps.py: class ProdutividadeConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/produtividade/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/produtividade/apps.py:     name = "apps.produtividade"
/mnt/dados/ClinicaAI/backend/apps/produtividade/models.py
/mnt/dados/ClinicaAI/backend/apps/produtividade/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/produtividade/models.py: 
/mnt/dados/ClinicaAI/backend/apps/produtividade/models.py: # Create your models here.
/mnt/dados/ClinicaAI/backend/apps/produtividade/admin.py
/mnt/dados/ClinicaAI/backend/apps/produtividade/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/produtividade/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/produtividade/admin.py: # Register your models here.
/mnt/dados/ClinicaAI/backend/apps/produtividade/tests.py
/mnt/dados/ClinicaAI/backend/apps/produtividade/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/produtividade/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/produtividade/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/frota/views.py
/mnt/dados/ClinicaAI/backend/apps/frota/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/frota/views.py: from .models import FrotaModel
/mnt/dados/ClinicaAI/backend/apps/frota/views.py: from .serializers import FrotaSerializer
/mnt/dados/ClinicaAI/backend/apps/frota/views.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/views.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/views.py: class FrotaViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/frota/views.py:     queryset = FrotaModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/frota/views.py:     serializer_class = FrotaSerializer
/mnt/dados/ClinicaAI/backend/apps/frota/apps.py
/mnt/dados/ClinicaAI/backend/apps/frota/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/frota/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/apps.py: class FrotaConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/frota/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/frota/apps.py:     name = "apps.frota"
/mnt/dados/ClinicaAI/backend/apps/frota/models.py
/mnt/dados/ClinicaAI/backend/apps/frota/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/frota/models.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/models.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/models.py: class FrotaModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/frota/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/frota/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/frota/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/frota/models.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/frota/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:             name="FrotaModel",
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/frota/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/frota/urls.py
/mnt/dados/ClinicaAI/backend/apps/frota/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/frota/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/frota/urls.py: from .views import FrotaViewSet
/mnt/dados/ClinicaAI/backend/apps/frota/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/frota/urls.py: router.register(r"frota", FrotaViewSet)
/mnt/dados/ClinicaAI/backend/apps/frota/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/frota/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/frota/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/frota/admin.py
/mnt/dados/ClinicaAI/backend/apps/frota/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/frota/admin.py: from .models import FrotaModel
/mnt/dados/ClinicaAI/backend/apps/frota/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/admin.py: @admin.register(FrotaModel)
/mnt/dados/ClinicaAI/backend/apps/frota/admin.py: class FrotaAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/frota/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/frota/serializers.py
/mnt/dados/ClinicaAI/backend/apps/frota/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/frota/serializers.py: from .models import FrotaModel
/mnt/dados/ClinicaAI/backend/apps/frota/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/serializers.py: class FrotaSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/frota/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/frota/serializers.py:         model = FrotaModel
/mnt/dados/ClinicaAI/backend/apps/frota/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/frota/tests.py
/mnt/dados/ClinicaAI/backend/apps/frota/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/frota/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/frota/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/faturamento/views.py
/mnt/dados/ClinicaAI/backend/apps/faturamento/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/faturamento/views.py: from .models import FaturamentoModel
/mnt/dados/ClinicaAI/backend/apps/faturamento/views.py: from .serializers import FaturamentoSerializer
/mnt/dados/ClinicaAI/backend/apps/faturamento/views.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/views.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/views.py: class FaturamentoViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/faturamento/views.py:     queryset = FaturamentoModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/faturamento/views.py:     serializer_class = FaturamentoSerializer
/mnt/dados/ClinicaAI/backend/apps/faturamento/apps.py
/mnt/dados/ClinicaAI/backend/apps/faturamento/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/faturamento/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/apps.py: class FaturamentoConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/faturamento/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/faturamento/apps.py:     name = "apps.faturamento"
/mnt/dados/ClinicaAI/backend/apps/faturamento/models.py
/mnt/dados/ClinicaAI/backend/apps/faturamento/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/faturamento/models.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/models.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/models.py: class FaturamentoModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/faturamento/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/faturamento/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/faturamento/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/faturamento/models.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/faturamento/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:             name="FaturamentoModel",
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/faturamento/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/faturamento/urls.py
/mnt/dados/ClinicaAI/backend/apps/faturamento/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/faturamento/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/faturamento/urls.py: from .views import FaturamentoViewSet
/mnt/dados/ClinicaAI/backend/apps/faturamento/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/faturamento/urls.py: router.register(r"faturamento", FaturamentoViewSet)
/mnt/dados/ClinicaAI/backend/apps/faturamento/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/faturamento/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/faturamento/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/faturamento/admin.py
/mnt/dados/ClinicaAI/backend/apps/faturamento/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/faturamento/admin.py: from .models import FaturamentoModel
/mnt/dados/ClinicaAI/backend/apps/faturamento/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/admin.py: @admin.register(FaturamentoModel)
/mnt/dados/ClinicaAI/backend/apps/faturamento/admin.py: class FaturamentoAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/faturamento/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/faturamento/serializers.py
/mnt/dados/ClinicaAI/backend/apps/faturamento/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/faturamento/serializers.py: from .models import FaturamentoModel
/mnt/dados/ClinicaAI/backend/apps/faturamento/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/serializers.py: class FaturamentoSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/faturamento/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/faturamento/serializers.py:         model = FaturamentoModel
/mnt/dados/ClinicaAI/backend/apps/faturamento/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/faturamento/tests.py
/mnt/dados/ClinicaAI/backend/apps/faturamento/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/faturamento/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/faturamento/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/locacao/views.py
/mnt/dados/ClinicaAI/backend/apps/locacao/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/locacao/views.py: from .models import LocacaoModel
/mnt/dados/ClinicaAI/backend/apps/locacao/views.py: from .serializers import LocacaoSerializer
/mnt/dados/ClinicaAI/backend/apps/locacao/views.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/views.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/views.py: class LocacaoViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/locacao/views.py:     queryset = LocacaoModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/locacao/views.py:     serializer_class = LocacaoSerializer
/mnt/dados/ClinicaAI/backend/apps/locacao/apps.py
/mnt/dados/ClinicaAI/backend/apps/locacao/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/locacao/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/apps.py: class LocacaoConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/locacao/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/locacao/apps.py:     name = "apps.locacao"
/mnt/dados/ClinicaAI/backend/apps/locacao/models.py
/mnt/dados/ClinicaAI/backend/apps/locacao/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/locacao/models.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/models.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/models.py: class LocacaoModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/locacao/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/locacao/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/locacao/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/locacao/models.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/locacao/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:             name="LocacaoModel",
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/locacao/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/locacao/urls.py
/mnt/dados/ClinicaAI/backend/apps/locacao/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/locacao/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/locacao/urls.py: from .views import LocacaoViewSet
/mnt/dados/ClinicaAI/backend/apps/locacao/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/locacao/urls.py: router.register(r"locacao", LocacaoViewSet)
/mnt/dados/ClinicaAI/backend/apps/locacao/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/locacao/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/locacao/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/locacao/admin.py
/mnt/dados/ClinicaAI/backend/apps/locacao/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/locacao/admin.py: from .models import LocacaoModel
/mnt/dados/ClinicaAI/backend/apps/locacao/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/admin.py: @admin.register(LocacaoModel)
/mnt/dados/ClinicaAI/backend/apps/locacao/admin.py: class LocacaoAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/locacao/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/locacao/serializers.py
/mnt/dados/ClinicaAI/backend/apps/locacao/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/locacao/serializers.py: from .models import LocacaoModel
/mnt/dados/ClinicaAI/backend/apps/locacao/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/serializers.py: class LocacaoSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/locacao/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/locacao/serializers.py:         model = LocacaoModel
/mnt/dados/ClinicaAI/backend/apps/locacao/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/locacao/tests.py
/mnt/dados/ClinicaAI/backend/apps/locacao/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/locacao/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/locacao/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/fabricacao/views.py
/mnt/dados/ClinicaAI/backend/apps/fabricacao/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/fabricacao/views.py: from .models import FabricacaoModel
/mnt/dados/ClinicaAI/backend/apps/fabricacao/views.py: from .serializers import FabricacaoSerializer
/mnt/dados/ClinicaAI/backend/apps/fabricacao/views.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/views.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/views.py: class FabricacaoViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/fabricacao/views.py:     queryset = FabricacaoModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/fabricacao/views.py:     serializer_class = FabricacaoSerializer
/mnt/dados/ClinicaAI/backend/apps/fabricacao/apps.py
/mnt/dados/ClinicaAI/backend/apps/fabricacao/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/fabricacao/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/apps.py: class FabricacaoConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/fabricacao/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/fabricacao/apps.py:     name = "apps.fabricacao"
/mnt/dados/ClinicaAI/backend/apps/fabricacao/models.py
/mnt/dados/ClinicaAI/backend/apps/fabricacao/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/fabricacao/models.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/models.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/models.py: class FabricacaoModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/fabricacao/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/fabricacao/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/fabricacao/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/fabricacao/models.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/fabricacao/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:             name="FabricacaoModel",
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/fabricacao/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/fabricacao/urls.py
/mnt/dados/ClinicaAI/backend/apps/fabricacao/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/fabricacao/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/fabricacao/urls.py: from .views import FabricacaoViewSet
/mnt/dados/ClinicaAI/backend/apps/fabricacao/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/fabricacao/urls.py: router.register(r"fabricacao", FabricacaoViewSet)
/mnt/dados/ClinicaAI/backend/apps/fabricacao/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/fabricacao/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/fabricacao/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/fabricacao/admin.py
/mnt/dados/ClinicaAI/backend/apps/fabricacao/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/fabricacao/admin.py: from .models import FabricacaoModel
/mnt/dados/ClinicaAI/backend/apps/fabricacao/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/admin.py: @admin.register(FabricacaoModel)
/mnt/dados/ClinicaAI/backend/apps/fabricacao/admin.py: class FabricacaoAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/fabricacao/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/fabricacao/serializers.py
/mnt/dados/ClinicaAI/backend/apps/fabricacao/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/fabricacao/serializers.py: from .models import FabricacaoModel
/mnt/dados/ClinicaAI/backend/apps/fabricacao/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/serializers.py: class FabricacaoSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/fabricacao/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/fabricacao/serializers.py:         model = FabricacaoModel
/mnt/dados/ClinicaAI/backend/apps/fabricacao/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/fabricacao/tests.py
/mnt/dados/ClinicaAI/backend/apps/fabricacao/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/fabricacao/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/fabricacao/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/vendas/views.py
/mnt/dados/ClinicaAI/backend/apps/vendas/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/vendas/views.py: from .models import VendasModel
/mnt/dados/ClinicaAI/backend/apps/vendas/views.py: from .serializers import VendasSerializer
/mnt/dados/ClinicaAI/backend/apps/vendas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/views.py: class VendasViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/vendas/views.py:     queryset = VendasModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/vendas/views.py:     serializer_class = VendasSerializer
/mnt/dados/ClinicaAI/backend/apps/vendas/apps.py
/mnt/dados/ClinicaAI/backend/apps/vendas/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/vendas/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/apps.py: class VendasConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/vendas/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/vendas/apps.py:     name = "apps.vendas"
/mnt/dados/ClinicaAI/backend/apps/vendas/models.py
/mnt/dados/ClinicaAI/backend/apps/vendas/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/vendas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/models.py: class VendasModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/vendas/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/vendas/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/vendas/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/vendas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/vendas/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:             name="VendasModel",
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/vendas/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/vendas/urls.py
/mnt/dados/ClinicaAI/backend/apps/vendas/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/vendas/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/vendas/urls.py: from .views import VendasViewSet
/mnt/dados/ClinicaAI/backend/apps/vendas/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/vendas/urls.py: router.register(r"vendas", VendasViewSet)
/mnt/dados/ClinicaAI/backend/apps/vendas/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/vendas/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/vendas/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/vendas/admin.py
/mnt/dados/ClinicaAI/backend/apps/vendas/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/vendas/admin.py: from .models import VendasModel
/mnt/dados/ClinicaAI/backend/apps/vendas/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/admin.py: @admin.register(VendasModel)
/mnt/dados/ClinicaAI/backend/apps/vendas/admin.py: class VendasAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/vendas/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/vendas/serializers.py
/mnt/dados/ClinicaAI/backend/apps/vendas/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/vendas/serializers.py: from .models import VendasModel
/mnt/dados/ClinicaAI/backend/apps/vendas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/serializers.py: class VendasSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/vendas/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/vendas/serializers.py:         model = VendasModel
/mnt/dados/ClinicaAI/backend/apps/vendas/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/vendas/tests.py
/mnt/dados/ClinicaAI/backend/apps/vendas/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/vendas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/vendas/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/ecommerce/views.py
/mnt/dados/ClinicaAI/backend/apps/ecommerce/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/ecommerce/views.py: from .models import EcommerceModel
/mnt/dados/ClinicaAI/backend/apps/ecommerce/views.py: from .serializers import EcommerceSerializer
/mnt/dados/ClinicaAI/backend/apps/ecommerce/views.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/views.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/views.py: class EcommerceViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/ecommerce/views.py:     queryset = EcommerceModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/ecommerce/views.py:     serializer_class = EcommerceSerializer
/mnt/dados/ClinicaAI/backend/apps/ecommerce/apps.py
/mnt/dados/ClinicaAI/backend/apps/ecommerce/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/ecommerce/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/apps.py: class EcommerceConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/ecommerce/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/ecommerce/apps.py:     name = "apps.ecommerce"
/mnt/dados/ClinicaAI/backend/apps/ecommerce/models.py
/mnt/dados/ClinicaAI/backend/apps/ecommerce/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/ecommerce/models.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/models.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/models.py: class EcommerceModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/ecommerce/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/ecommerce/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/ecommerce/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/ecommerce/models.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/ecommerce/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:             name="EcommerceModel",
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/ecommerce/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/ecommerce/urls.py
/mnt/dados/ClinicaAI/backend/apps/ecommerce/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/ecommerce/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/ecommerce/urls.py: from .views import EcommerceViewSet
/mnt/dados/ClinicaAI/backend/apps/ecommerce/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/ecommerce/urls.py: router.register(r"ecommerce", EcommerceViewSet)
/mnt/dados/ClinicaAI/backend/apps/ecommerce/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/ecommerce/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/ecommerce/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/ecommerce/admin.py
/mnt/dados/ClinicaAI/backend/apps/ecommerce/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/ecommerce/admin.py: from .models import EcommerceModel
/mnt/dados/ClinicaAI/backend/apps/ecommerce/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/admin.py: @admin.register(EcommerceModel)
/mnt/dados/ClinicaAI/backend/apps/ecommerce/admin.py: class EcommerceAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/ecommerce/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/ecommerce/serializers.py
/mnt/dados/ClinicaAI/backend/apps/ecommerce/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/ecommerce/serializers.py: from .models import EcommerceModel
/mnt/dados/ClinicaAI/backend/apps/ecommerce/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/serializers.py: class EcommerceSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/ecommerce/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/ecommerce/serializers.py:         model = EcommerceModel
/mnt/dados/ClinicaAI/backend/apps/ecommerce/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/ecommerce/tests.py
/mnt/dados/ClinicaAI/backend/apps/ecommerce/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/ecommerce/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/ecommerce/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/blog/views.py
/mnt/dados/ClinicaAI/backend/apps/blog/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/blog/views.py: from .models import BlogModel
/mnt/dados/ClinicaAI/backend/apps/blog/views.py: from .serializers import BlogSerializer
/mnt/dados/ClinicaAI/backend/apps/blog/views.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/views.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/views.py: class BlogViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/blog/views.py:     queryset = BlogModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/blog/views.py:     serializer_class = BlogSerializer
/mnt/dados/ClinicaAI/backend/apps/blog/apps.py
/mnt/dados/ClinicaAI/backend/apps/blog/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/blog/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/apps.py: class BlogConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/blog/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/blog/apps.py:     name = "apps.blog"
/mnt/dados/ClinicaAI/backend/apps/blog/models.py
/mnt/dados/ClinicaAI/backend/apps/blog/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/blog/models.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/models.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/models.py: class BlogModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/blog/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/blog/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/blog/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/blog/models.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/blog/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:             name="BlogModel",
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/blog/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/blog/urls.py
/mnt/dados/ClinicaAI/backend/apps/blog/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/blog/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/blog/urls.py: from .views import BlogViewSet
/mnt/dados/ClinicaAI/backend/apps/blog/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/blog/urls.py: router.register(r"blog", BlogViewSet)
/mnt/dados/ClinicaAI/backend/apps/blog/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/blog/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/blog/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/blog/admin.py
/mnt/dados/ClinicaAI/backend/apps/blog/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/blog/admin.py: from .models import BlogModel
/mnt/dados/ClinicaAI/backend/apps/blog/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/admin.py: @admin.register(BlogModel)
/mnt/dados/ClinicaAI/backend/apps/blog/admin.py: class BlogAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/blog/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/blog/serializers.py
/mnt/dados/ClinicaAI/backend/apps/blog/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/blog/serializers.py: from .models import BlogModel
/mnt/dados/ClinicaAI/backend/apps/blog/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/serializers.py: class BlogSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/blog/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/blog/serializers.py:         model = BlogModel
/mnt/dados/ClinicaAI/backend/apps/blog/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/blog/tests.py
/mnt/dados/ClinicaAI/backend/apps/blog/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/blog/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/blog/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: # Módulo Atendimentos - Views (views.py)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: from rest_framework import viewsets, status
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: from rest_framework.permissions import IsAuthenticated
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: from rest_framework.response import Response
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: from rest_framework.decorators import action
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: from .models import Atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: from .serializers import AtendimentoSerializer
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: import threading
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: class IsProfissional(IsAuthenticated):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     def has_permission(self, request, view):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         return super().has_permission(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     request, view) and hasattr(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         request.user, 'profissional')
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: class AtendimentoViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     queryset = Atendimento.objects.all()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     serializer_class = AtendimentoSerializer
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     permission_classes = [IsAuthenticated]
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     def get_queryset(self):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         # Retorna os atendimentos do usuário autenticado (paciente ou
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         # profissional)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         user = self.request.user
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         if hasattr(user, 'paciente'):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             return Atendimento.objects.filter(paciente=user.paciente)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         elif hasattr(user, 'profissional'):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             return Atendimento.objects.filter(profissional=user.profissional)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         return Atendimento.objects.none()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     @action(detail=True, methods=['post'], permission_classes=[IsProfissional])
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     def concluir(self, request, pk=None):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         # Ação para concluir um atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         atendimento = self.get_object()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         if atendimento.profissional != request.user.profissional:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             return Response(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     {
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         'detail': 'Você não tem permissão para concluir este atendimento.'},
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:          status=status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         serializer = self.get_serializer(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     atendimento, data={
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         'status': 'Concluído'}, partial=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         serializer.is_valid(raise_exception=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         self.perform_update(serializer)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         # Enviar notificação para o paciente e profissional sobre a conclusão
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         # do atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             'Atendimento Concluído',
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             f'O atendimento de {atendimento.paciente.nome_completo} com o profissional {atendimento.profissional.nome_completo} foi concluído.',
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             [atendimento.paciente.usuario.email,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:      atendimento.profissional.usuario.email]
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         )).start()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         return Response(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             {'detail': 'Atendimento concluído com sucesso.'}, status=status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     @ action(detail=False, methods=['get'],
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:              permission_classes=[IsAuthenticated])
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     def meus_atendimentos(self, request):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         # Retorna os atendimentos do paciente ou profissional autenticado
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         user= self.request.user
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         if hasattr(user, 'paciente'):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             atendimentos= Atendimento.objects.filter(paciente=user.paciente)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         elif hasattr(user, 'profissional'):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             atendimentos= Atendimento.objects.filter(profissional=user.profissional)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         else:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             return Response(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     {
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         'detail': 'Você não tem permissão para visualizar atendimentos.'},
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:          status = status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         serializer= self.get_serializer(atendimentos, many=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         return Response(serializer.data)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     @ action(detail=True, methods=['post'],
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:              permission_classes=[IsProfissional])
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     def cancelar(self, request, pk=None):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         # Ação para cancelar um atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         atendimento= self.get_object()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         if atendimento.profissional != request.user.profissional:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             return Response(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     {
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         'detail': 'Você não tem permissão para cancelar este atendimento.'},
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:          status = status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         motivo= request.data.get('motivo_cancelamento')
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         if not motivo:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             return Response({'detail': 'Motivo do cancelamento deve ser informado.'},
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:                             status=status.HTTP_400_BAD_REQUEST)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         serializer= self.get_serializer(atendimento, data={'status': 'Cancelado'}, partial=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         serializer.is_valid(raise_exception=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         self.perform_update(serializer)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         # Enviar notificação para o paciente e profissional sobre o
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         # cancelamento do atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             'Atendimento Cancelado',
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             f'O atendimento de {atendimento.paciente.nome_completo} com o profissional {atendimento.profissional.nome_completo} foi cancelado. Motivo: {motivo}',
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             [atendimento.paciente.usuario.email,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:      atendimento.profissional.usuario.email]
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         )).start()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         return Response(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             {'detail': 'Atendimento cancelado com sucesso.'}, status=status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     @ action(detail=True, methods=['post'],
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:              permission_classes=[IsProfissional])
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     def reagendar(self, request, pk=None):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         # Ação para reagendar um atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         atendimento= self.get_object()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         if atendimento.profissional != request.user.profissional:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             return Response(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:     {
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         'detail': 'Você não tem permissão para reagendar este atendimento.'},
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:          status=status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         nova_data= request.data.get('data_atendimento')
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         novo_horario_inicio= request.data.get('horario_inicio')
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         novo_horario_fim= request.data.get('horario_fim')
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         if not nova_data or not novo_horario_inicio or not novo_horario_fim:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             return Response({'detail': 'Dados de reagendamento incompletos.'},
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:                             status=status.HTTP_400_BAD_REQUEST)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         serializer= self.get_serializer(atendimento, data={
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             'data_atendimento': nova_data,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             'horario_inicio': novo_horario_inicio,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             'horario_fim': novo_horario_fim,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             'status': 'Pendente'
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         }, partial=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         serializer.is_valid(raise_exception=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         self.perform_update(serializer)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         # Enviar notificação para o paciente e profissional sobre o
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         # reagendamento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             'Atendimento Reagendado',
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             f'O atendimento de {atendimento.paciente.nome_completo} com o profissional {atendimento.profissional.nome_completo} foi reagendado para {nova_data} às {novo_horario_inicio}.',
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             [atendimento.paciente.usuario.email,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:      atendimento.profissional.usuario.email]
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         )).start()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:         return Response(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/views.py:             {'detail': 'Atendimento reagendado com sucesso.'}, status=status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: from apps.pacientes.models import Paciente
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: from apps.profissionais.models import Profissional
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: from apps.agendamentos.models import Agendamento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: from apps.documentos.models import DocumentosModel
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: from apps.financeiro.models import Transacao
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: from apps.assinaturas.models import Assinatura
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: from apps.prontuarios.models import ProcedimentoRealizado
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: # Ajuste o caminho conforme a localização do modelo
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: from apps.iot.models import DispositivoIoT
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: class Atendimento(models.Model):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     STATUS_CHOICES = [
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         ("Pendente", "Pendente"),
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         ("Em Andamento", "Em Andamento"),
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         ("Concluído", "Concluído"),
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         ("Cancelado", "Cancelado"),
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         ("Aguardando Documentação", "Aguardando Documentação"),
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         ("Aguardando Pagamento", "Aguardando Pagamento"),
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     ]
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     paciente = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         Paciente, on_delete=models.CASCADE, related_name="atendimentos"
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     profissional = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         Profissional, on_delete=models.CASCADE, related_name="atendimentos"
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     agendamento = models.OneToOneField(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         Agendamento,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         on_delete=models.SET_NULL,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         related_name="atendimento",
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     procedimentos = models.ManyToManyField(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         ProcedimentoRealizado, related_name="atendimentos", blank=True
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     dispositivos_iot = models.ManyToManyField(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         DispositivoIoT, related_name="atendimentos", blank=True
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     # seguro_saude = models.ForeignKey(SeguroSaude, on_delete=models.SET_NULL, null=True, blank=True, related_name='atendimentos')
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     data_atendimento = models.DateField(default=timezone.now)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     horario_inicio = models.TimeField()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     horario_fim = models.TimeField()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     status = models.CharField(max_length=30, choices=STATUS_CHOICES, default="Pendente")
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     diagnostico = models.TextField(null=True, blank=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     prescricao = models.TextField(null=True, blank=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     tratamento = models.TextField(null=True, blank=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     assinatura_profissional = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         Assinatura,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         on_delete=models.SET_NULL,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         related_name="assinaturas_profissionais",
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     autorizacao_paciente = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         Assinatura,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         on_delete=models.SET_NULL,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         related_name="autorizacoes_pacientes",
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     feedback_paciente = models.TextField(null=True, blank=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     valor = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     transacao_financeira = models.OneToOneField(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         Transacao,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         on_delete=models.SET_NULL,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         related_name="atendimento",
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     recomendacoes_ia = models.TextField(null=True, blank=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     recomendacoes_automaticas = models.TextField(null=True, blank=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     avaliacao_risco = models.DecimalField(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         max_digits=5, decimal_places=2, null=True, blank=True
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     consentimento_paciente = models.BooleanField(default=False)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     documentacao_completa = models.BooleanField(default=False)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         verbose_name = "Atendimento"
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         verbose_name_plural = "Atendimentos"
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         ordering = ["-data_atendimento", "-horario_inicio"]
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         return f"Atendimento de {self.paciente.nome_completo} com {self.profissional.nome_completo} em {self.data_atendimento}"
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     def save(self, *args, **kwargs):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         # Lógica adicional para integração com IoT, IA e outros serviços
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         if self.status == "Concluído" and not self.transacao_financeira:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:             # Cria uma transação financeira se o atendimento for concluído
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:             self.transacao_financeira = Transacao.objects.create(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:                 paciente=self.paciente,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:                 valor=self.valor,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:                 descricao=f"Pagamento pelo atendimento em {self.data_atendimento}",
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:                 status="Pendente",
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:             )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         # Integração com IA e Machine Learning para análise do atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         # Exemplo: Enviar dados para serviço de IA para sugerir tratamentos ou
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         # analisar feedback
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         super().save(*args, **kwargs)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     def finalizar_atendimento(self):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         # Método para finalizar o atendimento e garantir todas as validações
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         # necessárias
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         if self.status == "Concluído":
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:             if not self.assinatura_profissional or not self.autorizacao_paciente:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:                 raise ValueError(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:                     "Assinatura do profissional e autorização do paciente são obrigatórias para concluir o atendimento."
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:                 )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:             if not self.diagnostico or not self.prescricao:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:                 raise ValueError(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:                     "Diagnóstico e prescrição são obrigatórios para concluir o atendimento."
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:                 )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         # Atualiza o status do agendamento associado
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         if self.agendamento:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:             self.agendamento.status = "Concluído"
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:             self.agendamento.save()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         # Enviar notificações para o paciente e profissional
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         self.save()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: class AuditoriaAtendimento(models.Model):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     atendimento = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         Atendimento, on_delete=models.CASCADE, related_name="auditorias"
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     usuario = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     alteracoes = models.TextField()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     data_alteracao = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         verbose_name = "Auditoria de Atendimento"
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         verbose_name_plural = "Auditorias de Atendimentos"
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         ordering = ["-data_alteracao"]
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/models.py:         return f"Auditoria do Atendimento {self.atendimento.id} por {self.usuario} em {self.data_alteracao}"
/mnt/dados/ClinicaAI/backend/apps/atendimentos/urls.py
/mnt/dados/ClinicaAI/backend/apps/atendimentos/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/atendimentos/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/atendimentos/urls.py: from .views import AtendimentoViewSet
/mnt/dados/ClinicaAI/backend/apps/atendimentos/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/urls.py: router.register(r"atendimentos", AtendimentoViewSet, basename="atendimento")
/mnt/dados/ClinicaAI/backend/apps/atendimentos/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/atendimentos/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/atendimentos/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: from .models import Atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: from apps.agendamentos.models import Agendamento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: from apps.financeiro.models import Transacao
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: from apps.documentos.models import DocumentosModel
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: class AtendimentoSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         model = Atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         fields = '__all__'
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:     def validate(self, data):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # Validação para garantir que a data e horário do atendimento sejam
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # futuros, caso o atendimento ainda esteja pendente
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         if data['status'] == 'Pendente' and (data['data_atendimento'] < timezone.now().date() or (
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             data['data_atendimento'] == timezone.now().date() and data['horario_inicio'] <= timezone.now().time())):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 "A data e o horário do atendimento pendente devem ser futuros.")
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # Garantir que a hora de fim do atendimento seja posterior à hora de
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # início
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         if data['horario_fim'] <= data['horario_inicio']:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 "O horário de fim deve ser posterior ao horário de início.")
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # Validação para garantir que o agendamento associado não tenha sido
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # concluído antes do atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         agendamento = data.get('agendamento')
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         if agendamento and agendamento.status == 'Concluído':
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 "O agendamento associado já foi concluído e não pode ser usado para um novo atendimento.")
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # Garantir que a assinatura do profissional e a autorização do paciente
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # estejam presentes ao concluir o atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         if data['status'] == 'Concluído':
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             if not data.get('assinatura_profissional'):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                     "A assinatura do profissional é obrigatória para concluir o atendimento.")
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             if not data.get('autorizacao_paciente'):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                     "A autorização do paciente é obrigatória para concluir o atendimento.")
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # Garantir que diagnóstico e feedback estejam presentes ao concluir o
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         if data['status'] == 'Concluído':
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             if not data.get('diagnostico'):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                     "O diagnóstico é obrigatório para concluir o atendimento.")
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             if not data.get('feedback_paciente'):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                     "O feedback do paciente é obrigatório para concluir o atendimento.")
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         return data
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:     def create(self, validated_data):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # Lógica adicional ao criar um atendimento, como atualizar o status do
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # agendamento relacionado
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         agendamento = validated_data.get('agendamento')
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         if agendamento:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             agendamento.status = 'Concluído'
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             agendamento.save()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # Enviar notificação para o paciente e profissional sobre a criação do
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             'Novo Atendimento Criado',
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             f'Um novo atendimento foi agendado para {validated_data.get("data_atendimento")} com o profissional {validated_data.get("profissional").nome_completo}.',
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             [validated_data.get('paciente').usuario.email,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:      validated_data.get('profissional').usuario.email]
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         return super().create(validated_data)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:     def update(self, instance, validated_data):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # Atualizar a transação financeira, se houver alteração no status do
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         if 'status' in validated_data and validated_data[
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             'status'] == 'Concluído' and not instance.transacao_financeira:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             # Garantir que o valor do atendimento seja positivo
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             valor= validated_data.get('valor', 0)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             if valor <= 0:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                     "O valor do atendimento deve ser positivo para criar uma transação financeira.")
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             # Criar uma transação financeira relacionada
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             transacao= Transacao.objects.create(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 paciente = instance.paciente,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 valor = valor,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 descricao = f'Pagamento pelo atendimento realizado em {instance.data_atendimento}',
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 status = 'Pendente'
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             instance.transacao_financeira = transacao
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # Garantir que o status seja consistente com os campos obrigatórios
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         if validated_data.get('status') == 'Concluído':
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             if not instance.tratamento or not instance.prescricao:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 raise serializers.ValidationError("O atendimento não pode ser concluído sem um tratamento e uma prescrição adequados.")
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # Enviar notificação para o paciente e profissional sobre a conclusão do atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         if validated_data.get('status') == 'Concluído':
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 'Atendimento Concluído',
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 f'O atendimento de {instance.paciente.nome_completo} com o profissional {instance.profissional.nome_completo} foi concluído.',
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:                 [instance.paciente.usuario.email, instance.profissional.usuario.email]
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         # Atualizar o status do agendamento para manter a consistência
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         if instance.agendamento:
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             instance.agendamento.status = 'Concluído'
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:             instance.agendamento.save()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/serializers.py:         return super().update(instance, validated_data)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: # Módulo Atendimentos - Tests (tests.py)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: from rest_framework.test import APITestCase, APIClient
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: from rest_framework import status
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: from django.urls import reverse
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: from .models import Atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: from apps.pacientes.models import Paciente
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: from apps.profissionais.models import Profissional
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: import Profissional
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: from django.contrib.auth import get_user_model
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: import uuid
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: from unittest.mock import patch
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: User = get_user_model()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: class AtendimentoAPITestCase(APITestCase):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:     def setUp(self):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         # Configurar usuários, paciente, profissional e atendimento para os
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         # testes
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.client = APIClient()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.user_paciente = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             username="paciente", password="testpassword"
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.paciente = Paciente.objects.create(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             usuario=self.user_paciente, nome_completo="Paciente Teste"
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.user_profissional = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             username="profissional", password="testpassword"
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.profissional = Profissional.objects.create(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             usuario=self.user_profissional, nome_completo="Profissional Teste"
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.user_outro_profissional = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             username="outro_profissional", password="testpassword"
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.outro_profissional = Profissional.objects.create(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             usuario=self.user_outro_profissional,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             nome_completo="Outro Profissional Teste",
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.atendimento = Atendimento.objects.create(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             uuid=uuid.uuid4(),
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             paciente=self.paciente,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             profissional=self.profissional,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             data_atendimento=timezone.now().date() + timezone.timedelta(days=1),
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             horario_inicio="10:00",
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             horario_fim="11:00",
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             tipo_atendimento="Consulta",
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.atendimento_url = reverse(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             "atendimento-detail", kwargs={"pk": self.atendimento.pk}
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:     def test_concluir_atendimento(self):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         # Teste para concluir um atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             reverse("atendimento-concluir", kwargs={"pk": self.atendimento.pk})
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.atendimento.refresh_from_db()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(self.atendimento.status, "Concluído")
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:     def test_concluir_atendimento_permissao_negada(self):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         # Teste para garantir que outro profissional não possa concluir o
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         # atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.client.force_authenticate(user=self.outro_profissional)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             reverse("atendimento-concluir", kwargs={"pk": self.atendimento.pk})
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:     def test_cancelar_atendimento(self):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         # Teste para cancelar um atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             reverse("atendimento-cancelar", kwargs={"pk": self.atendimento.pk}),
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             {"motivo_cancelamento": "Imprevisto"},
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.atendimento.refresh_from_db()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(self.atendimento.status, "Cancelado")
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:     def test_reagendar_atendimento(self):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         # Teste para reagendar um atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         nova_data = timezone.now().date() + timezone.timedelta(days=2)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             reverse("atendimento-reagendar", kwargs={"pk": self.atendimento.pk}),
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             {
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:                 "data_atendimento": nova_data,
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:                 "horario_inicio": "11:00",
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:                 "horario_fim": "12:00",
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             },
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.atendimento.refresh_from_db()
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(self.atendimento.data_atendimento, nova_data)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(self.atendimento.horario_inicio, "11:00")
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(self.atendimento.horario_fim, "12:00")
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:     def test_meus_atendimentos_paciente(self):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         # Teste para listar atendimentos do paciente autenticado
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.client.force_authenticate(user=self.user_paciente)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         response = self.client.get(reverse("atendimento-meus-atendimentos"))
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(len(response.data), 1)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(response.data[0]["id"], self.atendimento.id)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:     def test_meus_atendimentos_profissional(self):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         # Teste para listar atendimentos do profissional autenticado
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         response = self.client.get(reverse("atendimento-meus-atendimentos"))
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(len(response.data), 1)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(response.data[0]["id"], self.atendimento.id)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:     def test_notificacao_concluir_atendimento(self, mock_send_notification):
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         # Teste para garantir que a notificação é enviada ao concluir o
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         # atendimento
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:             reverse("atendimento-concluir", kwargs={"pk": self.atendimento.pk})
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/atendimentos/tests.py:         mock_send_notification.assert_called_once()
/mnt/dados/ClinicaAI/backend/apps/voip/views.py
/mnt/dados/ClinicaAI/backend/apps/voip/views.py: from django.shortcuts import render
/mnt/dados/ClinicaAI/backend/apps/voip/views.py: 
/mnt/dados/ClinicaAI/backend/apps/voip/views.py: # Create your views here.
/mnt/dados/ClinicaAI/backend/apps/voip/apps.py
/mnt/dados/ClinicaAI/backend/apps/voip/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/voip/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/voip/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/voip/apps.py: class VoipConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/voip/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/voip/apps.py:     name = "apps.voip"
/mnt/dados/ClinicaAI/backend/apps/voip/models.py
/mnt/dados/ClinicaAI/backend/apps/voip/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/voip/models.py: 
/mnt/dados/ClinicaAI/backend/apps/voip/models.py: # Create your models here.
/mnt/dados/ClinicaAI/backend/apps/voip/admin.py
/mnt/dados/ClinicaAI/backend/apps/voip/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/voip/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/voip/admin.py: # Register your models here.
/mnt/dados/ClinicaAI/backend/apps/voip/tests.py
/mnt/dados/ClinicaAI/backend/apps/voip/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/voip/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/voip/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/exames/views.py
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: # Módulo Exames - Views (views.py)
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: from rest_framework import viewsets, status
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: from rest_framework.permissions import IsAuthenticated
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: from rest_framework.response import Response
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: from rest_framework.decorators import action
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: from .models import Exame
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: from .serializers import ExameSerializer
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: import threading
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: class ExameViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     queryset = Exame.objects.all()
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     serializer_class = ExameSerializer
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     permission_classes = [IsAuthenticated]
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     def get_queryset(self):
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         # Retorna os exames do paciente autenticado ou exames solicitados por
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         # um profissional autenticado
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         user = self.request.user
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         if hasattr(user, 'paciente'):
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:             return Exame.objects.filter(paciente=user.paciente)
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         elif hasattr(user, 'profissional'):
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:             return Exame.objects.filter(
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     profissional_solicitante=user.profissional)
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         return Exame.objects.none()
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     @action(detail=True, methods=['post'],
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:             permission_classes=[IsAuthenticated])
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     def registrar_resultado(self, request, pk=None):
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         # Ação para registrar o resultado de um exame
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         exame = self.get_object()
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         if hasattr(
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     request.user,
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:      'profissional') and exame.profissional_solicitante != request.user.profissional:
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:             return Response(
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     {
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         'detail': 'Você não tem permissão para registrar o resultado deste exame.'},
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:          status=status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         serializer = self.get_serializer(
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     exame, data=request.data, partial=True)
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         serializer.is_valid(raise_exception=True)
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         self.perform_update(serializer)
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         # Enviar notificação para o paciente sobre o resultado do exame
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:             'Resultado de Exame Disponível',
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:             f'O resultado do exame {exame.tipo_exame} está disponível.',
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:             [exame.paciente.usuario.email]
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         )).start()
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         # Adicionar integração com Machine Learning para análise dos resultados
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         self.analisar_resultados(exame)
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         return Response(
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:             {'detail': 'Resultado do exame registrado com sucesso.'}, status=status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     def analisar_resultados(self, exame):
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         # Integração com Machine Learning para analisar resultados de exames
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         # Simulação de chamada para um serviço de IA que analisa os resultados
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         # do exame
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         if exame.resultados:
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:             threading.Thread(
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     target=self.enviar_para_analise_ml, args=(
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         exame,)).start()
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     def enviar_para_analise_ml(self, exame):
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         # Simulação de envio dos resultados do exame para um serviço de Machine Learning
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         # Aqui pode ser feita a integração com um serviço externo de análise de
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         # saúde
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         print(
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:             f"Enviando resultados do exame {exame.tipo_exame} para análise de IA.")
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         # Implementar a lógica real de integração aqui
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     @ action(detail=True, methods=['post'],
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:              permission_classes=[IsAuthenticated])
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     def cancelar_exame(self, request, pk=None):
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         # Ação para cancelar um exame
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         exame= self.get_object()
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         if hasattr(
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     request.user,
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:      'profissional') and exame.profissional_solicitante != request.user.profissional:
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:             return Response(
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:     {
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         'detail': 'Você não tem permissão para cancelar este exame.'},
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:          status = status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         exame.status= 'Cancelado'
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         exame.save()
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         # Enviar notificação para o paciente sobre o cancelamento do exame
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:             'Exame Cancelado',
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:             f'O exame {exame.tipo_exame} foi cancelado.',
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:             [exame.paciente.usuario.email]
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         )).start()
/mnt/dados/ClinicaAI/backend/apps/exames/views.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:         return Response({'detail': 'Exame cancelado com sucesso.'},
/mnt/dados/ClinicaAI/backend/apps/exames/views.py:                         status=status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/exames/models.py
/mnt/dados/ClinicaAI/backend/apps/exames/models.py: # Módulo Exames - Models (models.py)
/mnt/dados/ClinicaAI/backend/apps/exames/models.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/exames/models.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/exames/models.py: import uuid
/mnt/dados/ClinicaAI/backend/apps/exames/models.py: from apps.pacientes.models import Paciente
/mnt/dados/ClinicaAI/backend/apps/exames/models.py: from apps.profissionais.models import Profissional
/mnt/dados/ClinicaAI/backend/apps/exames/models.py: from apps.documentos.models import DocumentosModel
/mnt/dados/ClinicaAI/backend/apps/exames/models.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/models.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/models.py: class Exame(models.Model):
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     uuid = models.UUIDField(default=uuid.uuid4, unique=True, editable=False)
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     paciente = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         Paciente, on_delete=models.CASCADE, related_name="exames"
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     profissional_solicitante = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         Profissional,
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         on_delete=models.SET_NULL,
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         related_name="exames_solicitados",
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         verbose_name="Profissional Solicitante",
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     tipo_exame = models.CharField(max_length=100, verbose_name="Tipo de Exame")
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     data_solicitacao = models.DateField(
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         default=timezone.now, verbose_name="Data de Solicitação"
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     data_realizacao = models.DateField(
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         blank=True, null=True, verbose_name="Data de Realização"
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     resultados = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         verbose_name="Resultados do Exame", blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     documento_resultado = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         DocumentosModel,
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         on_delete=models.SET_NULL,
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         related_name="exames_resultados",
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         verbose_name="Documento do Resultado",
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     observacoes = models.TextField(verbose_name="Observações", blank=True, null=True)
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     status = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         max_length=20,
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         choices=[
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:             ("Solicitado", "Solicitado"),
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:             ("Realizado", "Realizado"),
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:             ("Cancelado", "Cancelado"),
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         ],
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         default="Solicitado",
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     data_criacao = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     data_atualizacao = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/exames/models.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         ordering = ["-data_solicitacao"]
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         verbose_name = "Exame"
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         verbose_name_plural = "Exames"
/mnt/dados/ClinicaAI/backend/apps/exames/models.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         return f"Exame {self.tipo_exame} de {self.paciente.nome_completo}"
/mnt/dados/ClinicaAI/backend/apps/exames/models.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:     def is_realizado(self):
/mnt/dados/ClinicaAI/backend/apps/exames/models.py:         return self.status == "Realizado"
/mnt/dados/ClinicaAI/backend/apps/exames/urls.py
/mnt/dados/ClinicaAI/backend/apps/exames/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/exames/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/exames/urls.py: from .views import ExameViewSet
/mnt/dados/ClinicaAI/backend/apps/exames/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/exames/urls.py: router.register(r"examess", ExameViewSet)
/mnt/dados/ClinicaAI/backend/apps/exames/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/exames/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/exames/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py: # Módulo Exames - Serializers (serializers.py)
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py: from .models import Exame
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py: class ExameSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:         model = Exame
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:         read_only_fields = ["data_criacao", "data_atualizacao"]
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:     def validate(self, data):
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:         # Validação para garantir que a data de realização não seja anterior à
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:         # data de solicitação
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:         if "data_realizacao" in data and data["data_realizacao"]:
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:             if data["data_realizacao"] < data["data_solicitacao"]:
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:                 raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:                     "A data de realização não pode ser anterior à data de solicitação do exame."
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:                 )
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:         # Validação para garantir que se o exame estiver realizado, a data de
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:         # realização deve estar preenchida
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:         if data.get("status") == "Realizado" and not data.get("data_realizacao"):
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:                 "A data de realização deve ser informada quando o status for 'Realizado'."
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:         # Validação para garantir que se o exame estiver realizado, o documento
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:         # do resultado deve estar presente
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:         if data.get("status") == "Realizado" and not data.get("documento_resultado"):
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:                 "O documento do resultado deve ser anexado quando o status for 'Realizado'."
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/serializers.py:         return data
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: # Módulo Exames - Tests (tests.py)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: from rest_framework.test import APITestCase, APIClient
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: from rest_framework import status
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: from django.urls import reverse
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: from .models import Exame
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: from apps.pacientes.models import Paciente
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: from apps.profissionais.models import Profissional
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: import Profissional
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: from django.contrib.auth import get_user_model
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: import uuid
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: from unittest.mock import patch
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: User = get_user_model()
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: class ExameAPITestCase(APITestCase):
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:     def setUp(self):
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         # Configurar usuários, paciente, profissional e exame para os testes
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.client = APIClient()
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.user_paciente = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             username="paciente", password="testpassword"
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.paciente = Paciente.objects.create(
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             usuario=self.user_paciente, nome_completo="Paciente Teste"
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.user_profissional = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             username="profissional", password="testpassword"
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.profissional = Profissional.objects.create(
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             usuario=self.user_profissional, nome_completo="Profissional Teste"
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.user_outro_profissional = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             username="outro_profissional", password="testpassword"
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.outro_profissional = Profissional.objects.create(
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             usuario=self.user_outro_profissional,
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             nome_completo="Outro Profissional Teste",
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.exame = Exame.objects.create(
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             uuid=uuid.uuid4(),
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             paciente=self.paciente,
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             profissional_solicitante=self.profissional,
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             tipo_exame="Hemograma",
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             data_solicitacao=timezone.now().date(),
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.exame_url = reverse("exame-detail", kwargs={"pk": self.exame.pk})
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:     def test_registrar_resultado_exame(self):
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         # Teste para registrar o resultado de um exame
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             reverse("exame-registrar-resultado", kwargs={"pk": self.exame.pk}),
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             {
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:                 "resultados": "Resultados normais",
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:                 "status": "Realizado",
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:                 "data_realizacao": timezone.now().date(),
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             },
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.exame.refresh_from_db()
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(self.exame.status, "Realizado")
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(self.exame.resultados, "Resultados normais")
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:     def test_registrar_resultado_permissao_negada(self):
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         # Teste para garantir que outro profissional não possa registrar o
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         # resultado do exame
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.client.force_authenticate(user=self.outro_profissional)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             reverse("exame-registrar-resultado", kwargs={"pk": self.exame.pk}),
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             {"resultados": "Resultados alterados", "status": "Realizado"},
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:     def test_cancelar_exame(self):
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         # Teste para cancelar um exame
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             reverse("exame-cancelar-exame", kwargs={"pk": self.exame.pk})
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.exame.refresh_from_db()
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(self.exame.status, "Cancelado")
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:     def test_cancelar_exame_por_paciente(self):
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         # Teste para garantir que o paciente não possa cancelar o exame
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.client.force_authenticate(user=self.user_paciente)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             reverse("exame-cancelar-exame", kwargs={"pk": self.exame.pk})
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:     def test_registrar_resultado_sem_data_realizacao(self):
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         # Teste para tentar registrar o resultado sem fornecer a data de
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         # realização
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             reverse("exame-registrar-resultado", kwargs={"pk": self.exame.pk}),
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             {"resultados": "Resultados normais", "status": "Realizado"},
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:     def test_meus_exames_paciente(self):
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         # Teste para listar exames do paciente autenticado
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.client.force_authenticate(user=self.user_paciente)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         response = self.client.get(reverse("exame-list"))
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(len(response.data), 1)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(response.data[0]["id"], self.exame.id)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:     def test_meus_exames_profissional(self):
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         # Teste para listar exames solicitados pelo profissional autenticado
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         response = self.client.get(reverse("exame-list"))
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(len(response.data), 1)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(response.data[0]["id"], self.exame.id)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:     def test_notificacao_registrar_resultado(self, mock_send_notification):
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         # Teste para garantir que a notificação é enviada ao registrar o
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         # resultado do exame
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             reverse("exame-registrar-resultado", kwargs={"pk": self.exame.pk}),
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             {
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:                 "resultados": "Resultados normais",
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:                 "status": "Realizado",
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:                 "data_realizacao": timezone.now().date(),
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             },
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         mock_send_notification.assert_called_once()
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:     def test_notificacao_cancelar_exame(self, mock_send_notification):
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         # Teste para garantir que a notificação é enviada ao cancelar um exame
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             reverse("exame-cancelar-exame", kwargs={"pk": self.exame.pk})
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         mock_send_notification.assert_called_once()
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:     @patch("exames.views.ExameViewSet.analisar_resultados")
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:     def test_integracao_machine_learning(self, mock_analisar_resultados):
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         # Teste para garantir que a integração com Machine Learning seja
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         # acionada ao registrar resultados
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.client.force_authenticate(user=self.user_profissional)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             reverse("exame-registrar-resultado", kwargs={"pk": self.exame.pk}),
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             {
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:                 "resultados": "Resultados normais",
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:                 "status": "Realizado",
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:                 "data_realizacao": timezone.now().date(),
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:             },
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/exames/tests.py:         mock_analisar_resultados.assert_called_once_with(self.exame)
/mnt/dados/ClinicaAI/backend/apps/compras/views.py
/mnt/dados/ClinicaAI/backend/apps/compras/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/compras/views.py: from .models import ComprasModel
/mnt/dados/ClinicaAI/backend/apps/compras/views.py: from .serializers import ComprasSerializer
/mnt/dados/ClinicaAI/backend/apps/compras/views.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/views.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/views.py: class ComprasViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/compras/views.py:     queryset = ComprasModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/compras/views.py:     serializer_class = ComprasSerializer
/mnt/dados/ClinicaAI/backend/apps/compras/apps.py
/mnt/dados/ClinicaAI/backend/apps/compras/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/compras/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/apps.py: class ComprasConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/compras/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/compras/apps.py:     name = "apps.compras"
/mnt/dados/ClinicaAI/backend/apps/compras/models.py
/mnt/dados/ClinicaAI/backend/apps/compras/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/compras/models.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/models.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/models.py: class ComprasModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/compras/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/compras/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/compras/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/compras/models.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/compras/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:             name="ComprasModel",
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/compras/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/compras/urls.py
/mnt/dados/ClinicaAI/backend/apps/compras/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/compras/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/compras/urls.py: from .views import ComprasViewSet
/mnt/dados/ClinicaAI/backend/apps/compras/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/compras/urls.py: router.register(r"compras", ComprasViewSet)
/mnt/dados/ClinicaAI/backend/apps/compras/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/compras/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/compras/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/compras/admin.py
/mnt/dados/ClinicaAI/backend/apps/compras/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/compras/admin.py: from .models import ComprasModel
/mnt/dados/ClinicaAI/backend/apps/compras/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/admin.py: @admin.register(ComprasModel)
/mnt/dados/ClinicaAI/backend/apps/compras/admin.py: class ComprasAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/compras/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/compras/serializers.py
/mnt/dados/ClinicaAI/backend/apps/compras/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/compras/serializers.py: from .models import ComprasModel
/mnt/dados/ClinicaAI/backend/apps/compras/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/serializers.py: class ComprasSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/compras/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/compras/serializers.py:         model = ComprasModel
/mnt/dados/ClinicaAI/backend/apps/compras/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/compras/tests.py
/mnt/dados/ClinicaAI/backend/apps/compras/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/compras/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/compras/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py: # Incremento 3: Melhorias nas Visualizações (views.py)
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py: from rest_framework import viewsets, permissions, filters
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py: from rest_framework.pagination import PageNumberPagination
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py: from django_filters.rest_framework import DjangoFilterBackend
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py: from .models import Paciente
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py: from .serializers import PacienteSerializer
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py: class PacientePagination(PageNumberPagination):
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:     page_size = 10
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:     page_size_query_param = "page_size"
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:     max_page_size = 100
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py: class PacienteViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:     queryset = Paciente.objects.all()
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:     serializer_class = PacienteSerializer
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:     permission_classes = [permissions.IsAuthenticated]
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:     pagination_class = PacientePagination
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:     filter_backends = [
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:         DjangoFilterBackend,
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:         filters.SearchFilter,
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:         filters.OrderingFilter,
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:     ]
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:     filterset_fields = ["sexo", "estado_civil", "cidade", "estado"]
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:     search_fields = ["nome_completo", "cpf", "email"]
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:     ordering_fields = ["nome_completo", "data_nascimento", "created_at"]
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:     ordering = ["nome_completo"]
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:     def get_permissions(self):
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:         if self.action in ["list", "retrieve"]:
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:             return [permissions.IsAuthenticated()]
/mnt/dados/ClinicaAI/backend/apps/pacientes/views.py:         return [permissions.IsAdminUser()]
/mnt/dados/ClinicaAI/backend/apps/pacientes/apps.py
/mnt/dados/ClinicaAI/backend/apps/pacientes/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/pacientes/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/apps.py: class PacientesConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/pacientes/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/pacientes/apps.py:     name = "apps.pacientes"
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: from cryptography.fernet import Fernet
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: from django.conf import settings
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: from django.utils.translation import gettext_lazy as _
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: import uuid
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: # Gerar uma chave de criptografia para uso nos campos sensíveis (a chave deve ser armazenada em um local seguro)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: # Aqui estamos simulando a recuperação da chave do arquivo de configurações
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: cipher_suite = Fernet(settings.ENCRYPTION_KEY)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: class Paciente(models.Model):
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     # Identificador Único Global
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     uuid = models.UUIDField(default=uuid.uuid4, unique=True, editable=False)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     # Dados Pessoais
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     nome_completo = models.CharField(_("Nome Completo"), max_length=255)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     foto = models.ImageField(
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         _("Foto"), upload_to="pacientes/fotos/", blank=True, null=True
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     cpf = models.CharField(_("CPF"), max_length=255, unique=True)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     rg = models.CharField(_("RG"), max_length=255, blank=True)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     data_nascimento = models.DateField(_("Data de Nascimento"))
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     sexo = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         _("Sexo"),
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         max_length=1,
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         choices=[
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:             ("M", "Masculino"),
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:             ("F", "Feminino"),
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:             ("O", "Outro"),
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         ],
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     estado_civil = models.CharField(_("Estado Civil"), max_length=50, blank=True)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     profissao = models.CharField(_("Profissão"), max_length=100, blank=True)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     nacionalidade = models.CharField(_("Nacionalidade"), max_length=100, blank=True)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     naturalidade = models.CharField(_("Naturalidade"), max_length=100, blank=True)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     endereco = models.CharField(_("Endereço"), max_length=255)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     numero = models.CharField(_("Número"), max_length=10)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     complemento = models.CharField(_("Complemento"), max_length=100, blank=True)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     bairro = models.CharField(_("Bairro"), max_length=100)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     cidade = models.CharField(_("Cidade"), max_length=100)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     estado = models.CharField(_("Estado"), max_length=100)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     cep = models.CharField(_("CEP"), max_length=9, blank=True)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     telefone_residencial = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         _("Telefone Residencial"), max_length=20, blank=True
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     telefone_celular = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         _("Telefone Celular"), max_length=20, blank=True
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     email = models.EmailField(_("E-mail"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     contato_emergencia = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         _("Contato de Emergência"), max_length=255, blank=True
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     telefone_emergencia = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         _("Telefone de Emergência"), max_length=20, blank=True
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     # Dados Complementares
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     nome_mae = models.CharField(_("Nome da Mãe"), max_length=255, blank=True)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     nome_pai = models.CharField(_("Nome do Pai"), max_length=255, blank=True)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     consentimento_lgpd = models.BooleanField(_("Consentimento LGPD"), default=False)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     observacoes = models.TextField(_("Observações"), blank=True)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     # Relacionamentos
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     prontuario = models.OneToOneField(
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         "prontuarios.Prontuario",
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         on_delete=models.SET_NULL,
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         related_name="paciente",
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     agendamentos = models.ManyToManyField(
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         "agendamentos.Agendamento", blank=True, related_name="agendamentos_pacientes"
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     # Auditoria
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     created_at = models.DateTimeField(_("Data de Criação"), auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     updated_at = models.DateTimeField(_("Última Atualização"), auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         app_label = "pacientes"
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         verbose_name = _("Paciente")
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         verbose_name_plural = _("Pacientes")
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         return self.nome_completo
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     def save(self, *args, **kwargs):
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         # Criptografar CPF e RG antes de salvar
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         if self.cpf:
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:             self.cpf = cipher_suite.encrypt(self.cpf.encode()).decode()
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         if self.rg:
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:             self.rg = cipher_suite.encrypt(self.rg.encode()).decode()
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         super().save(*args, **kwargs)
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     def decrypt_cpf(self):
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         # Descriptografar o CPF para uso
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         if self.cpf:
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:             return cipher_suite.decrypt(self.cpf.encode()).decode()
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         return None
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:     def decrypt_rg(self):
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         # Descriptografar o RG para uso
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         if self.rg:
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:             return cipher_suite.decrypt(self.rg.encode()).decode()
/mnt/dados/ClinicaAI/backend/apps/pacientes/models.py:         return None
/mnt/dados/ClinicaAI/backend/apps/pacientes/urls.py
/mnt/dados/ClinicaAI/backend/apps/pacientes/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/pacientes/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/pacientes/urls.py: from .views import PacienteViewSet
/mnt/dados/ClinicaAI/backend/apps/pacientes/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/pacientes/urls.py: router.register(r"pacientes", PacienteViewSet)
/mnt/dados/ClinicaAI/backend/apps/pacientes/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/pacientes/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/pacientes/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/pacientes/admin.py
/mnt/dados/ClinicaAI/backend/apps/pacientes/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/pacientes/admin.py: from .models import Paciente
/mnt/dados/ClinicaAI/backend/apps/pacientes/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/admin.py: admin.site.register(Paciente)
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py: # Incremento 2: Melhorias no Serializador (serializers.py)
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py: from .models import Paciente
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py: from django.core.validators import validate_email
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py: import re
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py: class PacienteSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:         model = Paciente
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:         fields = [
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "uuid",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "nome_completo",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "foto",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "data_nascimento",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "sexo",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "estado_civil",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "profissao",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "nacionalidade",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "naturalidade",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "endereco",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "numero",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "complemento",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "bairro",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "cidade",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "estado",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "cep",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "telefone_residencial",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "telefone_celular",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "email",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "contato_emergencia",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "telefone_emergencia",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "nome_mae",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "nome_pai",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "consentimento_lgpd",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "observacoes",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "created_at",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             "updated_at",
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:         ]
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:         read_only_fields = ["created_at", "updated_at"]
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:     def validate_cpf(self, value):
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:         # Validação simples de CPF (apenas para garantir formato válido)
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:         if not re.match(r"\d{3}\.\d{3}\.\d{3}-\d{2}", value):
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:                 "CPF deve estar no formato XXX.XXX.XXX-XX"
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:         return value
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:     def validate_email(self, value):
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:         # Validação de e-mail
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:         try:
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             validate_email(value)
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:         except BaseException:
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:             raise serializers.ValidationError("E-mail inválido")
/mnt/dados/ClinicaAI/backend/apps/pacientes/serializers.py:         return value
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py: # Incremento 4: Melhorias no Módulo de Testes (tests.py)
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py: from rest_framework.test import APITestCase
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py: from rest_framework import status
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py: from django.urls import reverse
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py: from django.contrib.auth.models import User
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py: from .models import Paciente
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py: class PacienteTests(APITestCase):
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:     def setUp(self):
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         # Criação de usuário para autenticação
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.user = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:             username="testuser", password="testpassword"
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.admin_user = User.objects.create_superuser(
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:             username="admin", password="adminpassword"
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.client.login(username="testuser", password="testpassword")
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         # Dados do paciente para testes
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.paciente_data = {
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:             "nome_completo": "João da Silva",
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:             "cpf": "123.456.789-00",
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:             "data_nascimento": "1980-01-01",
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:             "sexo": "M",
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:             "estado_civil": "Solteiro",
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:             "endereco": "Rua A",
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:             "numero": "123",
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:             "bairro": "Centro",
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:             "cidade": "São Paulo",
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:             "estado": "SP",
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:             "telefone_celular": "(11) 91234-5678",
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:             "email": "joao.silva@example.com",
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:             "consentimento_lgpd": True,
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         }
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:     def test_create_paciente_unauthorized(self):
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         # Tentativa de criação de paciente sem ser administrador
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         response = self.client.post(reverse("paciente-list"), self.paciente_data)
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:     def test_create_paciente_authorized(self):
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         # Criação de paciente como administrador
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.client.login(username="admin", password="adminpassword")
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         response = self.client.post(reverse("paciente-list"), self.paciente_data)
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.assertEqual(response.status_code, status.HTTP_201_CREATED)
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.assertEqual(Paciente.objects.count(), 1)
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.assertEqual(Paciente.objects.get().nome_completo, "João da Silva")
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:     def test_list_pacientes(self):
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         # Listar pacientes após criação
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.client.login(username="admin", password="adminpassword")
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.client.post(reverse("paciente-list"), self.paciente_data)
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         response = self.client.get(reverse("paciente-list"))
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.assertEqual(len(response.data["results"]), 1)
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:     def test_permissions(self):
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         # Verificar permissões de acesso para listagem
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         response = self.client.get(reverse("paciente-list"))
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.client.logout()
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         response = self.client.get(reverse("paciente-list"))
/mnt/dados/ClinicaAI/backend/apps/pacientes/tests.py:         self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)
/mnt/dados/ClinicaAI/backend/apps/planilhas/views.py
/mnt/dados/ClinicaAI/backend/apps/planilhas/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/planilhas/views.py: from .models import PlanilhasModel
/mnt/dados/ClinicaAI/backend/apps/planilhas/views.py: from .serializers import PlanilhasSerializer
/mnt/dados/ClinicaAI/backend/apps/planilhas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/views.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/views.py: class PlanilhasViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/planilhas/views.py:     queryset = PlanilhasModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/planilhas/views.py:     serializer_class = PlanilhasSerializer
/mnt/dados/ClinicaAI/backend/apps/planilhas/apps.py
/mnt/dados/ClinicaAI/backend/apps/planilhas/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/planilhas/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/apps.py: class PlanilhasConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/planilhas/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/planilhas/apps.py:     name = "apps.planilhas"
/mnt/dados/ClinicaAI/backend/apps/planilhas/models.py
/mnt/dados/ClinicaAI/backend/apps/planilhas/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/planilhas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/models.py: class PlanilhasModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/planilhas/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/planilhas/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/planilhas/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/planilhas/models.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/planilhas/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:             name="PlanilhasModel",
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/planilhas/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/planilhas/urls.py
/mnt/dados/ClinicaAI/backend/apps/planilhas/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/planilhas/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/planilhas/urls.py: from .views import PlanilhasViewSet
/mnt/dados/ClinicaAI/backend/apps/planilhas/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/planilhas/urls.py: router.register(r"planilhas", PlanilhasViewSet)
/mnt/dados/ClinicaAI/backend/apps/planilhas/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/planilhas/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/planilhas/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/planilhas/admin.py
/mnt/dados/ClinicaAI/backend/apps/planilhas/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/planilhas/admin.py: from .models import PlanilhasModel
/mnt/dados/ClinicaAI/backend/apps/planilhas/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/admin.py: @admin.register(PlanilhasModel)
/mnt/dados/ClinicaAI/backend/apps/planilhas/admin.py: class PlanilhasAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/planilhas/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/planilhas/serializers.py
/mnt/dados/ClinicaAI/backend/apps/planilhas/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/planilhas/serializers.py: from .models import PlanilhasModel
/mnt/dados/ClinicaAI/backend/apps/planilhas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/serializers.py: class PlanilhasSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/planilhas/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/planilhas/serializers.py:         model = PlanilhasModel
/mnt/dados/ClinicaAI/backend/apps/planilhas/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/planilhas/tests.py
/mnt/dados/ClinicaAI/backend/apps/planilhas/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/planilhas/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/planilhas/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/views.py
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/views.py: from django.shortcuts import render
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/views.py: 
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/views.py: # Create your views here.
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/apps.py
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/apps.py: class Automacao_marketingConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/apps.py:     name = "apps.automacao_marketing"
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/models.py
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/models.py: 
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/models.py: # Create your models here.
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/admin.py
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/admin.py: # Register your models here.
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/tests.py
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/automacao_marketing/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: # Módulo Agendamentos - Views (views.py)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: from rest_framework import viewsets, status
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: from rest_framework.permissions import IsAuthenticated
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: from rest_framework.response import Response
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: from rest_framework.decorators import action
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: from .models import Agendamento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: from .serializers import AgendamentoSerializer
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: from django.core.mail import send_mail
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: from django.conf import settings
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: import logging
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: import threading
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: import uuid
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: logger = logging.getLogger(__name__)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: class AgendamentoViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     serializer_class = AgendamentoSerializer
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     permission_classes = [IsAuthenticated]
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     def get_queryset(self):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         # Retorna os agendamentos futuros do usuário autenticado (paciente ou
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         # profissional)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         user = self.request.user
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         if hasattr(user, 'paciente'):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             return Agendamento.objects.filter(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     paciente=user.paciente,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:      data_agendamento__gte=timezone.now().date())
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         elif hasattr(user, 'profissional'):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             return Agendamento.objects.filter(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     profissional=user.profissional,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:      data_agendamento__gte=timezone.now().date())
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         return Agendamento.objects.none()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     @action(detail=True, methods=['post'],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             permission_classes=[IsAuthenticated])
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     def confirmar(self, request, pk=None):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         # Ação para confirmar o agendamento pelo paciente
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         agendamento = self.get_object()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         if hasattr(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     request.user,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:      'paciente') and agendamento.paciente != request.user.paciente:
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             return Response(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     {
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         'detail': 'Você não tem permissão para confirmar este agendamento.'},
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:          status=status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         if agendamento.confirmado_pelo_paciente:
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             return Response({'detail': 'Agendamento já foi confirmado.'},
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:                             status=status.HTTP_400_BAD_REQUEST)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         agendamento.confirmado_pelo_paciente = True
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         agendamento.save()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         # Enviar notificação de confirmação (multicanal)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             'Confirmação de Agendamento',
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             f'Seu agendamento com {agendamento.profissional.nome_completo} foi confirmado.',
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             [agendamento.paciente.usuario.email,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:      agendamento.paciente.usuario.telefone],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             {'whatsapp': agendamento.paciente.usuario.whatsapp,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:                 'telegram': agendamento.paciente.usuario.telegram}
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         )).start()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         logger.info(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             f"Agendamento {agendamento.uuid} confirmado pelo paciente {request.user.id}")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         return Response(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             {'detail': 'Agendamento confirmado com sucesso.'}, status=status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     @ action(detail=True, methods=['post'],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:              permission_classes=[IsAuthenticated])
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     def cancelar(self, request, pk=None):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         # Ação para cancelar um agendamento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         agendamento= self.get_object()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         motivo= request.data.get('motivo_cancelamento')
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         if not motivo:
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             return Response({'detail': 'Motivo do cancelamento deve ser informado.'},
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:                             status=status.HTTP_400_BAD_REQUEST)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         # Verificar permissões de cancelamento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         if hasattr(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     request.user,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:      'paciente') and agendamento.paciente != request.user.paciente:
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             return Response(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     {
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         'detail': 'Você não tem permissão para cancelar este agendamento.'},
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:          status = status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         if hasattr(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     request.user,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:      'profissional') and agendamento.profissional != request.user.profissional:
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             return Response(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     {
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         'detail': 'Você não tem permissão para cancelar este agendamento.'},
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:          status = status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         agendamento.status= 'Cancelado'
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         agendamento.motivo_cancelamento= motivo
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         agendamento.save()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         # Enviar notificação de cancelamento (multicanal)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             'Cancelamento de Agendamento',
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             f'Seu agendamento com {agendamento.profissional.nome_completo} foi cancelado. Motivo: {motivo}',
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             [agendamento.paciente.usuario.email,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:      agendamento.paciente.usuario.telefone],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             {'whatsapp': agendamento.paciente.usuario.whatsapp,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:                 'telegram': agendamento.paciente.usuario.telegram}
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         )).start()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         logger.info(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             f"Agendamento {agendamento.uuid} cancelado pelo usuário {request.user.id} com motivo: {motivo}")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         return Response(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             {'detail': 'Agendamento cancelado com sucesso.'}, status=status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     @ action(detail=True, methods=['post'],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:              permission_classes=[IsAuthenticated])
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     def reagendar(self, request, pk=None):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         # Ação para reagendar um agendamento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         agendamento= self.get_object()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         nova_data= request.data.get('data_agendamento')
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         novo_horario_inicio= request.data.get('horario_inicio')
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         novo_horario_fim= request.data.get('horario_fim')
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         if not nova_data or not novo_horario_inicio or not novo_horario_fim:
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             return Response({'detail': 'Dados de reagendamento incompletos.'},
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:                             status=status.HTTP_400_BAD_REQUEST)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         # Validação para garantir que a nova data e horário sejam futuros
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         if nova_data < timezone.now().date() or (nova_data == timezone.now().date()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:                                     and novo_horario_inicio <= timezone.now().time()):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             return Response({'detail': 'A nova data e horário devem ser no futuro.'},
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:                             status=status.HTTP_400_BAD_REQUEST)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         # Validação para garantir que a capacidade da sala não seja excedida
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         # (Exemplo para IoT)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         if agendamento.sala_atendimento:
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             capacidade_sala= agendamento.sala_atendimento.capacidade  # Supondo que o modelo de sala tenha um campo 'capacidade'
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             ocupacao_atual= Agendamento.objects.filter(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:                 data_agendamento=nova_data,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:                 horario_inicio__lt=novo_horario_fim,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:                 horario_fim__gt=novo_horario_inicio,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:                 sala_atendimento=agendamento.sala_atendimento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             ).count()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             if ocupacao_atual >= capacidade_sala:
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:                 return Response(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     {
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         'detail': 'A capacidade da sala de atendimento foi excedida.'},
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:          status=status.HTTP_400_BAD_REQUEST)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         # Atualizar o agendamento com a nova data e horário
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         agendamento.data_agendamento= nova_data
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         agendamento.horario_inicio= novo_horario_inicio
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         agendamento.horario_fim= novo_horario_fim
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         agendamento.status= 'Agendado'
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         agendamento.motivo_cancelamento= ''  # Limpar motivo de cancelamento, se houver
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         agendamento.save()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         # Enviar notificação de reagendamento (multicanal)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             'Reagendamento de Consulta',
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             f'Seu agendamento com {agendamento.profissional.nome_completo} foi reagendado para {nova_data} às {novo_horario_inicio}.',
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             [agendamento.paciente.usuario.email,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:      agendamento.paciente.usuario.telefone],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             {'whatsapp': agendamento.paciente.usuario.whatsapp,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:                 'telegram': agendamento.paciente.usuario.telegram}
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         )).start()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         logger.info(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             f"Agendamento {agendamento.uuid} reagendado pelo usuário {request.user.id} para {nova_data} às {novo_horario_inicio}")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         return Response(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             {'detail': 'Agendamento reagendado com sucesso.'}, status=status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     @ action(detail=False, methods=['get'],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:              permission_classes=[IsAuthenticated])
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     def meus_agendamentos(self, request):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         # Retorna os agendamentos do paciente ou profissional autenticado
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         if hasattr(request.user, 'paciente'):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             agendamentos= Agendamento.objects.filter(paciente=request.user.paciente)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         elif hasattr(request.user, 'profissional'):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             agendamentos= Agendamento.objects.filter(profissional=request.user.profissional)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         else:
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:             return Response(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:     {
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         'detail': 'Você não tem permissão para visualizar agendamentos.'},
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:          status=status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         serializer= self.get_serializer(agendamentos, many=True)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/views.py:         return Response(serializer.data)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/apps.py
/mnt/dados/ClinicaAI/backend/apps/agendamentos/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/agendamentos/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/apps.py: class AgendamentosConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/agendamentos/apps.py:     name = "apps.agendamentos"
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: from django.utils.translation import gettext_lazy as _
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: from django.conf import settings
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: from apps.profissionais.models import Profissional
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: from apps.pacientes.models import Paciente
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: import uuid
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: class Agendamento(models.Model):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     # Identificador Único Global
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     uuid = models.UUIDField(default=uuid.uuid4, unique=True, editable=False)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     paciente = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         Paciente, on_delete=models.CASCADE, related_name="agendamentos_paciente"
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     profissional = models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         Profissional, on_delete=models.CASCADE, related_name="agendamentos_profissional"
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     # Dados do Agendamento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     data_agendamento = models.DateField(verbose_name=_("Data do Agendamento"))
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     horario_inicio = models.TimeField(verbose_name=_("Horário de Início"))
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     horario_fim = models.TimeField(verbose_name=_("Horário de Fim"))
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     tipo_consulta = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         max_length=50,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         choices=[
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:             ("Consulta Inicial", "Consulta Inicial"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:             ("Retorno", "Retorno"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:             ("Exame", "Exame"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:             ("Teleconsulta", "Teleconsulta"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         ],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         default="Consulta Inicial",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         verbose_name=_("Tipo de Consulta"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     local_atendimento = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         max_length=50,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         choices=[
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:             ("Presencial", "Presencial"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:             ("Telemedicina", "Telemedicina"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:             ("Visita Domiciliar", "Visita Domiciliar"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         ],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         default="Presencial",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         verbose_name=_("Local do Atendimento"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     status = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         max_length=20,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         choices=[
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:             ("Agendado", "Agendado"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:             ("Cancelado", "Cancelado"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:             ("Concluído", "Concluído"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         ],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         default="Agendado",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         verbose_name=_("Status do Agendamento"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     motivo_cancelamento = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         blank=True, null=True, verbose_name=_("Motivo do Cancelamento")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     confirmado_pelo_paciente = models.BooleanField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         default=False, verbose_name=_("Confirmado pelo Paciente")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     observacoes = models.TextField(blank=True, verbose_name=_("Observações"))
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     sintomas_iniciais = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         blank=True, verbose_name=_("Sintomas Iniciais")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     tipo_atendimento = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         max_length=20,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         choices=[("Emergencial", "Emergencial"), ("Rotina", "Rotina")],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         default="Rotina",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         verbose_name=_("Tipo de Atendimento"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     motivo_consulta = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         max_length=255, blank=True, verbose_name=_("Motivo da Consulta")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     # Dados Financeiros
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     meio_pagamento = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         max_length=50,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         choices=[
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:             ("Cartão de Crédito", "Cartão de Crédito"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:             ("Convênio", "Convênio"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:             ("Dinheiro", "Dinheiro"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:             ("PIX", "PIX"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         ],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         verbose_name=_("Meio de Pagamento"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     status_financeiro = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         max_length=20,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         choices=[("Pago", "Pago"), ("Pendente", "Pendente")],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         default="Pendente",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         verbose_name=_("Status Financeiro"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     # Notificações e Lembretes
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     canal_preferencial = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         max_length=20,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         choices=[("WhatsApp", "WhatsApp"), ("SMS", "SMS"), ("Email", "Email")],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         default="WhatsApp",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         verbose_name=_("Canal Preferencial de Notificação"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     lembrete_enviado_em = models.DateTimeField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         blank=True, null=True, verbose_name=_("Lembrete Enviado em")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     status_notificacao = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         max_length=20,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         choices=[("Enviado", "Enviado"), ("Lido", "Lido"), ("Pendente", "Pendente")],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         default="Pendente",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         verbose_name=_("Status da Notificação"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     # Automação e Integração IoT
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     equipamentos_necessarios = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         max_length=255, blank=True, verbose_name=_("Equipamentos Necessários")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     sala_atendimento = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         max_length=50, blank=True, verbose_name=_("Sala de Atendimento")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     dispositivo_iot = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         max_length=100, blank=True, verbose_name=_("Dispositivo IoT Necessário")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     # Dados para IA e Machine Learning
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     probabilidade_cancelamento = models.DecimalField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         max_digits=5,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         decimal_places=2,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         null=True,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         blank=True,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         verbose_name=_("Probabilidade de Cancelamento (%)"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     tempo_espera_estimado = models.DurationField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         blank=True, null=True, verbose_name=_("Tempo de Espera Estimado")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     preferencias_paciente = models.CharField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         max_length=255, blank=True, verbose_name=_("Preferências do Paciente")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     confirmar_atendimento_automatico = models.BooleanField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         default=False, verbose_name=_("Confirmar Atendimento Automaticamente")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     # Histórico de Modificações
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     log_modificacoes = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         blank=True, verbose_name=_("Histórico de Modificações")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     historico_cancelamentos = models.TextField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         blank=True, verbose_name=_("Histórico de Cancelamentos")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     # Pré-Check-in
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     pre_checkin_realizado = models.BooleanField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         default=False, verbose_name=_("Pré-Check-in Realizado")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     # Dados de Controle
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     criado_em = models.DateTimeField(auto_now_add=True, verbose_name=_("Criado em"))
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     atualizado_em = models.DateTimeField(auto_now=True, verbose_name=_("Atualizado em"))
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         verbose_name = _("Agendamento")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         verbose_name_plural = _("Agendamentos")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         unique_together = (("profissional", "data_agendamento", "horario_inicio"),)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/models.py:         return f"Agendamento de {self.paciente.nome_completo} com {self.profissional.nome_completo} em {self.data_agendamento} às {self.horario_inicio}"
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 17:48
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py: import django.db.models.deletion
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:     dependencies = [
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:         ("pacientes", "0001_initial"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:             name="Agendamento",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                 ("data_horario", models.DateTimeField()),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                 ("tipo_consulta", models.CharField(max_length=50)),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                     "status",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                     models.CharField(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                         choices=[
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                             ("agendado", "Agendado"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                             ("cancelado", "Cancelado"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                             ("realizado", "Realizado"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                         ],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                         max_length=20,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                 ("observacoes", models.TextField(blank=True)),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                     "paciente",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                     models.ForeignKey(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                         on_delete=django.db.models.deletion.CASCADE,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                         related_name="agendamentos",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                         to="pacientes.paciente",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/agendamentos/urls.py
/mnt/dados/ClinicaAI/backend/apps/agendamentos/urls.py: # Módulo Agendamentos - URLs (urls.py)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/agendamentos/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/agendamentos/urls.py: from .views import AgendamentoViewSet
/mnt/dados/ClinicaAI/backend/apps/agendamentos/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/urls.py: router.register(r"agendamentos", AgendamentoViewSet, basename="agendamento")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/agendamentos/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/agendamentos/admin.py
/mnt/dados/ClinicaAI/backend/apps/agendamentos/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/agendamentos/admin.py: from .models import Agendamento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/admin.py: admin.site.register(Agendamento)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: # Módulo Agendamentos - Serializers (serializers.py)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: from .models import Agendamento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: import uuid
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: class AgendamentoSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         model = Agendamento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:     def validate(self, data):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # Validação para garantir que a data e horário do agendamento sejam
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # futuros
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         if data["data_agendamento"] < timezone.now().date():
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             raise serializers.ValidationError("A data do agendamento deve ser futura.")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         if (
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             data["data_agendamento"] == timezone.now().date()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             and data["horario_inicio"] <= timezone.now().time()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         ):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             raise serializers.ValidationError("O horário de início deve ser no futuro.")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # Validação para garantir que o horário de fim seja posterior ao
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # horário de início
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         if data["horario_fim"] <= data["horario_inicio"]:
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 "O horário de fim deve ser posterior ao horário de início."
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # Validação para garantir que não haja sobreposição de agendamentos
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # para o mesmo profissional
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         agendamentos_existentes = Agendamento.objects.filter(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             profissional=data["profissional"],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             data_agendamento=data["data_agendamento"],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             horario_inicio__lt=data["horario_fim"],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             horario_fim__gt=data["horario_inicio"],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         ).exclude(uuid=data.get("uuid"))
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         if agendamentos_existentes.exists():
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 "O horário do agendamento conflita com outro agendamento existente para este profissional."
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # Validação para garantir que não haja sobreposição de agendamentos
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # para o mesmo paciente
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         agendamentos_paciente = Agendamento.objects.filter(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             paciente=data["paciente"],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             data_agendamento=data["data_agendamento"],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             horario_inicio__lt=data["horario_fim"],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             horario_fim__gt=data["horario_inicio"],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         ).exclude(uuid=data.get("uuid"))
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         if agendamentos_paciente.exists():
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 "O paciente já possui um agendamento no mesmo horário."
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # Validação para garantir que o status financeiro esteja correto se o
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # agendamento for concluído
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         if data["status"] == "Concluído" and data["status_financeiro"] != "Pago":
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 "Agendamentos concluídos devem ter o status financeiro como 'Pago'."
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # Validação para garantir que o motivo do cancelamento esteja
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # preenchido se o agendamento for cancelado
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         if data["status"] == "Cancelado" and not data.get("motivo_cancelamento"):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 "O motivo do cancelamento deve ser informado quando o agendamento for cancelado."
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # Validação para garantir que o canal preferencial de notificação seja
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # consistente com as preferências do paciente
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         if data["canal_preferencial"] not in ["WhatsApp", "SMS", "Email"]:
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 "Canal preferencial de notificação inválido."
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # Validação para garantir a disponibilidade dos equipamentos e sala de
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # atendimento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         if data.get("equipamentos_necessarios") or data.get("sala_atendimento"):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             conflitos = Agendamento.objects.filter(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 data_agendamento=data["data_agendamento"],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 horario_inicio__lt=data["horario_fim"],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 horario_fim__gt=data["horario_inicio"],
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 sala_atendimento=data.get("sala_atendimento"),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             ).exclude(uuid=data.get("uuid"))
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             if conflitos.exists():
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                     "A sala de atendimento ou equipamentos necessários já estão reservados para outro agendamento no mesmo horário."
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # Validação para garantir que o profissional não esteja de férias ou
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # ausente na data de agendamento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         if (
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             hasattr(data["profissional"], "ferias")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             and data["profissional"]
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             .ferias.filter(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 inicio__lte=data["data_agendamento"], fim__gte=data["data_agendamento"]
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             .exists()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         ):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 "O profissional está de férias ou ausente na data selecionada."
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # Validação para limitar o número de agendamentos do mesmo paciente no
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # mesmo dia
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         limite_agendamentos_paciente = Agendamento.objects.filter(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             paciente=data["paciente"], data_agendamento=data["data_agendamento"]
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         ).count()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         if limite_agendamentos_paciente >= 3:
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 "O paciente já possui muitos agendamentos para o mesmo dia."
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # Validação de pré-check-in
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         if data.get("pre_checkin_realizado") and not data.get(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             "confirmado_pelo_paciente"
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         ):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 "O pré-check-in não pode ser realizado sem a confirmação do paciente."
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # Validação para garantir que o agendamento não ocorra em feriados ou
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # dias bloqueados
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         if (
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             hasattr(data["profissional"], "dias_bloqueados")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             and data["profissional"]
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             .dias_bloqueados.filter(data=data["data_agendamento"])
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             .exists()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         ):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 "O agendamento não pode ser feito em um feriado ou dia bloqueado para este profissional."
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # Validação para garantir que o status seja consistente com a
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         # confirmação do paciente
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         if data["status"] == "Concluído" and not data.get("confirmado_pelo_paciente"):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             raise serializers.ValidationError(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:                 "O agendamento não pode ser concluído sem a confirmação do paciente."
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:             )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/serializers.py:         return data
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: # Módulo Agendamentos - Tests (tests.py)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: from rest_framework.test import APITestCase, APIClient
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: from rest_framework import status
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: from django.urls import reverse
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: from .models import Agendamento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: from apps.pacientes.models import Paciente
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: from apps.profissionais.models import Profissional
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: import Profissional
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: from django.utils import timezone
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: from django.contrib.auth import get_user_model
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: import uuid
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: from unittest.mock import patch
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: User = get_user_model()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: class AgendamentoAPITestCase(APITestCase):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:     def setUp(self):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # Configurar usuários, paciente, profissional e agendamento para os
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # testes
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.client = APIClient()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.user_paciente = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             username="paciente", password="testpassword"
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.paciente = Paciente.objects.create(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             usuario=self.user_paciente, nome_completo="Paciente Teste"
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.user_profissional = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             username="profissional", password="testpassword"
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.profissional = Profissional.objects.create(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             usuario=self.user_profissional, nome_completo="Profissional Teste"
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.user_outro_paciente = User.objects.create_user(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             username="outro_paciente", password="testpassword"
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.outro_paciente = Paciente.objects.create(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             usuario=self.user_outro_paciente, nome_completo="Outro Paciente Teste"
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.agendamento = Agendamento.objects.create(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             uuid=uuid.uuid4(),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             paciente=self.paciente,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             profissional=self.profissional,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             data_agendamento=timezone.now().date() + timezone.timedelta(days=1),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             horario_inicio="10:00",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             horario_fim="11:00",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             tipo_consulta="Consulta Inicial",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.agendamento_url = reverse(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             "agendamento-detail", kwargs={"pk": self.agendamento.pk}
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:     def test_confirmar_agendamento(self):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # Teste para confirmar um agendamento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.client.force_authenticate(user=self.user_paciente)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             reverse("agendamento-confirmar", kwargs={"pk": self.agendamento.pk})
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.agendamento.refresh_from_db()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertTrue(self.agendamento.confirmado_pelo_paciente)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:     def test_confirmar_agendamento_outro_paciente(self):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # Teste para garantir que um paciente não possa confirmar agendamento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # de outro paciente
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.client.force_authenticate(user=self.user_outro_paciente)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             reverse("agendamento-confirmar", kwargs={"pk": self.agendamento.pk})
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:     def test_cancelar_agendamento(self):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # Teste para cancelar um agendamento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.client.force_authenticate(user=self.user_paciente)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             reverse("agendamento-cancelar", kwargs={"pk": self.agendamento.pk}),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             {"motivo_cancelamento": "Imprevisto"},
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.agendamento.refresh_from_db()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(self.agendamento.status, "Cancelado")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(self.agendamento.motivo_cancelamento, "Imprevisto")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:     def test_cancelar_agendamento_outro_paciente(self):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # Teste para garantir que um paciente não possa cancelar agendamento de
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # outro paciente
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.client.force_authenticate(user=self.user_outro_paciente)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             reverse("agendamento-cancelar", kwargs={"pk": self.agendamento.pk}),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             {"motivo_cancelamento": "Imprevisto"},
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:     def test_reagendar_agendamento(self):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # Teste para reagendar um agendamento
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.client.force_authenticate(user=self.user_paciente)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         nova_data = timezone.now().date() + timezone.timedelta(days=2)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             reverse("agendamento-reagendar", kwargs={"pk": self.agendamento.pk}),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             {
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:                 "data_agendamento": nova_data,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:                 "horario_inicio": "11:00",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:                 "horario_fim": "12:00",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             },
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.agendamento.refresh_from_db()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(self.agendamento.data_agendamento, nova_data)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(self.agendamento.horario_inicio, "11:00")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(self.agendamento.horario_fim, "12:00")
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:     def test_reagendar_agendamento_data_passada(self):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # Teste para garantir que não seja possível reagendar para uma data
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # passada
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.client.force_authenticate(user=self.user_paciente)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         nova_data = timezone.now().date() - timezone.timedelta(days=1)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             reverse("agendamento-reagendar", kwargs={"pk": self.agendamento.pk}),
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             {
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:                 "data_agendamento": nova_data,
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:                 "horario_inicio": "11:00",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:                 "horario_fim": "12:00",
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             },
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:     def test_confirmar_agendamento_notificacao(self, mock_send_notification):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # Teste para confirmar um agendamento e verificar se a notificação foi
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # enviada
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.client.force_authenticate(user=self.user_paciente)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         response = self.client.post(
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:             reverse("agendamento-confirmar", kwargs={"pk": self.agendamento.pk})
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         )
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         mock_send_notification.assert_called_once()
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:     def test_meus_agendamentos(self):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # Teste para listar agendamentos do paciente autenticado
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.client.force_authenticate(user=self.user_paciente)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         response = self.client.get(reverse("agendamento-meus-agendamentos"))
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(len(response.data), 1)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(response.data[0]["id"], self.agendamento.id)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:     def test_meus_agendamentos_outro_paciente(self):
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # Teste para garantir que um paciente veja apenas seus próprios
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         # agendamentos
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.client.force_authenticate(user=self.user_outro_paciente)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         response = self.client.get(reverse("agendamento-meus-agendamentos"))
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(response.status_code, status.HTTP_200_OK)
/mnt/dados/ClinicaAI/backend/apps/agendamentos/tests.py:         self.assertEqual(len(response.data), 0)
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/views.py
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/views.py: from .models import Recursos_humanosModel
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/views.py: from .serializers import Recursos_humanosSerializer
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/views.py: class Recursos_humanosViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/views.py:     queryset = Recursos_humanosModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/views.py:     serializer_class = Recursos_humanosSerializer
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/apps.py
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/apps.py: class Recursos_humanosConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/apps.py:     name = "apps.recursos_humanos"
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/models.py
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/models.py: class Recursos_humanosModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:             name="Recursos_humanosModel",
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/urls.py
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/urls.py: from .views import Recursos_humanosViewSet
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/urls.py: router.register(r"recursos_humanos", Recursos_humanosViewSet)
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/admin.py
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/admin.py: from .models import Recursos_humanosModel
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/admin.py: @admin.register(Recursos_humanosModel)
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/admin.py: class Recursos_humanosAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/serializers.py
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/serializers.py: from .models import Recursos_humanosModel
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/serializers.py: class Recursos_humanosSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/serializers.py:         model = Recursos_humanosModel
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/tests.py
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/recursos_humanos/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/qualidade/views.py
/mnt/dados/ClinicaAI/backend/apps/qualidade/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/qualidade/views.py: from .models import QualidadeModel
/mnt/dados/ClinicaAI/backend/apps/qualidade/views.py: from .serializers import QualidadeSerializer
/mnt/dados/ClinicaAI/backend/apps/qualidade/views.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/views.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/views.py: class QualidadeViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/qualidade/views.py:     queryset = QualidadeModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/qualidade/views.py:     serializer_class = QualidadeSerializer
/mnt/dados/ClinicaAI/backend/apps/qualidade/apps.py
/mnt/dados/ClinicaAI/backend/apps/qualidade/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/qualidade/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/apps.py: class QualidadeConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/qualidade/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/qualidade/apps.py:     name = "apps.qualidade"
/mnt/dados/ClinicaAI/backend/apps/qualidade/models.py
/mnt/dados/ClinicaAI/backend/apps/qualidade/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/qualidade/models.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/models.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/models.py: class QualidadeModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/qualidade/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/qualidade/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/qualidade/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/qualidade/models.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/qualidade/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:             name="QualidadeModel",
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/qualidade/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/qualidade/urls.py
/mnt/dados/ClinicaAI/backend/apps/qualidade/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/qualidade/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/qualidade/urls.py: from .views import QualidadeViewSet
/mnt/dados/ClinicaAI/backend/apps/qualidade/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/qualidade/urls.py: router.register(r"qualidade", QualidadeViewSet)
/mnt/dados/ClinicaAI/backend/apps/qualidade/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/qualidade/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/qualidade/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/qualidade/admin.py
/mnt/dados/ClinicaAI/backend/apps/qualidade/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/qualidade/admin.py: from .models import QualidadeModel
/mnt/dados/ClinicaAI/backend/apps/qualidade/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/admin.py: @admin.register(QualidadeModel)
/mnt/dados/ClinicaAI/backend/apps/qualidade/admin.py: class QualidadeAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/qualidade/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/qualidade/serializers.py
/mnt/dados/ClinicaAI/backend/apps/qualidade/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/qualidade/serializers.py: from .models import QualidadeModel
/mnt/dados/ClinicaAI/backend/apps/qualidade/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/serializers.py: class QualidadeSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/qualidade/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/qualidade/serializers.py:         model = QualidadeModel
/mnt/dados/ClinicaAI/backend/apps/qualidade/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/qualidade/tests.py
/mnt/dados/ClinicaAI/backend/apps/qualidade/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/qualidade/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/qualidade/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/views.py
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/views.py: from .models import AvaliacoesModel
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/views.py: from .serializers import AvaliacoesSerializer
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/views.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/views.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/views.py: class AvaliacoesViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/views.py:     queryset = AvaliacoesModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/views.py:     serializer_class = AvaliacoesSerializer
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/apps.py
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/apps.py: class AvaliacoesConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/apps.py:     name = "apps.avaliacoes"
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/models.py
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/models.py: class AvaliacoesModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/models.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:             name="AvaliacoesModel",
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/urls.py
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/urls.py: from .views import AvaliacoesViewSet
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/urls.py: router.register(r"avaliacoes", AvaliacoesViewSet)
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/admin.py
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/admin.py: from .models import AvaliacoesModel
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/admin.py: @admin.register(AvaliacoesModel)
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/admin.py: class AvaliacoesAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/serializers.py
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/serializers.py: from .models import AvaliacoesModel
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/serializers.py: class AvaliacoesSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/serializers.py:         model = AvaliacoesModel
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/tests.py
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/avaliacoes/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/views.py
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/views.py: from rest_framework import viewsets
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/views.py: from .models import Assinar_documentosModel
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/views.py: from .serializers import Assinar_documentosSerializer
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/views.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/views.py: class Assinar_documentosViewSet(viewsets.ModelViewSet):
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/views.py:     queryset = Assinar_documentosModel.objects.all()
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/views.py:     serializer_class = Assinar_documentosSerializer
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/apps.py
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/apps.py: from django.apps import AppConfig
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/apps.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/apps.py: class Assinar_documentosConfig(AppConfig):
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/apps.py:     default_auto_field = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/apps.py:     name = "apps.assinar_documentos"
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/models.py
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/models.py: from django.db import models
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/models.py: class Assinar_documentosModel(models.Model):
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/models.py:     nome = models.CharField(max_length=255)
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/models.py:     criado_em = models.DateTimeField(auto_now_add=True)
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/models.py:     atualizado_em = models.DateTimeField(auto_now=True)
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/models.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/models.py:     def __str__(self):
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/models.py:         return self.nome
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py: # Generated by Django 5.1.2 on 2024-10-24 23:26
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py: from django.db import migrations, models
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py: class Migration(migrations.Migration):
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:     initial = True
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:     dependencies = []
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:     operations = [
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:         migrations.CreateModel(
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:             name="Assinar_documentosModel",
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:             fields=[
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:                 (
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:                     "id",
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:                     models.BigAutoField(
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:                         auto_created=True,
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:                         primary_key=True,
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:                         serialize=False,
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:                         verbose_name="ID",
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:                     ),
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:                 ),
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:                 ("nome", models.CharField(max_length=255)),
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:                 ("criado_em", models.DateTimeField(auto_now_add=True)),
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:                 ("atualizado_em", models.DateTimeField(auto_now=True)),
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:             ],
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:         ),
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/migrations/0001_initial.py:     ]
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/urls.py
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/urls.py: from rest_framework.routers import DefaultRouter
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/urls.py: from .views import Assinar_documentosViewSet
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/urls.py: router = DefaultRouter()
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/urls.py: router.register(r"assinar_documentos", Assinar_documentosViewSet)
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/urls.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/urls.py:     path("", include(router.urls)),
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/urls.py: ]
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/admin.py
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/admin.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/admin.py: from .models import Assinar_documentosModel
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/admin.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/admin.py: @admin.register(Assinar_documentosModel)
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/admin.py: class Assinar_documentosAdmin(admin.ModelAdmin):
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/admin.py:     list_display = ("nome", "criado_em", "atualizado_em")
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/serializers.py
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/serializers.py: from rest_framework import serializers
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/serializers.py: from .models import Assinar_documentosModel
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/serializers.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/serializers.py: class Assinar_documentosSerializer(serializers.ModelSerializer):
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/serializers.py:     class Meta:
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/serializers.py:         model = Assinar_documentosModel
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/serializers.py:         fields = "__all__"
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/tests.py
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/tests.py: from django.test import TestCase
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/tests.py: 
/mnt/dados/ClinicaAI/backend/apps/assinar_documentos/tests.py: # Create your tests here.
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: """
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: ASGI config for ClinicaAI project.
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: It exposes the ASGI callable as a module-level variable named ``application``.
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: For more information on this file, see
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: """
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: import os
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: from django.core.asgi import get_asgi_application
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ClinicaAI.settings")
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/asgi.py: application = get_asgi_application()
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py: from django.contrib import admin
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py: from django.urls import path, include
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py: urlpatterns = [
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("admin/", admin.site.urls),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("crm/", include("apps.crm.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("vendas/", include("apps.vendas.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("recrutamento/", include("apps.recrutamento.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("recursos_humanos/", include("apps.recursos_humanos.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("ecommerce/", include("apps.ecommerce.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("compromissos/", include("apps.compromissos.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("mensagens/", include("apps.mensagens.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("servico_campo/", include("apps.servico_campo.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("planilhas_horas/", include("apps.planilhas_horas.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("projeto/", include("apps.projeto.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("qualidade/", include("apps.qualidade.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("compras/", include("apps.compras.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("manutencao/", include("apps.manutencao.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("forum/", include("apps.forum.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("blog/", include("apps.blog.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("elearning/", include("apps.elearning.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("plm/", include("apps.plm.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("fabricacao/", include("apps.fabricacao.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("inventario/", include("apps.inventario.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("chat_ao_vivo/", include("apps.chat_ao_vivo.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("criador_sites/", include("apps.criador_sites.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("locacao/", include("apps.locacao.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("assinaturas/", include("apps.assinaturas.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("assinar_documentos/", include("apps.assinar_documentos.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("documentos/", include("apps.documentos.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("planilhas/", include("apps.planilhas.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("despesas/", include("apps.despesas.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("faturamento/", include("apps.faturamento.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("marketing_sms/", include("apps.marketing_sms.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("marketing_email/", include("apps.marketing_email.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("redes_sociais/", include("apps.redes_sociais.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("frota/", include("apps.frota.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("indicacoes/", include("apps.indicacoes.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("avaliacoes/", include("apps.avaliacoes.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py:     path("folgas/", include("apps.folgas.urls")),
/mnt/dados/ClinicaAI/backend/ClinicaAI/urls.py: ]
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: """
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: WSGI config for ClinicaAI project.
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: It exposes the WSGI callable as a module-level variable named ``application``.
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: For more information on this file, see
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: """
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: import os
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: from django.core.wsgi import get_wsgi_application
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ClinicaAI.settings")
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/wsgi.py: application = get_wsgi_application()
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: """
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: Django settings for ClinicaAI project.
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: Generated by 'django-admin startproject' using Django 4.2.16.
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: For more information on this file, see
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: https://docs.djangoproject.com/en/4.2/topics/settings/
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: For the full list of settings and their values, see
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: https://docs.djangoproject.com/en/4.2/ref/settings/
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: """
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: import sys
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: from pathlib import Path
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # Build paths inside the project like this: BASE_DIR / 'subdir'.
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: BASE_DIR = Path(__file__).resolve().parent.parent
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: sys.path.append(str(BASE_DIR / "apps"))
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # Quick-start development settings - unsuitable for production
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # SECURITY WARNING: keep the secret key used in production secret!
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: SECRET_KEY = "django-insecure-xp07(pa6ct^w3$k9-dqf0c-6r%)b(x!s)6(csocel=e5tm2s*3"
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # SECURITY WARNING: don't run with debug turned on in production!
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: DEBUG = True
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: ALLOWED_HOSTS = []
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # Application definition
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: INSTALLED_APPS = [
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     # Django core apps
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "django.contrib.admin",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "django.contrib.auth",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "django.contrib.contenttypes",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "django.contrib.sessions",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "django.contrib.messages",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "django.contrib.staticfiles",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     # Third-party apps
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "prometheus_client",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "drf_yasg",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "channels",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "corsheaders",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "rest_framework",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     # Project apps (ordered by dependencies)
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.profissionais.apps.ProfissionaisConfig",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.pacientes",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.prontuarios",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.exames",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.atendimentos",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.agendamentos",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.assinaturas",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.assinar_documentos",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.documentos",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.financeiro",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.faturamento",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.crm",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.vendas",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.ecommerce",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.blog",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.marketing_sms",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.marketing_email",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.redes_sociais",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.automacao_marketing",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.conhecimento",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.chat_ao_vivo",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.mensagens",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.whatsapp",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.voip",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.forum",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.central_ajuda",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.eventos",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.indicacoes",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.elearning",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.projeto",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.planilhas_horas",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.produtividade",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.compromissos",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.servico_campo",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.qualidade",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.recursos_humanos",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.recrutamento",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.folgas",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.avaliacoes",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.plm",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.fabricacao",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.inventario",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.locacao",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.frota",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.aprovacoes",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.despesas",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.compras",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.manutencao",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.planilhas",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.criador_sites",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "apps.iot",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: ]
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: MIDDLEWARE = [
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "corsheaders.middleware.CorsMiddleware",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "django.middleware.security.SecurityMiddleware",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "django.contrib.sessions.middleware.SessionMiddleware",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "django.middleware.common.CommonMiddleware",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "django.middleware.csrf.CsrfViewMiddleware",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "django.contrib.auth.middleware.AuthenticationMiddleware",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "django.contrib.messages.middleware.MessageMiddleware",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "django.middleware.clickjacking.XFrameOptionsMiddleware",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: ]
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: ROOT_URLCONF = "ClinicaAI.urls"
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: TEMPLATES = [
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     {
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "BACKEND": "django.template.backends.django.DjangoTemplates",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "DIRS": [],
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "APP_DIRS": True,
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "OPTIONS": {
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:             "context_processors": [
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:                 "django.template.context_processors.debug",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:                 "django.template.context_processors.request",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:                 "django.contrib.auth.context_processors.auth",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:                 "django.contrib.messages.context_processors.messages",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:             ],
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         },
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     },
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: ]
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: WSGI_APPLICATION = "ClinicaAI.wsgi.application"
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: ENCRYPTION_KEY = "b-Q_0ri6gj0fA45I33ZBTM5OAA4yRijdXJdREVyKSZs="
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # Database
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # https://docs.djangoproject.com/en/4.2/ref/settings/#databases
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: DATABASES = {
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "default": {
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "ENGINE": "django.db.backends.postgresql",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "NAME": "clinicaai",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "USER": "diego",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "PASSWORD": "Mouse2250@#86",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "HOST": "localhost",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "PORT": "5432",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     }
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: }
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # Password validation
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: AUTH_PASSWORD_VALIDATORS = [
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     {
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     },
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     {
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     },
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     {
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     },
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     {
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     },
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: ]
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # Internationalization
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # https://docs.djangoproject.com/en/4.2/topics/i18n/
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: LANGUAGE_CODE = "en-us"
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: TIME_ZONE = "UTC"
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: USE_I18N = True
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: USE_TZ = True
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # Static files (CSS, JavaScript, Images)
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # https://docs.djangoproject.com/en/4.2/howto/static-files/
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: STATIC_URL = "static/"
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # Default primary key field type
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: # https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: 
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: CORS_ALLOWED_ORIGINS = ["http://localhost:3000"]
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: ASGI_APPLICATION = "ClinicaAI.asgi.application"
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: CHANNEL_LAYERS = {
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "default": {
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "BACKEND": "channels_redis.core.RedisChannelLayer",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "CONFIG": {
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:             "hosts": [("127.0.0.1", 6379)],
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         },
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     },
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: }
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: CELERY_BROKER_URL = "redis://localhost:6379/0"
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: CELERY_RESULT_BACKEND = "redis://localhost:6379/0"
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: REST_FRAMEWORK = {
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "DEFAULT_AUTHENTICATION_CLASSES": (
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:         "rest_framework_simplejwt.authentication.JWTAuthentication",
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     ),
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py:     "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
/mnt/dados/ClinicaAI/backend/ClinicaAI/settings.py: }
